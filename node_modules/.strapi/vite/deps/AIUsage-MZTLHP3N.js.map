{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/ApplicationInfoPage/components/AIUsage.tsx"],
  "sourcesContent": ["import { Flex, Typography, Grid, ProgressBar } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useGetAIUsageQuery } from '../../../../../services/ai';\n\nconst StyledProgressBar = styled(ProgressBar)`\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.neutral200};\n  > div {\n    background-color: ${({ theme }) => theme.colors.neutral700};\n  }\n`;\n\nconst StyledGridItem = styled(Grid.Item)`\n  ${({ theme }) => theme.breakpoints.large} {\n    grid-column: 7 / 13;\n  }\n`;\n\nexport const AIUsage = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetAIUsageQuery(undefined, {\n    refetchOnMountOrArgChange: true,\n  });\n\n  if (isLoading) {\n    return null;\n  }\n\n  if (error || !data) {\n    return null;\n  }\n\n  if (!data.subscription?.cmsAiEnabled) {\n    return null;\n  }\n\n  // Calculate remaining credits and total\n  const totalCredits = data.subscription.cmsAiCreditsBase;\n  const usedCredits = data.cmsAiCreditsUsed;\n  const maxCredits = data.subscription.cmsAiCreditsMaxUsage;\n  const overage = usedCredits - totalCredits;\n  const percentRemaining = (usedCredits / totalCredits) * 100;\n  const percentOverage = (usedCredits / maxCredits) * 100;\n\n  const isInOverages = overage > 0 && maxCredits !== totalCredits;\n\n  return (\n    <StyledGridItem col={6} s={12} direction=\"column\" alignItems=\"start\" gap={2}>\n      <Typography variant=\"sigma\" textColor=\"neutral600\">\n        {formatMessage({\n          id: 'Settings.application.ai-usage',\n          defaultMessage: 'AI Usage',\n        })}\n      </Typography>\n      <Flex gap={2} direction=\"column\" alignItems=\"flex-start\">\n        {!isInOverages && (\n          <>\n            <Flex width=\"100%\">\n              <StyledProgressBar value={percentRemaining} size=\"M\" />\n            </Flex>\n            <Typography variant=\"omega\">\n              {`${usedCredits.toFixed(2)} credits used from ${totalCredits} credits available in your plan`}\n            </Typography>\n          </>\n        )}\n        {isInOverages && (\n          <>\n            <Flex width=\"100%\">\n              <StyledProgressBar value={percentOverage} size=\"M\" color=\"danger\" />\n            </Flex>\n            <Typography variant=\"omega\" textColor=\"danger600\">\n              {`${overage.toFixed(2)} credits used above the ${totalCredits} credits available in your plan`}\n            </Typography>\n          </>\n        )}\n      </Flex>\n    </StyledGridItem>\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,oBAAoBC,GAAOC,WAAAA;;sBAEX,CAAC,EAAEC,MAAK,MAAOA,MAAMC,OAAOC,UAAU;;wBAEpC,CAAC,EAAEF,MAAK,MAAOA,MAAMC,OAAOE,UAAU;;;AAI9D,IAAMC,iBAAiBN,GAAOO,KAAKC,IAAI;IACnC,CAAC,EAAEN,MAAK,MAAOA,MAAMO,YAAYC,KAAK;;;;IAK7BC,UAAU,MAAA;;AACrB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,MAAMC,WAAWC,MAAK,IAAKC,mBAAmBC,QAAW;IAC/DC,2BAA2B;EAC7B,CAAA;AAEA,MAAIJ,WAAW;AACb,WAAO;EACT;AAEA,MAAIC,SAAS,CAACF,MAAM;AAClB,WAAO;EACT;AAEA,MAAI,GAACA,UAAKM,iBAALN,mBAAmBO,eAAc;AACpC,WAAO;EACT;AAGA,QAAMC,eAAeR,KAAKM,aAAaG;AACvC,QAAMC,cAAcV,KAAKW;AACzB,QAAMC,aAAaZ,KAAKM,aAAaO;AACrC,QAAMC,UAAUJ,cAAcF;AAC9B,QAAMO,mBAAmB,cAAeP,eAAgB;AACxD,QAAMQ,iBAAiB,cAAeJ,aAAc;AAEpD,QAAMK,eAAeH,UAAU,KAAKF,eAAeJ;AAEnD,aACEU,yBAAC1B,gBAAAA;IAAe2B,KAAK;IAAGC,GAAG;IAAIC,WAAU;IAASC,YAAW;IAAQC,KAAK;;UACxEC,wBAACC,YAAAA;QAAWC,SAAQ;QAAQC,WAAU;kBACnC7B,cAAc;UACb8B,IAAI;UACJC,gBAAgB;QAClB,CAAA;;UAEFX,yBAACY,MAAAA;QAAKP,KAAK;QAAGF,WAAU;QAASC,YAAW;;UACzC,CAACL,oBACAC,yBAAAa,6BAAA;;kBACEP,wBAACM,MAAAA;gBAAKE,OAAM;gBACV,cAAAR,wBAACvC,mBAAAA;kBAAkBgD,OAAOlB;kBAAkBmB,MAAK;;;kBAEnDV,wBAACC,YAAAA;gBAAWC,SAAQ;0BACjB,GAAGhB,YAAYyB,QAAQ,CAAA,CAAA,sBAAwB3B,YAAa;;;;UAIlES,oBACCC,yBAAAa,6BAAA;;kBACEP,wBAACM,MAAAA;gBAAKE,OAAM;gBACV,cAAAR,wBAACvC,mBAAAA;kBAAkBgD,OAAOjB;kBAAgBkB,MAAK;kBAAIE,OAAM;;;kBAE3DZ,wBAACC,YAAAA;gBAAWC,SAAQ;gBAAQC,WAAU;0BACnC,GAAGb,QAAQqB,QAAQ,CAAA,CAAA,2BAA6B3B,YAAa;;;;;;;;AAO5E;",
  "names": ["StyledProgressBar", "styled", "ProgressBar", "theme", "colors", "neutral200", "neutral700", "StyledGridItem", "Grid", "Item", "breakpoints", "large", "AIUsage", "formatMessage", "useIntl", "data", "isLoading", "error", "useGetAIUsageQuery", "undefined", "refetchOnMountOrArgChange", "subscription", "cmsAiEnabled", "totalCredits", "cmsAiCreditsBase", "usedCredits", "cmsAiCreditsUsed", "maxCredits", "cmsAiCreditsMaxUsage", "overage", "percentRemaining", "percentOverage", "isInOverages", "_jsxs", "col", "s", "direction", "alignItems", "gap", "_jsx", "Typography", "variant", "textColor", "id", "defaultMessage", "Flex", "_Fragment", "width", "value", "size", "toFixed", "color"]
}
