import {
  useSettings
} from "./chunk-PL3RSFGJ.js";
import {
  PERMISSIONS,
  getTrad
} from "./chunk-NZGZBCX6.js";
import "./chunk-JLC4R6HH.js";
import {
  useMutation
} from "./chunk-LRJSHZU2.js";
import "./chunk-EVNWODU4.js";
import "./chunk-AJLTGHEL.js";
import {
  useAIAvailability
} from "./chunk-KQGKVKXX.js";
import "./chunk-SDKXNOYE.js";
import "./chunk-MAZWOSDA.js";
import "./chunk-TXPAHMSH.js";
import "./chunk-SZZ65EPC.js";
import "./chunk-H2FYTGHH.js";
import "./chunk-QIJGNK42.js";
import "./chunk-WNQHXME7.js";
import "./chunk-PGK4XCH7.js";
import "./chunk-D7NHUHOJ.js";
import "./chunk-KDQSYRL5.js";
import "./chunk-G3AK5ZM5.js";
import "./chunk-DJMMTKKX.js";
import "./chunk-CWMSSULX.js";
import "./chunk-TGM2QIIU.js";
import "./chunk-4PWW3XY5.js";
import "./chunk-YT4NQHAJ.js";
import "./chunk-ECMPQB6G.js";
import "./chunk-7A3IGISS.js";
import {
  useFetchClient
} from "./chunk-2GTVOV37.js";
import "./chunk-ADT2LCIE.js";
import "./chunk-XQRU5NAP.js";
import "./chunk-KRZA4VUN.js";
import "./chunk-OQJ4NR7G.js";
import "./chunk-HRGZFPOS.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import {
  require_set
} from "./chunk-SYBPFQ5V.js";
import "./chunk-4HRP3RAA.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-GRQHUTN5.js";
import "./chunk-HDJGZCH6.js";
import "./chunk-Z7D3YUXH.js";
import "./chunk-Y7PW7LOS.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-XFEN4BQ3.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-MQ5W6ZZ2.js";
import {
  Layouts
} from "./chunk-3VVEWNIU.js";
import "./chunk-CHBEAGYH.js";
import "./chunk-6RQQFGOL.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import {
  require_isEqual
} from "./chunk-FPU5PDM4.js";
import {
  Page
} from "./chunk-W7EWQXCF.js";
import "./chunk-L5KTHKOW.js";
import "./chunk-4V4TECMW.js";
import {
  useNotification
} from "./chunk-CNQTL426.js";
import "./chunk-PWWLPW7X.js";
import {
  require_lib
} from "./chunk-O2YIDDWC.js";
import "./chunk-JMFYRDVQ.js";
import "./chunk-V3H6CYGR.js";
import "./chunk-ZC6UOKQ5.js";
import "./chunk-HM5YIFDI.js";
import {
  fn
} from "./chunk-QOUV5O5E.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Toggle,
  Typography,
  useIntl
} from "./chunk-WNDVG6TF.js";
import "./chunk-7K6WC7UG.js";
import "./chunk-RKN75MQZ.js";
import "./chunk-AWHRF5BE.js";
import {
  ForwardRef$2o,
  ForwardRef$o
} from "./chunk-EXVE46AP.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import "./chunk-3LBZKDTB.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/upload/dist/admin/pages/SettingsPage/SettingsPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);
var import_qs = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/pages/SettingsPage/init.mjs
var init = (initialState2) => {
  return initialState2;
};

// node_modules/@strapi/upload/dist/admin/pages/SettingsPage/reducer.mjs
var import_set = __toESM(require_set(), 1);
var initialData = {
  responsiveDimensions: true,
  sizeOptimization: true,
  autoOrientation: false,
  videoPreview: false,
  aiMetadata: true
};
var initialState = {
  initialData,
  modifiedData: {
    ...initialData
  }
};
var reducer = (state, action) => fn(state, (drafState) => {
  switch (action.type) {
    case "GET_DATA_SUCCEEDED": {
      drafState.initialData = action.data;
      drafState.modifiedData = action.data;
      break;
    }
    case "ON_CHANGE": {
      (0, import_set.default)(drafState, [
        "modifiedData",
        ...action.keys.split(".")
      ], action.value);
      break;
    }
    default:
      return state;
  }
});

// node_modules/@strapi/upload/dist/admin/pages/SettingsPage/SettingsPage.mjs
var SettingsPage = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { put } = useFetchClient();
  const [{ initialData: initialData2, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);
  const { data, isLoading, refetch } = useSettings();
  const isAIAvailable = useAIAvailability();
  React.useEffect(() => {
    if (data) {
      dispatch({
        type: "GET_DATA_SUCCEEDED",
        data
      });
    }
  }, [
    data
  ]);
  const isSaveButtonDisabled = (0, import_isEqual.default)(initialData2, modifiedData);
  const { mutateAsync, isLoading: isSubmitting } = useMutation(async (body) => {
    const { data: data2 } = await put("/upload/settings", body);
    return data2;
  }, {
    onSuccess() {
      refetch();
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "notification.form.success.fields"
        })
      });
    },
    onError(err) {
      console.error(err);
    }
  });
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSaveButtonDisabled) {
      return;
    }
    await mutateAsync(modifiedData);
  };
  const handleChange = ({ target: { name, value } }) => {
    dispatch({
      type: "ON_CHANGE",
      keys: name,
      value
    });
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, {
    tabIndex: -1,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: getTrad("page.title"),
          defaultMessage: "Settings - Media Library"
        })
      }),
      (0, import_jsx_runtime.jsxs)("form", {
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title: formatMessage({
              id: getTrad("settings.header.label"),
              defaultMessage: "Media Library"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(Button, {
              disabled: isSaveButtonDisabled,
              loading: isSubmitting,
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$2o, {}),
              size: "S",
              children: formatMessage({
                id: "global.save",
                defaultMessage: "Save"
              })
            }),
            subtitle: formatMessage({
              id: getTrad("settings.sub-header.label"),
              defaultMessage: "Configure the settings for the Media Library"
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime.jsx)(Layouts.Root, {
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 4,
                children: [
                  isAIAvailable && (0, import_jsx_runtime.jsx)(Box, {
                    background: "neutral0",
                    padding: 6,
                    shadow: "filterShadow",
                    hasRadius: true,
                    children: (0, import_jsx_runtime.jsx)(Flex, {
                      direction: "column",
                      alignItems: "stretch",
                      gap: 1,
                      children: (0, import_jsx_runtime.jsxs)(Grid.Root, {
                        gap: 6,
                        children: [
                          (0, import_jsx_runtime.jsxs)(Grid.Item, {
                            col: 8,
                            s: 12,
                            direction: "column",
                            alignItems: "stretch",
                            children: [
                              (0, import_jsx_runtime.jsxs)(Flex, {
                                gap: 2,
                                children: [
                                  (0, import_jsx_runtime.jsx)(Box, {
                                    color: "alternative700",
                                    children: (0, import_jsx_runtime.jsx)(ForwardRef$o, {})
                                  }),
                                  (0, import_jsx_runtime.jsx)(Typography, {
                                    variant: "delta",
                                    tag: "h2",
                                    children: formatMessage({
                                      id: getTrad("settings.form.aiMetadata.label"),
                                      defaultMessage: "Generate AI captions and alt texts automatically on upload!"
                                    })
                                  })
                                ]
                              }),
                              (0, import_jsx_runtime.jsx)(Flex, {
                                paddingTop: 1,
                                children: (0, import_jsx_runtime.jsx)(Typography, {
                                  variant: "pi",
                                  textColor: "neutral600",
                                  children: formatMessage({
                                    id: getTrad("settings.form.aiMetadata.description"),
                                    defaultMessage: "Enable this feature to save time, optimize your SEO and increase accessibility by letting our AI generate captions and alternative texts for you."
                                  })
                                })
                              })
                            ]
                          }),
                          (0, import_jsx_runtime.jsx)(Grid.Item, {
                            col: 4,
                            s: 12,
                            direction: "column",
                            alignItems: "end",
                            justifyContent: "center",
                            children: (0, import_jsx_runtime.jsx)(Field.Root, {
                              name: "aiMetadata",
                              width: "158px",
                              children: (0, import_jsx_runtime.jsx)(Toggle, {
                                checked: modifiedData == null ? void 0 : modifiedData.aiMetadata,
                                offLabel: formatMessage({
                                  id: "app.components.ToggleCheckbox.off-label",
                                  defaultMessage: "Disabled"
                                }),
                                onLabel: formatMessage({
                                  id: "app.components.ToggleCheckbox.on-label",
                                  defaultMessage: "Enabled"
                                }),
                                onChange: (e) => {
                                  handleChange({
                                    target: {
                                      name: "aiMetadata",
                                      value: e.target.checked
                                    }
                                  });
                                }
                              })
                            })
                          })
                        ]
                      })
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(Box, {
                    background: "neutral0",
                    padding: 6,
                    shadow: "filterShadow",
                    hasRadius: true,
                    children: (0, import_jsx_runtime.jsxs)(Flex, {
                      direction: "column",
                      alignItems: "stretch",
                      gap: 4,
                      children: [
                        (0, import_jsx_runtime.jsx)(Flex, {
                          children: (0, import_jsx_runtime.jsx)(Typography, {
                            variant: "delta",
                            tag: "h2",
                            children: formatMessage({
                              id: getTrad("settings.blockTitle"),
                              defaultMessage: "Asset management"
                            })
                          })
                        }),
                        (0, import_jsx_runtime.jsxs)(Grid.Root, {
                          gap: 6,
                          children: [
                            (0, import_jsx_runtime.jsx)(Grid.Item, {
                              col: 6,
                              s: 12,
                              direction: "column",
                              alignItems: "stretch",
                              children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                                hint: formatMessage({
                                  id: getTrad("settings.form.responsiveDimensions.description"),
                                  defaultMessage: "Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset."
                                }),
                                name: "responsiveDimensions",
                                children: [
                                  (0, import_jsx_runtime.jsx)(Field.Label, {
                                    children: formatMessage({
                                      id: getTrad("settings.form.responsiveDimensions.label"),
                                      defaultMessage: "Responsive friendly upload"
                                    })
                                  }),
                                  (0, import_jsx_runtime.jsx)(Toggle, {
                                    checked: modifiedData == null ? void 0 : modifiedData.responsiveDimensions,
                                    offLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.off-label",
                                      defaultMessage: "Off"
                                    }),
                                    onLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.on-label",
                                      defaultMessage: "On"
                                    }),
                                    onChange: (e) => {
                                      handleChange({
                                        target: {
                                          name: "responsiveDimensions",
                                          value: e.target.checked
                                        }
                                      });
                                    }
                                  }),
                                  (0, import_jsx_runtime.jsx)(Field.Hint, {})
                                ]
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Grid.Item, {
                              col: 6,
                              s: 12,
                              direction: "column",
                              alignItems: "stretch",
                              children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                                hint: formatMessage({
                                  id: getTrad("settings.form.sizeOptimization.description"),
                                  defaultMessage: "Enabling this option will reduce the image size and slightly reduce its quality."
                                }),
                                name: "sizeOptimization",
                                children: [
                                  (0, import_jsx_runtime.jsx)(Field.Label, {
                                    children: formatMessage({
                                      id: getTrad("settings.form.sizeOptimization.label"),
                                      defaultMessage: "Size optimization"
                                    })
                                  }),
                                  (0, import_jsx_runtime.jsx)(Toggle, {
                                    checked: modifiedData == null ? void 0 : modifiedData.sizeOptimization,
                                    offLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.off-label",
                                      defaultMessage: "Off"
                                    }),
                                    onLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.on-label",
                                      defaultMessage: "On"
                                    }),
                                    onChange: (e) => {
                                      handleChange({
                                        target: {
                                          name: "sizeOptimization",
                                          value: e.target.checked
                                        }
                                      });
                                    }
                                  }),
                                  (0, import_jsx_runtime.jsx)(Field.Hint, {})
                                ]
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Grid.Item, {
                              col: 6,
                              s: 12,
                              direction: "column",
                              alignItems: "stretch",
                              children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                                hint: formatMessage({
                                  id: getTrad("settings.form.autoOrientation.description"),
                                  defaultMessage: "Enabling this option will automatically rotate the image according to EXIF orientation tag."
                                }),
                                name: "autoOrientation",
                                children: [
                                  (0, import_jsx_runtime.jsx)(Field.Label, {
                                    children: formatMessage({
                                      id: getTrad("settings.form.autoOrientation.label"),
                                      defaultMessage: "Auto orientation"
                                    })
                                  }),
                                  (0, import_jsx_runtime.jsx)(Toggle, {
                                    checked: modifiedData == null ? void 0 : modifiedData.autoOrientation,
                                    offLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.off-label",
                                      defaultMessage: "Off"
                                    }),
                                    onLabel: formatMessage({
                                      id: "app.components.ToggleCheckbox.on-label",
                                      defaultMessage: "On"
                                    }),
                                    onChange: (e) => {
                                      handleChange({
                                        target: {
                                          name: "autoOrientation",
                                          value: e.target.checked
                                        }
                                      });
                                    }
                                  }),
                                  (0, import_jsx_runtime.jsx)(Field.Hint, {})
                                ]
                              })
                            })
                          ]
                        })
                      ]
                    })
                  })
                ]
              })
            })
          })
        ]
      })
    ]
  });
};
var ProtectedSettingsPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, {
  permissions: PERMISSIONS.settings,
  children: (0, import_jsx_runtime.jsx)(SettingsPage, {})
});
export {
  ProtectedSettingsPage,
  SettingsPage
};
//# sourceMappingURL=SettingsPage-DZNQP2LR.js.map
