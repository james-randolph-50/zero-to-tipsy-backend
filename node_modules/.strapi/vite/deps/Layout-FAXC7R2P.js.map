{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/useSettingsMenu.ts", "../../../@strapi/admin/admin/src/pages/Settings/components/SettingsNav.tsx", "../../../@strapi/admin/admin/src/pages/Settings/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport sortBy from 'lodash/sortBy';\nimport { useSelector } from 'react-redux';\n\nimport { SETTINGS_LINKS_CE, SettingsMenuLink } from '../constants';\nimport { useAppInfo } from '../features/AppInfo';\nimport { useAuth } from '../features/Auth';\nimport { useStrapiApp } from '../features/StrapiApp';\nimport { selectAdminPermissions } from '../selectors';\nimport { PermissionMap } from '../types/permissions';\n\nimport { useEnterprise } from './useEnterprise';\n\nimport type {\n  StrapiAppSetting,\n  StrapiAppSettingLink as IStrapiAppSettingLink,\n} from '../core/apis/router';\n\nconst formatLinks = (menu: SettingsMenuSection[]): SettingsMenuSectionWithDisplayedLinks[] =>\n  menu.map((menuSection) => {\n    const formattedLinks = menuSection.links.map((link) => ({\n      ...link,\n      isDisplayed: false,\n    }));\n\n    return { ...menuSection, links: formattedLinks };\n  });\n\ninterface SettingsMenuLinkWithPermissions extends SettingsMenuLink {\n  permissions: IStrapiAppSettingLink['permissions'];\n  hasNotification?: boolean;\n}\n\ninterface StrapiAppSettingsLink extends IStrapiAppSettingLink {\n  licenseOnly?: never;\n  hasNotification?: never;\n}\n\ninterface SettingsMenuSection extends Omit<StrapiAppSetting, 'links'> {\n  links: Array<SettingsMenuLinkWithPermissions | StrapiAppSettingsLink>;\n}\n\ninterface SettingsMenuLinkWithPermissionsAndDisplayed extends SettingsMenuLinkWithPermissions {\n  isDisplayed: boolean;\n}\n\ninterface StrapiAppSettingLinkWithDisplayed extends StrapiAppSettingsLink {\n  isDisplayed: boolean;\n}\n\ninterface SettingsMenuSectionWithDisplayedLinks extends Omit<SettingsMenuSection, 'links'> {\n  links: Array<SettingsMenuLinkWithPermissionsAndDisplayed | StrapiAppSettingLinkWithDisplayed>;\n}\n\ntype SettingsMenu = SettingsMenuSectionWithDisplayedLinks[];\n\nconst useSettingsMenu = (): {\n  isLoading: boolean;\n  menu: SettingsMenu;\n} => {\n  const [{ isLoading, menu }, setData] = React.useState<{\n    isLoading: boolean;\n    menu: SettingsMenu;\n  }>({\n    isLoading: true,\n    menu: [],\n  });\n  const checkUserHasPermission = useAuth(\n    'useSettingsMenu',\n    (state) => state.checkUserHasPermissions\n  );\n  const shouldUpdateStrapi = useAppInfo('useSettingsMenu', (state) => state.shouldUpdateStrapi);\n  const settings = useStrapiApp('useSettingsMenu', (state) => state.settings);\n  const permissions = useSelector(selectAdminPermissions);\n\n  /**\n   * memoize the return value of this function to avoid re-computing it on every render\n   * because it's used in an effect it ends up re-running recursively.\n   */\n  const ceLinks = React.useMemo(() => SETTINGS_LINKS_CE(), []);\n\n  const { admin: adminLinks, global: globalLinks } = useEnterprise(\n    ceLinks,\n    async () => (await import('../../../ee/admin/src/constants')).SETTINGS_LINKS_EE(),\n    {\n      combine(ceLinks, eeLinks) {\n        return {\n          admin: [...eeLinks.admin, ...ceLinks.admin],\n          global: [...ceLinks.global, ...eeLinks.global],\n        };\n      },\n      defaultValue: {\n        admin: [],\n        global: [],\n      },\n    }\n  );\n\n  const addPermissions = React.useCallback(\n    (link: SettingsMenuLink) => {\n      if (!link.id) {\n        throw new Error('The settings menu item must have an id attribute.');\n      }\n\n      return {\n        ...link,\n        permissions: permissions.settings?.[link.id as keyof PermissionMap['settings']]?.main ?? [],\n      } satisfies SettingsMenuLinkWithPermissions;\n    },\n    [permissions.settings]\n  );\n\n  React.useEffect(() => {\n    const getData = async () => {\n      interface MenuLinkPermission {\n        hasPermission: boolean;\n        sectionIndex: number;\n        linkIndex: number;\n      }\n\n      const buildMenuPermissions = (sections: SettingsMenuSectionWithDisplayedLinks[]) =>\n        Promise.all(\n          sections.reduce<Promise<MenuLinkPermission>[]>((acc, section, sectionIndex) => {\n            const linksWithPermissions = section.links.map(async (link, linkIndex) => ({\n              hasPermission: (await checkUserHasPermission(link.permissions)).length > 0,\n              sectionIndex,\n              linkIndex,\n            }));\n\n            return [...acc, ...linksWithPermissions];\n          }, [])\n        );\n\n      const menuPermissions = await buildMenuPermissions(sections);\n\n      setData((prev) => {\n        return {\n          ...prev,\n          isLoading: false,\n          menu: sections.map((section, sectionIndex) => ({\n            ...section,\n            links: section.links.map((link, linkIndex) => {\n              const permission = menuPermissions.find(\n                (permission) =>\n                  permission.sectionIndex === sectionIndex && permission.linkIndex === linkIndex\n              );\n\n              return {\n                ...link,\n                isDisplayed: Boolean(permission?.hasPermission),\n              };\n            }),\n          })),\n        };\n      });\n    };\n\n    const { global, ...otherSections } = settings;\n    const sections = formatLinks([\n      {\n        ...global,\n        links: sortBy([...global.links, ...globalLinks.map(addPermissions)], (link) => link.id).map(\n          (link) => ({\n            ...link,\n            hasNotification: link.id === '000-application-infos' && shouldUpdateStrapi,\n          })\n        ),\n      },\n      {\n        id: 'permissions',\n        intlLabel: { id: 'Settings.permissions', defaultMessage: 'Administration Panel' },\n        links: adminLinks.map(addPermissions),\n      },\n      ...Object.values(otherSections),\n    ]);\n\n    getData();\n  }, [\n    adminLinks,\n    globalLinks,\n    settings,\n    shouldUpdateStrapi,\n    addPermissions,\n    checkUserHasPermission,\n  ]);\n\n  return {\n    isLoading,\n    menu: menu.map((menuItem) => ({\n      ...menuItem,\n      links: menuItem.links.filter((link) => link.isDisplayed),\n    })),\n  };\n};\n\nexport { useSettingsMenu };\nexport type { SettingsMenu };\n", "import { Badge, Divider } from '@strapi/design-system';\nimport { Lightning } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useLicenseLimits } from '../../../../../ee/admin/src/hooks/useLicenseLimits';\nimport { SubNav } from '../../../components/SubNav';\nimport { useTracking } from '../../../features/Tracking';\nimport { useSettingsMenu } from '../../../hooks/useSettingsMenu';\n\ntype LinkId =\n  | 'content-releases'\n  | 'review-workflows'\n  | 'sso'\n  | 'auditLogs'\n  | 'auditLogs-purchase-page';\n\ntype FeatureName = 'cms-content-releases' | 'review-workflows' | 'sso' | 'audit-logs';\n\nconst StyledBadge = styled(Badge)`\n  border-radius: 50%;\n  padding: ${({ theme }) => theme.spaces[2]};\n  height: 2rem;\n`;\n\nconst SettingsNav = ({ isFullPage = false }: { isFullPage?: boolean }) => {\n  const { menu } = useSettingsMenu();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const { license } = useLicenseLimits();\n\n  const availableFeatureNames = license?.features.map((feature) => feature.name);\n\n  const linksIdsToLicenseFeaturesNames: Record<LinkId, FeatureName> = {\n    'content-releases': 'cms-content-releases',\n    'review-workflows': 'review-workflows',\n    sso: 'sso',\n    auditLogs: 'audit-logs',\n    'auditLogs-purchase-page': 'audit-logs',\n  };\n\n  const filteredMenu = menu.filter(\n    (section) => !section.links.every((link) => link.isDisplayed === false)\n  );\n\n  const sections = filteredMenu.map((section) => {\n    return {\n      ...section,\n      title: section.intlLabel,\n      links: section.links.map((link) => {\n        return {\n          ...link,\n          id: link.id as LinkId,\n          title: link.intlLabel,\n          name: link.id,\n          to: link.to.startsWith('/') ? link.to : `/settings/${link.to}`,\n        };\n      }),\n    };\n  });\n\n  const label = formatMessage({\n    id: 'global.settings',\n    defaultMessage: 'Settings',\n  });\n\n  const handleClickOnLink = (destination: string) => () => {\n    trackUsage('willNavigate', { from: pathname, to: destination });\n  };\n\n  return (\n    <SubNav.Main aria-label={label}>\n      {!isFullPage && (\n        <>\n          <SubNav.Header label={label} />\n          <Divider />\n        </>\n      )}\n      <SubNav.Content>\n        {isFullPage && <SubNav.Header label={label} />}\n        <SubNav.Sections>\n          {sections.map((section) => (\n            <SubNav.Section key={section.id} label={formatMessage(section.intlLabel)}>\n              {section.links.map((link) => {\n                return (\n                  <SubNav.Link\n                    to={link.to}\n                    onClick={handleClickOnLink(link.to)}\n                    key={link.id}\n                    label={formatMessage(link.intlLabel)}\n                    endAction={\n                      <>\n                        {link?.licenseOnly && (\n                          <Lightning\n                            fill={\n                              (availableFeatureNames || []).includes(\n                                linksIdsToLicenseFeaturesNames[link.id]\n                              )\n                                ? 'primary600'\n                                : 'neutral300'\n                            }\n                            width=\"1.5rem\"\n                            height=\"1.5rem\"\n                          />\n                        )}\n                        {link?.hasNotification && (\n                          <StyledBadge\n                            aria-label=\"Notification\"\n                            backgroundColor=\"primary600\"\n                            textColor=\"neutral0\"\n                          >\n                            1\n                          </StyledBadge>\n                        )}\n                      </>\n                    }\n                  >\n                    {formatMessage(link.intlLabel)}\n                  </SubNav.Link>\n                );\n              })}\n            </SubNav.Section>\n          ))}\n        </SubNav.Sections>\n      </SubNav.Content>\n    </SubNav.Main>\n  );\n};\n\nexport { SettingsNav };\n", "import { Box } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { Navigate, Outlet, useMatch } from 'react-router-dom';\n\nimport { Layouts } from '../../components/Layouts/Layout';\nimport { Page } from '../../components/PageHelpers';\nimport { SubNav } from '../../components/SubNav';\nimport { RESPONSIVE_DEFAULT_SPACING } from '../../constants/theme';\nimport { BackButton } from '../../features/BackButton';\nimport { useIsMobile } from '../../hooks/useMediaQuery';\nimport { useSettingsMenu } from '../../hooks/useSettingsMenu';\n\nimport { SettingsNav } from './components/SettingsNav';\n\nconst Layout = () => {\n  /**\n   * This ensures we're capturing the settingId from the URL\n   * but also lets any nesting after that pass.\n   */\n  const match = useMatch('/settings/:settingId/*');\n  const { formatMessage } = useIntl();\n  const { isLoading } = useSettingsMenu();\n  const isMobile = useIsMobile();\n\n  // Since the useSettingsMenu hook can make API calls in order to check the links permissions\n  // We need to add a loading state to prevent redirecting the user while permissions are being checked\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  // On /settings base route\n  if (!match?.params.settingId) {\n    // On desktop: redirect to first settings page\n    if (!isMobile) {\n      return <Navigate to=\"application-infos\" />;\n    }\n\n    // On mobile: show navigation page\n    return (\n      <>\n        <Page.Title>\n          {formatMessage({\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          })}\n        </Page.Title>\n        <SubNav.PageWrapper>\n          <SettingsNav isFullPage />\n        </SubNav.PageWrapper>\n      </>\n    );\n  }\n\n  return (\n    <Layouts.Root sideNav={<SettingsNav />}>\n      <Page.Title>\n        {formatMessage({\n          id: 'global.settings',\n          defaultMessage: 'Settings',\n        })}\n      </Page.Title>\n      <Box\n        display={{ initial: 'block', medium: 'none' }}\n        paddingLeft={RESPONSIVE_DEFAULT_SPACING}\n        paddingRight={RESPONSIVE_DEFAULT_SPACING}\n        paddingTop={RESPONSIVE_DEFAULT_SPACING}\n      >\n        <BackButton fallback=\"/settings\" />\n      </Box>\n      <Outlet />\n    </Layouts.Root>\n  );\n};\n\nexport { Layout };\n"],
  "mappings": "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",
  "names": ["formatLinks", "menu", "map", "menuSection", "formattedLinks", "links", "link", "isDisplayed", "useSettingsMenu", "isLoading", "setData", "useState", "checkUserHasPermission", "useAuth", "state", "checkUserHasPermissions", "shouldUpdateStrapi", "useAppInfo", "settings", "useStrapiApp", "permissions", "useSelector", "selectAdminPermissions", "ceLinks", "useMemo", "SETTINGS_LINKS_CE", "admin", "adminLinks", "global", "globalLinks", "useEnterprise", "SETTINGS_LINKS_EE", "combine", "eeLinks", "defaultValue", "addPermissions", "useCallback", "id", "Error", "main", "React", "useEffect", "getData", "buildMenuPermissions", "sections", "Promise", "all", "reduce", "acc", "section", "sectionIndex", "linksWithPermissions", "linkIndex", "hasPermission", "length", "menuPermissions", "prev", "permission", "find", "Boolean", "otherSections", "sortBy", "hasNotification", "intlLabel", "defaultMessage", "Object", "values", "menuItem", "filter", "StyledBadge", "styled", "Badge", "theme", "spaces", "SettingsNav", "isFullPage", "menu", "useSettingsMenu", "formatMessage", "useIntl", "trackUsage", "useTracking", "pathname", "useLocation", "license", "useLicenseLimits", "availableFeatureNames", "features", "map", "feature", "name", "linksIdsToLicenseFeaturesNames", "sso", "auditLogs", "filteredMenu", "filter", "section", "links", "every", "link", "isDisplayed", "sections", "title", "intlLabel", "id", "to", "startsWith", "label", "defaultMessage", "handleClickOnLink", "destination", "from", "_jsxs", "SubNav", "Main", "aria-label", "_Fragment", "_jsx", "Header", "Divider", "Content", "Sections", "Section", "Link", "onClick", "endAction", "licenseOnly", "Lightning", "fill", "includes", "width", "height", "hasNotification", "backgroundColor", "textColor", "Layout", "match", "useMatch", "formatMessage", "useIntl", "isLoading", "useSettingsMenu", "isMobile", "useIsMobile", "_jsx", "Page", "Loading", "params", "settingId", "Navigate", "to", "_jsxs", "_Fragment", "Title", "id", "defaultMessage", "SubNav", "PageWrapper", "SettingsNav", "isFullPage", "Layouts", "Root", "sideNav", "Box", "display", "initial", "medium", "paddingLeft", "RESPONSIVE_DEFAULT_SPACING", "paddingRight", "paddingTop", "BackButton", "fallback", "Outlet"]
}
