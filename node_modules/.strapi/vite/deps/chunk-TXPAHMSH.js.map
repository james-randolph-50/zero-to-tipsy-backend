{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/useMediaQuery.ts", "../../../@strapi/admin/admin/src/components/GuidedTour/utils/constants.ts", "../../../@strapi/admin/admin/src/hooks/useAIAvailability.ts", "../../../@strapi/admin/admin/src/hooks/usePersistentState.ts", "../../../@strapi/admin/admin/src/components/GuidedTour/utils/migrations.ts", "../../../@strapi/admin/admin/src/components/GuidedTour/Context.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Steps/Step.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Steps/ApiTokensSteps.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Steps/ContentManagerSteps.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Steps/ContentTypeBuilderSteps.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Tours.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useTheme } from 'styled-components';\n\n/**\n * Hook to detect if a media query matches\n * @param query - Media query string (e.g., '(min-width: 768px)' or theme.breakpoints.large)\n * @returns boolean indicating if the media query matches\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const cleanQuery = query.replace('@media', '').trim();\n\n  const [matches, setMatches] = React.useState(() => window.matchMedia(cleanQuery).matches);\n\n  React.useEffect(() => {\n    const mediaQuery = window.matchMedia(cleanQuery);\n    const handler = (e: MediaQueryListEvent) => setMatches(e.matches);\n\n    mediaQuery.addEventListener('change', handler);\n\n    return () => mediaQuery.removeEventListener('change', handler);\n  }, [cleanQuery]);\n\n  return matches;\n};\n\n/**\n * Hook to detect if the current viewport is desktop size\n * Uses the theme's large breakpoint\n */\nexport const useIsDesktop = (): boolean => {\n  const theme = useTheme();\n  return useMediaQuery(theme.breakpoints.large);\n};\n\n/**\n * Hook to detect if the current viewport is tablet size\n * Uses the theme's medium breakpoint\n */\nexport const useIsTablet = (): boolean => {\n  const theme = useTheme();\n  const isTabletOrAbove = useMediaQuery(theme.breakpoints.medium);\n  const isDesktop = useMediaQuery(theme.breakpoints.large);\n  return isTabletOrAbove && !isDesktop;\n};\n\n/**\n * Hook to detect if the current viewport is mobile size\n * Uses the theme's medium breakpoint (inverted)\n */\nexport const useIsMobile = (): boolean => {\n  const theme = useTheme();\n  return !useMediaQuery(theme.breakpoints.medium);\n};\n", "const GUIDED_TOUR_REQUIRED_ACTIONS = {\n  contentTypeBuilder: {\n    createSchema: 'didCreateContentTypeSchema',\n    addField: 'didAddFieldToSchema',\n  },\n  contentManager: {\n    createContent: 'didCreateContent',\n  },\n  apiTokens: {\n    createToken: 'didCreateApiToken',\n    copyToken: 'didCopyApiToken',\n  },\n  strapiCloud: {},\n} as const;\n\nexport { GUIDED_TOUR_REQUIRED_ACTIONS };\n", "/**\n * @internal\n * @description Checks if the AI feature is enabled.\n */\nexport const useAIAvailability = (): boolean => {\n  const isAiEnabled = window.strapi.ai?.enabled !== false;\n  const isEE = window.strapi?.isEE;\n\n  return !!isEE && isAiEnabled;\n};\n", "import { useEffect, useState } from 'react';\n\nimport { useInitQuery } from '../services/admin';\n\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\n  const [value, setValue] = useState<T>(() => {\n    const stickyValue = window.localStorage.getItem(key);\n\n    if (stickyValue !== null) {\n      try {\n        return JSON.parse(stickyValue);\n      } catch {\n        // JSON.parse fails when the stored value is a primitive\n        return stickyValue;\n      }\n    }\n\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue] as const;\n};\n\n// Same as usePersistentState, but scoped to the current instance of Strapi\n// useful for storing state that should not be shared across different instances of Strapi running on localhost\nconst useScopedPersistentState = <T>(key: string, defaultValue: T) => {\n  const { data: initData } = useInitQuery();\n  const { uuid } = initData ?? {};\n\n  const namespacedKey = `${key}:${uuid}`;\n  return usePersistentState<T>(namespacedKey, defaultValue);\n};\n\nexport { usePersistentState, useScopedPersistentState };\n", "import { produce } from 'immer';\n\nimport { tours } from '../Tours';\n\nimport type { State, ValidTourName } from '../Context';\n\n/**\n * Migrates tours added or removed from the tours object\n */\nconst migrateTours = (storedTourState: State) => {\n  const storedTourNames = Object.keys(storedTourState.tours) as ValidTourName[];\n  const currentTourNames = Object.keys(tours) as ValidTourName[];\n\n  return produce(storedTourState, (draft) => {\n    // Add new tours that don't exist in stored state\n    currentTourNames.forEach((tourName) => {\n      if (!storedTourNames.includes(tourName)) {\n        draft.tours[tourName] = {\n          currentStep: 0,\n          isCompleted: false,\n          tourType: undefined,\n        };\n      }\n    });\n\n    // Remove tours that no longer exist in current tours\n    storedTourNames.forEach((tourName) => {\n      if (!currentTourNames.includes(tourName)) {\n        delete draft.tours[tourName];\n      }\n    });\n  });\n};\n\nexport { migrateTours };\n", "import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { useTracking } from '../../features/Tracking';\nimport { useIsDesktop } from '../../hooks/useMediaQuery';\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from './utils/constants';\nimport { migrateTours } from './utils/migrations';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\n/**\n * Derive the union of all string literal values from GUIDED_TOUR_REQUIRED_ACTIONS\n * (ie didCreateContentTypeSchema | didCreateContent etc...)\n */\ntype ValueOf<T> = T[keyof T];\ntype NonEmptyValueOf<T> = T extends Record<string, never> ? never : ValueOf<T>;\nexport type CompletedActions = NonEmptyValueOf<ValueOf<typeof GUIDED_TOUR_REQUIRED_ACTIONS>>[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'previous_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'go_to_step';\n      payload: {\n        tourName: ValidTourName;\n        step: number;\n      };\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_all_tours';\n    }\n  | {\n      type: 'reset_all_tours';\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: CompletedActions;\n    }\n  | {\n      type: 'remove_completed_action';\n      payload: ValueOf<CompletedActions>;\n    }\n  | {\n      type: 'set_tour_type';\n      payload: {\n        tourName: ValidTourName;\n        tourType: 'ContentTypeBuilderAI' | 'ContentTypeBuilderNoAI';\n      };\n    }\n  | {\n      type: 'set_hidden';\n      payload: boolean;\n    };\n\ntype TourState = Record<\n  ValidTourName,\n  { currentStep: number; isCompleted: boolean; tourType?: string }\n>;\ntype State = {\n  tours: TourState;\n  enabled: boolean;\n  hidden?: boolean;\n  completedActions: CompletedActions;\n};\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('GuidedTour');\n\nconst getInitialTourState = (tours: Tours) => {\n  return Object.keys(tours).reduce((acc, tourName) => {\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      isCompleted: false,\n      tourType: undefined,\n    };\n\n    return acc;\n  }, {} as TourState);\n};\n\nconst getCompletedTours = (tours: TourState): ValidTourName[] => {\n  return Object.keys(tours).filter(\n    (tourName) => tours[tourName as ValidTourName].isCompleted\n  ) as ValidTourName[];\n};\n\nconst areAllToursCompleted = (tours: TourState) => Object.values(tours).every((t) => t.isCompleted);\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n      const tourLength = guidedTours[action.payload]._meta.totalStepCount;\n\n      const nextStep = currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep >= tourLength;\n    }\n\n    if (action.type === 'previous_step') {\n      const currentStep = draft.tours[action.payload].currentStep;\n\n      if (currentStep <= 0) return;\n\n      const previousStep = currentStep - 1;\n      draft.tours[action.payload].currentStep = previousStep;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'remove_completed_action') {\n      draft.completedActions = draft.completedActions.filter(\n        (completedAction) => completedAction !== action.payload\n      );\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n\n    if (action.type === 'set_hidden') {\n      draft.hidden = action.payload;\n    }\n\n    if (action.type === 'reset_all_tours') {\n      draft.enabled = true;\n      draft.tours = getInitialTourState(guidedTours);\n      draft.completedActions = [];\n    }\n\n    if (action.type === 'go_to_step') {\n      draft.tours[action.payload.tourName].currentStep = action.payload.step;\n    }\n\n    if (action.type === 'set_tour_type') {\n      const { tourName, tourType } = action.payload;\n      const currentTour = draft.tours[tourName];\n\n      // If tour type changes and tour is not completed, reset to step 0\n      if (currentTour.tourType && currentTour.tourType !== tourType && !currentTour.isCompleted) {\n        currentTour.currentStep = 0;\n      }\n\n      currentTour.tourType = tourType;\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\nconst GuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const isDesktop = useIsDesktop();\n  const { trackUsage } = useTracking();\n  const [storedTours, setStoredTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: getInitialTourState(guidedTours),\n    enabled,\n    hidden: !isDesktop,\n    completedActions: [],\n  });\n  const migratedTourState = migrateTours(storedTours);\n  const [state, dispatch] = React.useReducer(reducer, migratedTourState);\n\n  // Watch for changes to enabled prop to update state\n  React.useEffect(() => {\n    dispatch({ type: 'set_hidden', payload: !isDesktop });\n  }, [isDesktop]);\n\n  // Sync local storage\n  React.useEffect(() => {\n    setStoredTours(state);\n  }, [state, setStoredTours]);\n\n  // Derive all completed tours from state\n  const currentAllCompletedState = areAllToursCompleted(state.tours);\n  // Store completed state in ref to survive a re-render,\n  // when current state changes this will persist and be used for comparison\n  const previousAllCompletedStateRef = React.useRef(currentAllCompletedState);\n  React.useEffect(() => {\n    const previousAllCompletedState = previousAllCompletedStateRef.current;\n    // When the previous state was not complete but the current state is now complete, fire the event\n    if (!previousAllCompletedState && currentAllCompletedState) {\n      trackUsage('didCompleteGuidedTour', { name: 'all' });\n    }\n\n    // When the current state has all tours completed so will the previous state, the tracking event won't fire again\n    previousAllCompletedStateRef.current = currentAllCompletedState;\n  }, [currentAllCompletedState, trackUsage]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { GuidedTourContext, useGuidedTour, reducer, getCompletedTours };\n", "import * as React from 'react';\n\nimport {\n  Popover,\n  Box,\n  Flex,\n  Button,\n  Typography,\n  LinkButton,\n  FlexProps,\n} from '@strapi/design-system';\nimport { FormattedMessage, useIntl, type MessageDescriptor } from 'react-intl';\nimport { To, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useTracking } from '../../../features/Tracking';\nimport { useGuidedTour, type ValidTourName } from '../Context';\nimport { tours } from '../Tours';\n\n/* -------------------------------------------------------------------------------------------------\n * Common Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst StepCount = ({\n  tourName,\n  displayedCurrentStep,\n  displayedTourLength,\n}: {\n  tourName: ValidTourName;\n  displayedCurrentStep?: number;\n  displayedTourLength?: number;\n}) => {\n  const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n  const currentStep = displayedCurrentStep ?? state.tours[tourName].currentStep + 1;\n  const displayedStepCount = displayedTourLength ?? tours[tourName]._meta.displayedStepCount;\n\n  return (\n    <Typography variant=\"omega\" fontSize=\"12px\">\n      <FormattedMessage\n        id=\"tours.stepCount\"\n        defaultMessage=\"Step {currentStep} of {tourLength}\"\n        values={{ currentStep, tourLength: displayedStepCount }}\n      />\n    </Typography>\n  );\n};\n\nconst GotItAction = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <Button onClick={onClick}>\n      <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\n    </Button>\n  );\n};\n\nexport type DefaultActionsProps = {\n  showSkip?: boolean;\n  showPrevious?: boolean;\n  to?: To;\n  onNextStep?: () => void;\n  onPreviousStep?: () => void;\n  tourName: ValidTourName;\n};\nconst DefaultActions = ({\n  showSkip,\n  showPrevious,\n  to,\n  tourName,\n  onNextStep,\n  onPreviousStep,\n}: DefaultActionsProps) => {\n  const { trackUsage } = useTracking();\n  const dispatch = useGuidedTour('GuidedTourPopover', (s) => s.dispatch);\n  const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n  const currentStep = state.tours[tourName].currentStep + 1;\n  const actualTourLength = tours[tourName]._meta.totalStepCount;\n\n  const handleSkip = () => {\n    trackUsage('didSkipGuidedTour', { name: tourName });\n    dispatch({ type: 'skip_tour', payload: tourName });\n  };\n\n  const handleNextStep = () => {\n    if (currentStep === actualTourLength) {\n      trackUsage('didCompleteGuidedTour', { name: tourName });\n    }\n\n    if (onNextStep) {\n      onNextStep();\n    } else {\n      dispatch({ type: 'next_step', payload: tourName });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (onPreviousStep) {\n      onPreviousStep();\n    } else {\n      dispatch({ type: 'previous_step', payload: tourName });\n    }\n  };\n\n  return (\n    <Flex gap={2}>\n      {showSkip && (\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          <FormattedMessage id=\"tours.skip\" defaultMessage=\"Skip\" />\n        </Button>\n      )}\n      {!showSkip && showPrevious && (\n        <Button variant=\"tertiary\" onClick={handlePreviousStep}>\n          <FormattedMessage id=\"tours.previous\" defaultMessage=\"Previous\" />\n        </Button>\n      )}\n      {to ? (\n        <LinkButton tag={NavLink} to={to} onClick={handleNextStep}>\n          <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n        </LinkButton>\n      ) : (\n        <Button onClick={handleNextStep}>\n          <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n        </Button>\n      )}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype WithChildren = {\n  children: React.ReactNode;\n  id?: never;\n  defaultMessage?: never;\n};\n\ntype WithIntl = {\n  children?: undefined;\n  id: MessageDescriptor['id'];\n  defaultMessage: MessageDescriptor['defaultMessage'];\n  withArrow?: boolean;\n};\n\ntype WithActionsChildren = {\n  children: React.ReactNode;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n  showPrevious?: boolean;\n};\n\ntype WithActionsProps = {\n  children?: undefined;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n  showPrevious?: boolean;\n};\n\ntype StepProps = WithChildren | WithIntl;\ntype ActionsProps = WithActionsChildren | WithActionsProps;\n\ntype Step = {\n  Root: React.ForwardRefExoticComponent<\n    React.ComponentProps<typeof Popover.Content> & { withArrow?: boolean }\n  >;\n  Title: (props: StepProps) => React.ReactNode;\n  Content: (\n    props: StepProps & {\n      values?: Record<string, React.ReactNode | ((chunks: React.ReactNode) => React.ReactNode)>;\n    }\n  ) => React.ReactNode;\n  Actions: (props: ActionsProps & { to?: string } & FlexProps) => React.ReactNode;\n};\n\nconst ActionsContainer = styled(Flex)`\n  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};\n`;\n\nconst ContentContainer = styled(Box)`\n  p {\n    margin-top: ${({ theme }) => theme.spaces[5]};\n  }\n  ul {\n    list-style-type: disc;\n    padding-left: ${({ theme }) => theme.spaces[4]};\n  }\n`;\n\n/**\n * TODO:\n * We should probably move all arrow styles + svg to the DS\n */\nconst PopoverArrow = styled(Popover.Arrow)`\n  fill: ${({ theme }) => theme.colors.neutral0};\n  transform: translateY(-16px) rotate(-90deg);\n`;\n\nconst createStepComponents = (tourName: ValidTourName): Step => ({\n  Root: React.forwardRef(({ withArrow = true, ...props }, ref) => {\n    return (\n      <Popover.Content\n        ref={ref}\n        aria-labelledby=\"guided-tour-title\"\n        side=\"top\"\n        align=\"center\"\n        style={{ border: 'none' }}\n        onClick={(e) => e.stopPropagation()}\n        {...props}\n      >\n        {withArrow && (\n          <PopoverArrow asChild>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"23\"\n              height=\"25\"\n              viewBox=\"0 0 23 25\"\n              fill=\"none\"\n            >\n              <path d=\"M11 24.5L1.82843 15.3284C0.266332 13.7663 0.26633 11.2337 1.82843 9.67157L11 0.5L23 12.5L11 24.5Z\" />\n            </svg>\n          </PopoverArrow>\n        )}\n        <Flex width=\"360px\" direction=\"column\" alignItems=\"start\">\n          {props.children}\n        </Flex>\n      </Popover.Content>\n    );\n  }),\n\n  Title: (props) => {\n    return (\n      <Box paddingTop={5} paddingLeft={5} paddingRight={5} paddingBottom={1} width=\"100%\">\n        {'children' in props ? (\n          props.children\n        ) : (\n          <Typography tag=\"h1\" id=\"guided-tour-title\" variant=\"omega\" fontWeight=\"bold\">\n            <FormattedMessage id={props.id} defaultMessage={props.defaultMessage} />\n          </Typography>\n        )}\n      </Box>\n    );\n  },\n\n  Content: (props) => {\n    const { formatMessage } = useIntl();\n    let content = '';\n    if (!('children' in props)) {\n      content = formatMessage({\n        id: props.id,\n        defaultMessage: props.defaultMessage,\n      });\n    }\n    return (\n      <Box paddingBottom={5} paddingLeft={5} paddingRight={5} width=\"100%\">\n        {'children' in props ? (\n          props.children\n        ) : (\n          <ContentContainer>\n            <Typography tag=\"div\" variant=\"omega\" dangerouslySetInnerHTML={{ __html: content }} />\n          </ContentContainer>\n        )}\n      </Box>\n    );\n  },\n\n  Actions: ({\n    showStepCount = true,\n    showPrevious = true,\n    showSkip = false,\n    to,\n    children,\n    ...flexProps\n  }) => {\n    return (\n      <ActionsContainer\n        width=\"100%\"\n        padding={3}\n        paddingLeft={5}\n        justifyContent={showStepCount ? 'space-between' : 'flex-end'}\n        {...flexProps}\n      >\n        {children ? (\n          children\n        ) : (\n          <>\n            {showStepCount && <StepCount tourName={tourName} />}\n            <DefaultActions\n              tourName={tourName}\n              showSkip={showSkip}\n              showPrevious={!showSkip && showPrevious}\n              to={to}\n            />\n          </>\n        )}\n      </ActionsContainer>\n    );\n  },\n});\n\nexport type { Step };\nexport { createStepComponents, GotItAction, StepCount, DefaultActions };\n", "import * as React from 'react';\n\nimport { Box, Link } from '@strapi/design-system';\n\nimport { type CompletedActions } from '../Context';\nimport { type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"top\" sideOffset={32} withArrow={false}>\n    <Step.Title\n      id=\"tours.apiTokens.Introduction.title\"\n      defaultMessage=\"Last but not least, API tokens\"\n    />\n    <Step.Content\n      id=\"tours.apiTokens.Introduction.content\"\n      defaultMessage=\"Control API access with highly customizable permissions.\"\n    />\n    <Step.Actions showSkip />\n  </Step.Root>\n);\n\nconst ManageAPIToken = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"end\">\n    <Step.Title id=\"tours.apiTokens.ManageAPIToken.title\" defaultMessage=\"Manage an API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.ManageAPIToken.content\"\n      defaultMessage='Click the \"Pencil\" icon to view and update an existing API token.'\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst ViewAPIToken = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"end\">\n    <Step.Title id=\"tours.apiTokens.ViewAPIToken.title\" defaultMessage=\"View API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.ViewAPIToken.content\"\n      defaultMessage='Click the \"View token\" button to see your API token.'\n    />\n    <Step.Actions>\n      <StepCount tourName=\"apiTokens\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst CopyAPIToken = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\" align=\"start\" sideOffset={-5}>\n    <Step.Title id=\"tours.apiTokens.CopyAPIToken.title\" defaultMessage=\"Copy your new API token\" />\n    <Step.Content\n      id=\"tours.apiTokens.CopyAPIToken.content\"\n      defaultMessage=\"Copy your API token\"\n      values={{\n        spacer: <Box paddingTop={2} />,\n        a: (msg: React.ReactNode) => (\n          <Link isExternal href=\"https://docs.strapi.io/cms/features/api-tokens#usage\">\n            {msg}\n          </Link>\n        ),\n      }}\n    />\n    <Step.Actions>\n      <StepCount tourName=\"apiTokens\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" align=\"start\">\n    <Step.Title\n      id=\"tours.apiTokens.FinalStep.title\"\n      defaultMessage=\"Congratulations, it's time to deploy your application!\"\n    />\n    <Step.Content\n      id=\"tours.apiTokens.FinalStep.content\"\n      defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\n    />\n    <Step.Actions showPrevious={false} showStepCount={false} to=\"/\" />\n  </Step.Root>\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\n\nexport const apiTokensSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  {\n    name: 'ManageAPIToken',\n    content: ManageAPIToken,\n  },\n  {\n    name: 'ViewAPIToken',\n    content: ViewAPIToken,\n  },\n  {\n    name: 'CopyAPIToken',\n    content: CopyAPIToken,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.apiTokens.copyToken),\n  },\n] as const;\n", "import { useParams } from 'react-router-dom';\n\nimport { CompletedActions, useGuidedTour } from '../Context';\nimport { tours, type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { DefaultActions, DefaultActionsProps, GotItAction, StepCount } from './Step';\n\nconst ContentManagerActions = ({\n  isActionRequired = false,\n  ...props\n}: Omit<DefaultActionsProps, 'tourName'> & {\n  isActionRequired?: boolean;\n}) => {\n  const { collectionType } = useParams();\n\n  const state = useGuidedTour('ContentManagerActions', (s) => s.state);\n  const dispatch = useGuidedTour('ContentManagerActions', (s) => s.dispatch);\n\n  const isSingleType = collectionType === 'single-types';\n\n  const currentStepOffset = state.tours.contentManager.currentStep + 1;\n  const displayedCurrentStep = (() => {\n    if (isSingleType && currentStepOffset > collectionTypeSpecificSteps.length) {\n      return currentStepOffset - collectionTypeSpecificSteps.length;\n    }\n\n    return currentStepOffset;\n  })();\n\n  // For single types we subtract all contentTypeSpecificSteps\n  const displayedTourLength = isSingleType\n    ? tours.contentManager._meta.displayedStepCount - collectionTypeSpecificSteps.length\n    : tours.contentManager._meta.displayedStepCount;\n\n  const handleNextStep = () => {\n    if (isSingleType && state.tours.contentManager.currentStep === 0) {\n      // The tours diverge after the first step, on next click skip all the collection type specific steps\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentManager', step: collectionTypeSpecificSteps.length + 1 },\n      });\n    } else {\n      dispatch({\n        type: 'next_step',\n        payload: 'contentManager',\n      });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (\n      isSingleType &&\n      // Check the currentStep is the step after the collection type specific steps\n      state.tours.contentManager.currentStep === collectionTypeSpecificSteps.length + 1\n    ) {\n      dispatch({\n        type: 'go_to_step',\n        payload: {\n          tourName: 'contentManager',\n          // Go to the step just before the collection type specific steps\n          step: state.tours.contentManager.currentStep - collectionTypeSpecificSteps.length - 1,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'previous_step',\n        payload: 'contentManager',\n      });\n    }\n  };\n\n  if (isActionRequired) {\n    return (\n      <>\n        <StepCount\n          tourName=\"contentManager\"\n          displayedCurrentStep={displayedCurrentStep}\n          displayedTourLength={displayedTourLength}\n        />\n        <GotItAction onClick={handleNextStep} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <StepCount\n        tourName=\"contentManager\"\n        displayedCurrentStep={displayedCurrentStep}\n        displayedTourLength={displayedTourLength}\n      />\n      <DefaultActions\n        tourName=\"contentManager\"\n        onNextStep={handleNextStep}\n        onPreviousStep={handlePreviousStep}\n        {...props}\n      />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => {\n  return (\n    <Step.Root side=\"top\" sideOffset={33} withArrow={false}>\n      <Step.Title id=\"tours.contentManager.Introduction.title\" defaultMessage=\"Content manager\" />\n      <Step.Content\n        id=\"tours.contentManager.Introduction.content\"\n        defaultMessage=\"Create and manage content from your collection types and single types.\"\n      />\n      <Step.Actions>\n        <ContentManagerActions showSkip />\n      </Step.Actions>\n    </Step.Root>\n  );\n};\n\nconst CreateNewEntry = ({ Step }: StepContentProps) => {\n  return (\n    <Step.Root side=\"bottom\" align=\"end\">\n      <Step.Title\n        id=\"tours.contentManager.CreateNewEntry.title\"\n        defaultMessage=\"Create new entry\"\n      />\n      <Step.Content\n        id=\"tours.contentManager.CreateNewEntry.content\"\n        defaultMessage='Click the \"Create new entry\" button to create and publish a new entry for this collection type.'\n      />\n      <Step.Actions>\n        <ContentManagerActions showPrevious />\n      </Step.Actions>\n    </Step.Root>\n  );\n};\n\nconst Fields = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={-12}>\n    <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\n    <Step.Content\n      id=\"tours.contentManager.Fields.content\"\n      defaultMessage=\"First, fill in the fields you created in the Content-Type Builder.\"\n    />\n    <Step.Actions>\n      <ContentManagerActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Publish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"left\" align=\"center\">\n    <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\n    <Step.Content\n      id=\"tours.contentManager.Publish.content\"\n      defaultMessage='Then click the \"Publish\" button to make your content available through the content API.'\n    />\n    <Step.Actions>\n      <ContentManagerActions isActionRequired />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title\n      id=\"tours.contentManager.FinalStep.title\"\n      defaultMessage=\"Time to setup API tokens!\"\n    />\n    <Step.Content\n      id=\"tours.contentManager.FinalStep.content\"\n      defaultMessage=\"Now that you've created and published an entry, let's setup an API token to manage access to your content.\"\n    />\n    <Step.Actions showStepCount={false} showPrevious={false} to=\"/settings/api-tokens\" />\n  </Step.Root>\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\nconst collectionTypeSpecificSteps = [\n  {\n    name: 'CreateNewEntry',\n    content: CreateNewEntry,\n  },\n];\n\nexport const contentManagerSteps = [\n  {\n    name: 'Introduction',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n    content: Introduction,\n  },\n  ...collectionTypeSpecificSteps,\n  {\n    name: 'Fields',\n    content: Fields,\n  },\n  {\n    name: 'Publish',\n    content: Publish,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentManager.createContent),\n  },\n] as const;\n", "import * as React from 'react';\n\nimport { UID } from '@strapi/types';\nimport { useParams } from 'react-router-dom';\n\nimport { useAIAvailability } from '../../../hooks/useAIAvailability';\nimport { useGetGuidedTourMetaQuery } from '../../../services/admin';\nimport { CompletedActions, useGuidedTour } from '../Context';\nimport { tours, type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount, DefaultActions, DefaultActionsProps } from './Step';\n\nconst ContentTypeBuilderActions = ({\n  ...props\n}: Omit<DefaultActionsProps, 'tourName'> & { children?: React.ReactNode }) => {\n  const state = useGuidedTour('ContentTypeBuilderActions', (s) => s.state);\n  const dispatch = useGuidedTour('ContentTypeBuilderActions', (s) => s.dispatch);\n\n  const isAIEnabled = useAIAvailability();\n\n  const currentStepOffset = state.tours.contentTypeBuilder.currentStep + 1;\n  const displayedCurrentStep = (() => {\n    if (!isAIEnabled && currentStepOffset > contentTypeBuilderStepsAI.length) {\n      // If AI is not enabled, we remove the AI steps\n      return currentStepOffset - contentTypeBuilderStepsAI.length;\n    } else if (isAIEnabled && currentStepOffset > contentTypeBuilderStepsNoAI.length) {\n      // If AI is enabled, we remove the non-AI steps\n      return currentStepOffset - contentTypeBuilderStepsNoAI.length;\n    }\n\n    return currentStepOffset;\n  })();\n\n  // When AI is enabled, we subtract the no AI steps and vice versa\n  const displayedTourLength = isAIEnabled\n    ? tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsNoAI.length\n    : tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsAI.length;\n\n  const handleNextStep = () => {\n    const currentStep = state.tours.contentTypeBuilder.currentStep;\n\n    if (!isAIEnabled && currentStep === 0) {\n      // If AI is disabled, after Introduction (step 0), skip AI steps and go to first NoAI step\n      const nextStep = 1 + contentTypeBuilderStepsAI.length; // Skip AI steps\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: nextStep },\n      });\n    } else if (isAIEnabled && currentStep === contentTypeBuilderStepsAI.length) {\n      // If AI is enabled, after AI steps, skip NoAI steps and go to Save/Finish\n      const nextStep = 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length;\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: nextStep },\n      });\n    } else {\n      // Normal step progression\n      dispatch({\n        type: 'next_step',\n        payload: 'contentTypeBuilder',\n      });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    const currentStep = state.tours.contentTypeBuilder.currentStep;\n\n    if (!isAIEnabled && currentStep === 1 + contentTypeBuilderStepsAI.length) {\n      // If AI is disabled and we're at the first NoAI step, go back to Introduction (step 0)\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: 0 },\n      });\n    } else if (\n      isAIEnabled &&\n      currentStep === 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length\n    ) {\n      // If AI is enabled and we're at Save/Finish, go back to last AI step\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: contentTypeBuilderStepsAI.length },\n      });\n    } else {\n      // Normal step progression\n      dispatch({\n        type: 'previous_step',\n        payload: 'contentTypeBuilder',\n      });\n    }\n  };\n\n  return (\n    <>\n      <StepCount\n        tourName=\"contentTypeBuilder\"\n        displayedCurrentStep={displayedCurrentStep}\n        displayedTourLength={displayedTourLength}\n      />\n      {props.children || (\n        <DefaultActions\n          tourName=\"contentTypeBuilder\"\n          onNextStep={handleNextStep}\n          onPreviousStep={handlePreviousStep}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={33} withArrow={false}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.Introduction.title\"\n      defaultMessage=\"Content-Type Builder\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Introduction.content\"\n      defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showSkip />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst AIChat = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"left\">\n    <Step.Title id=\"tours.contentTypeBuilder.AIChat.title\" defaultMessage=\"Time to get started!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AIChat.content\"\n      defaultMessage=\"<p>If you have any questions about the Content-Type Builder or Strapi ask them here.</p><p>Strapi AI can generate schemas tailored to your needs. Ask for exactly what you want, for example:<ul><li>Date picker</li><li>Email and password fields</li><li>Media of any type</li><li>UIDs</li></ul></p><p>Don’t be shy, try it out !</p>\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst CollectionTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n      defaultMessage=\"Collection Types\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n      defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst SingleTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.SingleTypes.title\" defaultMessage=\"Single Types\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.SingleTypes.content\"\n      defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Components = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Components.content\"\n      defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst YourTurn = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.YourTurn.title\" defaultMessage=\"Your turn\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.YourTurn.content\"\n      defaultMessage=\"Create a collection type or single type and configure it.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst AddFields = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\">\n    <Step.Title\n      id=\"tours.contentTypeBuilder.AddFields.title\"\n      defaultMessage=\"Don't forget to add a field to your content type\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AddFields.content\"\n      defaultMessage=\"Add the fields your content needs such as text, media and relations.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious>\n        <GotItAction\n          onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })}\n        />\n      </ContentTypeBuilderActions>\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Save = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title id=\"tours.contentTypeBuilder.Save.title\" defaultMessage=\"Save before you leave!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Save.content\"\n      defaultMessage=\"Save the changes you made here before leaving this page.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious>\n        <GotItAction\n          onClick={() => {\n            // Ensure the completed action is removed\n            // in the event the user already has a schema but is still doing the tour\n            dispatch({\n              type: 'remove_completed_action',\n              payload: GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema,\n            });\n            dispatch({ type: 'next_step', payload: 'contentTypeBuilder' });\n          }}\n        />\n      </ContentTypeBuilderActions>\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n  const { '*': routeParams } = useParams();\n  // Get the uid from the params\n  const uid = routeParams?.split('/').pop();\n  const contentType = uid ? guidedTourMeta?.data?.schemas?.[uid as UID.ContentType] : null;\n  const contentTypeKindDictionary = {\n    collectionType: 'collection-types',\n    singleType: 'single-types',\n  };\n\n  const to = contentType\n    ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}`\n    : '/content-manager';\n\n  return (\n    <Step.Root side=\"right\">\n      <Step.Title\n        id=\"tours.contentTypeBuilder.Finish.title\"\n        defaultMessage=\"First Step: Done! 🎉\"\n      />\n      <Step.Content\n        id=\"tours.contentTypeBuilder.Finish.content\"\n        defaultMessage=\"You've built your first content type! Now head over to the Content Manager to start adding entries!\"\n      />\n      <Step.Actions showStepCount={false} showPrevious={false} to={to} />\n    </Step.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\nconst contentTypeBuilderStepsAI = [\n  {\n    name: 'AIChat',\n    content: AIChat,\n  },\n];\n\nconst contentTypeBuilderStepsNoAI = [\n  {\n    name: 'CollectionTypes',\n    content: CollectionTypes,\n  },\n  {\n    name: 'SingleTypes',\n    content: SingleTypes,\n  },\n  {\n    name: 'Components',\n    content: Components,\n  },\n  {\n    name: 'YourTurn',\n    content: YourTurn,\n  },\n  {\n    name: 'AddFields',\n    content: AddFields,\n  },\n];\n\nexport const contentTypeBuilderSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  ...contentTypeBuilderStepsAI,\n  ...contentTypeBuilderStepsNoAI,\n  {\n    name: 'Save',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),\n    content: Save,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n  },\n] as const;\n", "import * as React from 'react';\n\nimport { Box, Popover, Portal } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\n\nimport { type State, type Action, useGuidedTour, ValidTourName, CompletedActions } from './Context';\nimport { apiTokensSteps } from './Steps/ApiTokensSteps';\nimport { contentManagerSteps } from './Steps/ContentManagerSteps';\nimport { contentTypeBuilderSteps } from './Steps/ContentTypeBuilderSteps';\nimport { type Step, createStepComponents } from './Steps/Step';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from './utils/constants';\n\n/* -------------------------------------------------------------------------------------------------\n * Tours\n * -----------------------------------------------------------------------------------------------*/\n\nconst tours = {\n  contentTypeBuilder: createTour('contentTypeBuilder', contentTypeBuilderSteps),\n  contentManager: createTour('contentManager', contentManagerSteps),\n  apiTokens: createTour('apiTokens', apiTokensSteps),\n  strapiCloud: createTour('strapiCloud', []),\n} as const;\n\ntype Tours = typeof tours;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourTooltip\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StepContentProps = {\n  Step: Step;\n  state: State;\n  dispatch: React.Dispatch<Action>;\n};\ntype Content = (props: StepContentProps) => React.ReactNode;\n\ntype GuidedTourTooltipProps = {\n  children: React.ReactNode;\n  content: Content;\n  tourName: ValidTourName;\n  step: number;\n  when?: (completedActions: CompletedActions) => boolean;\n};\n\nconst GuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\n  const state = useGuidedTour('TooltipWrapper', (s) => s.state);\n\n  if (!state.enabled || state.hidden) {\n    return children;\n  }\n\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\n};\n\nconst GuidedTourOverlay = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(50, 50, 77, 0.2);\n  z-index: 10;\n`;\n\nconst GuidedTourTooltipImpl = ({\n  children,\n  content,\n  tourName,\n  step,\n  when,\n}: GuidedTourTooltipProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n  const state = useGuidedTour('GuidedTourTooltip', (s) => s.state);\n  const dispatch = useGuidedTour('GuidedTourTooltip', (s) => s.dispatch);\n\n  const isCurrentStep = state.tours[tourName].currentStep === step;\n  const isStepConditionMet = when ? when(state.completedActions) : true;\n  const isPopoverOpen =\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\n    !state.tours[tourName].isCompleted &&\n    isCurrentStep &&\n    isStepConditionMet;\n\n  // Lock the scroll\n  React.useEffect(() => {\n    if (!isPopoverOpen) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, [isPopoverOpen]);\n\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\n\n  const hasApiSchema =\n    Object.keys(guidedTourMeta?.data?.schemas ?? {}).filter((key) => key.startsWith('api::'))\n      .length > 0;\n\n  React.useEffect(() => {\n    if (hasApiSchema) {\n      /**\n       * Fallback sync:\n       *\n       * When the user already has a schema (ie started project from template with seeded data),\n       * allow them to proceed to the content manager tour.\n       *\n       * When the CTB fails to restart after saving a schema (as it often does)\n       */\n      dispatch({\n        type: 'set_completed_actions',\n        payload: [GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema],\n      });\n    }\n  }, [dispatch, hasApiSchema, step, tourName]);\n\n  return (\n    <>\n      {isPopoverOpen && (\n        <Portal>\n          <GuidedTourOverlay />\n        </Portal>\n      )}\n      <Popover.Root open={isPopoverOpen}>\n        <Popover.Anchor>{children}</Popover.Anchor>\n        {content({ Step, state, dispatch })}\n      </Popover.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Tour factory\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TourStep<P extends string> = {\n  name: P;\n  content: Content;\n  when?: (completedActions: CompletedActions) => boolean;\n  excludeFromStepCount?: boolean;\n};\n\nexport function createTour<const T extends ReadonlyArray<TourStep<string>>>(\n  tourName: string,\n  steps: T\n) {\n  type Components = {\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\n  };\n\n  const tour = steps.reduce(\n    (acc, step, index) => {\n      const name = step.name as keyof Components;\n\n      if (name in acc) {\n        throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\n      }\n\n      (acc as Components)[name] = ({ children }: { children: React.ReactNode }) => {\n        return (\n          <GuidedTourTooltip\n            tourName={tourName as ValidTourName}\n            step={index}\n            content={step.content}\n            when={step.when}\n          >\n            {children}\n          </GuidedTourTooltip>\n        );\n      };\n\n      if (step.excludeFromStepCount) {\n        // Subtract all steps registered to be excluded from the step count\n        acc._meta.displayedStepCount--;\n      }\n\n      return acc;\n    },\n    { _meta: { totalStepCount: steps.length, displayedStepCount: steps.length } } as Components & {\n      _meta: { totalStepCount: number; displayedStepCount: number };\n    }\n  );\n\n  return tour;\n}\n\nexport type { Content, Tours };\nexport { tours };\n"],
  "mappings": "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",
  "names": ["useMediaQuery", "query", "cleanQuery", "replace", "trim", "matches", "setMatches", "useState", "window", "matchMedia", "React", "useEffect", "mediaQuery", "handler", "e", "addEventListener", "removeEventListener", "useIsDesktop", "theme", "useTheme", "breakpoints", "large", "useIsTablet", "isTabletOrAbove", "medium", "isDesktop", "useIsMobile", "GUIDED_TOUR_REQUIRED_ACTIONS", "contentTypeBuilder", "createSchema", "addField", "contentManager", "createContent", "apiTokens", "createToken", "copyToken", "strapiCloud", "useAIAvailability", "isAiEnabled", "window", "strapi", "ai", "enabled", "isEE", "usePersistentState", "key", "defaultValue", "value", "setValue", "useState", "stickyValue", "window", "localStorage", "getItem", "JSON", "parse", "useEffect", "setItem", "stringify", "useScopedPersistentState", "data", "initData", "useInitQuery", "uuid", "namespacedKey", "migrateTours", "storedTourState", "storedTourNames", "Object", "keys", "tours", "currentTourNames", "produce", "draft", "forEach", "tourName", "includes", "currentStep", "isCompleted", "tourType", "undefined", "GuidedTourProviderImpl", "useGuidedTour", "createContext", "getInitialTourState", "tours", "Object", "keys", "reduce", "acc", "tourName", "currentStep", "isCompleted", "tourType", "undefined", "getCompletedTours", "filter", "areAllToursCompleted", "values", "every", "t", "reducer", "state", "action", "produce", "draft", "type", "payload", "tourLength", "guidedTours", "_meta", "totalStepCount", "nextStep", "previousStep", "completedActions", "Set", "completedAction", "enabled", "hidden", "step", "currentTour", "STORAGE_KEY", "GuidedTourContext", "children", "isDesktop", "useIsDesktop", "trackUsage", "useTracking", "storedTours", "setStoredTours", "usePersistentState", "migratedTourState", "migrateTours", "dispatch", "useReducer", "React", "useEffect", "currentAllCompletedState", "previousAllCompletedStateRef", "useRef", "previousAllCompletedState", "current", "name", "_jsx", "StepCount", "tourName", "displayedCurrentStep", "displayedTourLength", "state", "useGuidedTour", "s", "currentStep", "tours", "displayedStepCount", "_meta", "_jsx", "Typography", "variant", "fontSize", "FormattedMessage", "id", "defaultMessage", "values", "tourLength", "GotItAction", "onClick", "Button", "DefaultActions", "showSkip", "showPrevious", "to", "onNextStep", "onPreviousStep", "trackUsage", "useTracking", "dispatch", "actualTourLength", "totalStepCount", "handleSkip", "name", "type", "payload", "handleNextStep", "handlePreviousStep", "_jsxs", "Flex", "gap", "LinkButton", "tag", "NavLink", "ActionsContainer", "styled", "theme", "colors", "neutral150", "ContentContainer", "Box", "spaces", "PopoverArrow", "Popover", "Arrow", "neutral0", "createStepComponents", "Root", "forwardRef", "withArrow", "props", "ref", "Content", "aria-labelledby", "side", "align", "style", "border", "e", "stopPropagation", "asChild", "svg", "xmlns", "width", "height", "viewBox", "fill", "path", "d", "direction", "alignItems", "children", "Title", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "fontWeight", "formatMessage", "useIntl", "content", "dangerouslySetInnerHTML", "__html", "Actions", "showStepCount", "flexProps", "padding", "justifyContent", "_Fragment", "Introduction", "Step", "_jsxs", "Root", "side", "sideOffset", "withArrow", "_jsx", "Title", "id", "defaultMessage", "Content", "Actions", "showSkip", "ManageAPIToken", "align", "ViewAPIToken", "dispatch", "StepCount", "tourName", "GotItAction", "onClick", "type", "payload", "CopyAPIToken", "values", "spacer", "Box", "paddingTop", "a", "msg", "Link", "isExternal", "href", "Finish", "showPrevious", "showStepCount", "to", "apiTokensSteps", "name", "content", "excludeFromStepCount", "when", "completedActions", "includes", "GUIDED_TOUR_REQUIRED_ACTIONS", "apiTokens", "copyToken", "ContentManagerActions", "isActionRequired", "props", "collectionType", "useParams", "state", "useGuidedTour", "s", "dispatch", "isSingleType", "currentStepOffset", "tours", "contentManager", "currentStep", "displayedCurrentStep", "collectionTypeSpecificSteps", "length", "displayedTourLength", "_meta", "displayedStepCount", "handleNextStep", "type", "payload", "tourName", "step", "handlePreviousStep", "_jsxs", "_Fragment", "_jsx", "StepCount", "GotItAction", "onClick", "DefaultActions", "onNextStep", "onPreviousStep", "Introduction", "Step", "Root", "side", "sideOffset", "withArrow", "Title", "id", "defaultMessage", "Content", "Actions", "showSkip", "CreateNewEntry", "align", "showPrevious", "Fields", "Publish", "Finish", "showStepCount", "to", "name", "content", "contentManagerSteps", "when", "completedActions", "includes", "GUIDED_TOUR_REQUIRED_ACTIONS", "contentTypeBuilder", "createSchema", "excludeFromStepCount", "createContent", "ContentTypeBuilderActions", "props", "state", "useGuidedTour", "s", "dispatch", "isAIEnabled", "useAIAvailability", "currentStepOffset", "tours", "contentTypeBuilder", "currentStep", "displayedCurrentStep", "contentTypeBuilderStepsAI", "length", "contentTypeBuilderStepsNoAI", "displayedTourLength", "_meta", "displayedStepCount", "handleNextStep", "nextStep", "type", "payload", "tourName", "step", "handlePreviousStep", "_jsxs", "_Fragment", "_jsx", "StepCount", "children", "DefaultActions", "onNextStep", "onPreviousStep", "Introduction", "Step", "Root", "sideOffset", "withArrow", "Title", "id", "defaultMessage", "Content", "Actions", "showSkip", "AIChat", "side", "showPrevious", "CollectionTypes", "SingleTypes", "Components", "YourTurn", "AddFields", "GotItAction", "onClick", "Save", "GUIDED_TOUR_REQUIRED_ACTIONS", "createSchema", "Finish", "data", "guidedTourMeta", "useGetGuidedTourMetaQuery", "routeParams", "useParams", "uid", "split", "pop", "contentType", "schemas", "contentTypeKindDictionary", "collectionType", "singleType", "to", "kind", "showStepCount", "name", "content", "contentTypeBuilderSteps", "when", "completedActions", "includes", "addField", "excludeFromStepCount", "tours", "contentTypeBuilder", "createTour", "contentTypeBuilderSteps", "contentManager", "contentManagerSteps", "apiTokens", "apiTokensSteps", "strapiCloud", "GuidedTourTooltip", "children", "props", "state", "useGuidedTour", "s", "enabled", "hidden", "_jsx", "GuidedTourTooltipImpl", "GuidedTourOverlay", "styled", "Box", "content", "tourName", "step", "when", "data", "guidedTourMeta", "useGetGuidedTourMetaQuery", "dispatch", "isCurrentStep", "currentStep", "isStepConditionMet", "completedActions", "isPopoverOpen", "isFirstSuperAdminUser", "isCompleted", "React", "useEffect", "originalStyle", "window", "getComputedStyle", "document", "body", "overflow", "style", "Step", "useMemo", "createStepComponents", "hasApiSchema", "Object", "keys", "schemas", "filter", "key", "startsWith", "length", "type", "payload", "GUIDED_TOUR_REQUIRED_ACTIONS", "createSchema", "_jsxs", "_Fragment", "Portal", "Popover", "Root", "open", "Anchor", "steps", "tour", "reduce", "acc", "index", "name", "Error", "excludeFromStepCount", "_meta", "displayedStepCount", "totalStepCount"]
}
