{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/hooks/useAIAvailability.ts", "../../../@strapi/admin/admin/src/components/NpsSurvey.tsx"],
  "sourcesContent": ["export const useAIAvailability = (): boolean => {\n  const isAiEnabled = window.strapi.ai?.enabled !== false;\n  const isEE = window.strapi?.isEE;\n  const isAiFeatureEnabled = window.strapi.features.isEnabled('cms-ai');\n\n  return !!isEE && isAiEnabled && isAiFeatureEnabled;\n};\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Button,\n  Typography,\n  Textarea,\n  Portal,\n  Field,\n  VisuallyHidden,\n  SingleSelect,\n  SingleSelectOption,\n} from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { useAppInfo } from '../features/AppInfo';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useIsMobile } from '../hooks/useMediaQuery';\nimport { usePersistentState } from '../hooks/usePersistentState';\n\nconst FieldWrapper = styled(Field.Root)`\n  height: 3.2rem;\n  width: 3.2rem;\n\n  > label,\n  ~ input {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  > label {\n    color: inherit;\n    cursor: pointer;\n    padding: ${({ theme }) => theme.spaces[2]};\n    text-align: center;\n    vertical-align: middle;\n  }\n\n  &:hover,\n  &:focus-within {\n    background-color: ${({ theme }) => theme.colors.neutral0};\n  }\n\n  &:active,\n  &.selected {\n    color: ${({ theme }) => theme.colors.primary700};\n    background-color: ${({ theme }) => theme.colors.neutral0};\n    border-color: ${({ theme }) => theme.colors.primary700};\n  }\n`;\n\nconst delays = {\n  postResponse: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  postFirstDismissal: 14 * 24 * 60 * 60 * 1000, // 14 days in ms\n  postSubsequentDismissal: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  display: 30 * 60 * 1000, // 30 minutes in ms\n};\n\nconst ratingArray = [...Array(11).keys()];\n\nconst checkIfShouldShowSurvey = (settings: NpsSurveySettings) => {\n  const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;\n\n  // This function goes through all the cases where we'd want to not show the survey:\n  // 1. If the survey is disabled by strapi, abort mission, don't bother checking the other settings.\n  // 2. If the survey is disabled by user, abort mission, don't bother checking the other settings.\n  // 3. If the user has already responded to the survey, check if enough time has passed since the last response.\n  // 4. If the user has dismissed the survey twice or more before, check if enough time has passed since the last dismissal.\n  // 5. If the user has only dismissed the survey once before, check if enough time has passed since the first dismissal.\n  // If none of these cases check out, then we show the survey.\n  // Note that submitting a response resets the dismissal counts.\n  // Checks 4 and 5 should not be reversed, since the first dismissal will also exist if the user has dismissed the survey twice or more before.\n\n  // For users who had created an account before the NPS feature was introduced,\n  // we assume that they would have enabled the NPS feature if they had the chance.\n\n  // Global strapi disable for NSP.\n  if (window.strapi.flags.nps === false) {\n    return false;\n  }\n\n  // User chose not to enable the NPS feature when signing up\n  if (enabled === false) {\n    return false;\n  }\n\n  // The user has already responded to the survey\n  if (lastResponseDate) {\n    const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();\n\n    if (timeSinceLastResponse >= delays.postResponse) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has dismissed the survey twice or more before\n  if (lastDismissalDate) {\n    const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();\n\n    if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has only dismissed the survey once before\n  if (firstDismissalDate) {\n    const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();\n\n    if (timeSinceFirstDismissal >= delays.postFirstDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has not interacted with the survey before\n  return true;\n};\n\nconst NpsSurvey = () => {\n  const isMobile = useIsMobile();\n  const { formatMessage } = useIntl();\n  const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();\n  const [isFeedbackResponse, setIsFeedbackResponse] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const currentEnvironment = useAppInfo('NpsSurvey', (state) => state.currentEnvironment);\n  const strapiVersion = useAppInfo('NpsSurvey', (state) => state.strapiVersion);\n\n  interface NpsSurveyMutationBody {\n    email: string;\n    rating: number | null;\n    comment: string;\n    environment?: string;\n    version?: string;\n    license: 'Enterprise' | 'Community';\n  }\n\n  // Only check on first render if the survey should be shown\n  const [surveyIsShown, setSurveyIsShown] = React.useState(\n    checkIfShouldShowSurvey(npsSurveySettings)\n  );\n\n  // Set a cooldown to show the survey when session begins\n  const [displaySurvey, setDisplaySurvey] = React.useState(false);\n\n  React.useEffect(() => {\n    const displayTime = setTimeout(() => {\n      setDisplaySurvey(true);\n    }, delays.display);\n\n    return () => {\n      clearTimeout(displayTime);\n    };\n  }, []);\n\n  const { user } = useAuth('NpsSurvey', (auth) => auth);\n\n  if (!displaySurvey) {\n    return null;\n  }\n\n  if (!surveyIsShown) {\n    return null;\n  }\n\n  const handleSubmitResponse = async ({\n    npsSurveyRating,\n    npsSurveyFeedback,\n  }: {\n    npsSurveyRating: NpsSurveyMutationBody['rating'];\n    npsSurveyFeedback: NpsSurveyMutationBody['comment'];\n  }) => {\n    try {\n      const body = {\n        email: typeof user === 'object' && user.email ? user.email : '',\n        rating: npsSurveyRating,\n        comment: npsSurveyFeedback,\n        environment: currentEnvironment,\n        version: strapiVersion ?? undefined,\n        license: window.strapi.projectType,\n        isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud',\n        aiLicenseKey: process.env.STRAPI_ADMIN_AI_LICENSE,\n      };\n      const res = await fetch(\n        `${process.env.STRAPI_ANALYTICS_URL || 'https://analytics.strapi.io'}/submit-nps`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n        }\n      );\n\n      if (!res.ok) {\n        throw new Error('Failed to submit NPS survey');\n      }\n\n      setNpsSurveySettings((settings) => ({\n        ...settings,\n        lastResponseDate: new Date().toString(),\n        firstDismissalDate: null,\n        lastDismissalDate: null,\n      }));\n      setIsFeedbackResponse(true);\n      // Thank you message displayed in the banner should disappear after few seconds.\n      setTimeout(() => {\n        setSurveyIsShown(false);\n      }, 3000);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDismiss = () => {\n    setNpsSurveySettings((settings) => {\n      const nextSettings = {\n        ...settings,\n        lastResponseDate: null,\n      };\n\n      if (settings.firstDismissalDate) {\n        // If the user dismisses the survey for the second time\n        nextSettings.lastDismissalDate = new Date().toString();\n      } else {\n        // If the user dismisses the survey for the first time\n        nextSettings.firstDismissalDate = new Date().toString();\n      }\n\n      return nextSettings;\n    });\n\n    setSurveyIsShown(false);\n  };\n\n  return (\n    <Portal>\n      <Formik\n        initialValues={{ npsSurveyFeedback: '', npsSurveyRating: null }}\n        onSubmit={handleSubmitResponse}\n        validationSchema={yup.object({\n          npsSurveyFeedback: yup.string(),\n          npsSurveyRating: yup.number().required(),\n        })}\n      >\n        {({ values, handleChange, setFieldValue, isSubmitting }) => (\n          <Form name=\"npsSurveyForm\">\n            <Box\n              padding={4}\n              position=\"fixed\"\n              bottom={0}\n              left=\"50%\"\n              transform=\"translateX(-50%)\"\n              zIndex=\"200\"\n              width=\"50%\"\n            >\n              <Flex\n                hasRadius\n                direction=\"column\"\n                padding={4}\n                borderColor=\"primary200\"\n                background=\"neutral0\"\n                shadow=\"popupShadow\"\n                wrap=\"wrap\"\n              >\n                {isFeedbackResponse ? (\n                  <Typography fontWeight=\"semiBold\">\n                    {formatMessage({\n                      id: 'app.components.NpsSurvey.feedback-response',\n                      defaultMessage: 'Thank you very much for your feedback!',\n                    })}\n                  </Typography>\n                ) : (\n                  <Box tag=\"fieldset\" width=\"100%\" borderWidth={0}>\n                    <Flex justifyContent=\"space-between\" width=\"100%\" gap={2}>\n                      <Box marginLeft=\"auto\" marginRight=\"auto\">\n                        <Typography fontWeight=\"semiBold\" tag=\"legend\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.banner-title',\n                            defaultMessage:\n                              'How likely are you to recommend Strapi to a friend or colleague?',\n                          })}\n                        </Typography>\n                      </Box>\n                      <IconButton\n                        onClick={handleDismiss}\n                        withTooltip={false}\n                        label={formatMessage({\n                          id: 'app.components.NpsSurvey.dismiss-survey-label',\n                          defaultMessage: 'Dismiss survey',\n                        })}\n                        type=\"button\"\n                      >\n                        <Cross />\n                      </IconButton>\n                    </Flex>\n                    {isMobile ? (\n                      <Box marginTop={2}>\n                        <SingleSelect\n                          placeholder={formatMessage({\n                            id: 'app.components.NpsSurvey.select-rating',\n                            defaultMessage: 'Select rating',\n                          })}\n                          onChange={(value) => {\n                            setFieldValue('npsSurveyRating', parseInt(value.toString(), 10));\n                          }}\n                          value={values.npsSurveyRating}\n                        >\n                          {ratingArray\n                            .sort((a, b) => b - a)\n                            .map((number) => {\n                              const suffixMessage =\n                                number === 0\n                                  ? formatMessage({\n                                      id: 'app.components.NpsSurvey.no-recommendation',\n                                      defaultMessage: 'Not at all likely',\n                                    })\n                                  : number === 10\n                                    ? formatMessage({\n                                        id: 'app.components.NpsSurvey.happy-to-recommend',\n                                        defaultMessage: 'Extremely likely',\n                                      })\n                                    : '';\n                              return (\n                                <SingleSelectOption key={number} value={number}>\n                                  {number} {suffixMessage && `(${suffixMessage})`}\n                                </SingleSelectOption>\n                              );\n                            })}\n                        </SingleSelect>\n                      </Box>\n                    ) : (\n                      <Flex gap={2} marginTop={2} marginBottom={2} justifyContent=\"center\">\n                        <Typography variant=\"pi\" textColor=\"neutral600\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.no-recommendation',\n                            defaultMessage: 'Not at all likely',\n                          })}\n                        </Typography>\n                        {ratingArray.map((number) => {\n                          return (\n                            <FieldWrapper\n                              key={number}\n                              name=\"npsSurveyRating\"\n                              className={values.npsSurveyRating === number ? 'selected' : undefined} // \"selected\" class added when child radio button is checked\n                              hasRadius\n                              background=\"primary100\"\n                              borderColor=\"primary200\"\n                              color=\"primary600\"\n                              position=\"relative\"\n                              cursor=\"pointer\"\n                            >\n                              <Field.Label>\n                                <VisuallyHidden>\n                                  <Field.Input\n                                    type=\"radio\"\n                                    checked={values.npsSurveyRating === number}\n                                    onChange={(e) =>\n                                      setFieldValue('npsSurveyRating', parseInt(e.target.value, 10))\n                                    }\n                                    value={number}\n                                  />\n                                </VisuallyHidden>\n                                {number}\n                              </Field.Label>\n                            </FieldWrapper>\n                          );\n                        })}\n                        <Typography variant=\"pi\" textColor=\"neutral600\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.happy-to-recommend',\n                            defaultMessage: 'Extremely likely',\n                          })}\n                        </Typography>\n                      </Flex>\n                    )}\n                    {values.npsSurveyRating !== null && (\n                      <Flex direction=\"column\" alignItems=\"stretch\">\n                        <Box marginTop={2}>\n                          <Field.Label fontWeight=\"semiBold\" fontSize={2}>\n                            {formatMessage({\n                              id: 'app.components.NpsSurvey.feedback-question',\n                              defaultMessage: 'Do you have any suggestion for improvements?',\n                            })}\n                          </Field.Label>\n                        </Box>\n                        <Box marginTop={3} marginBottom={4} width=\"100%\">\n                          <Textarea\n                            id=\"npsSurveyFeedback\" // formik element attribute \"id\" should be same as the values key to work\n                            width=\"100%\"\n                            onChange={handleChange}\n                            value={values.npsSurveyFeedback}\n                          />\n                        </Box>\n                        <Box>\n                          <Button marginBottom={2} type=\"submit\" loading={isSubmitting}>\n                            {formatMessage({\n                              id: 'app.components.NpsSurvey.submit-feedback',\n                              defaultMessage: 'Submit Feedback',\n                            })}\n                          </Button>\n                        </Box>\n                      </Flex>\n                    )}\n                  </Box>\n                )}\n              </Flex>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </Portal>\n  );\n};\n\ninterface NpsSurveySettings {\n  enabled: boolean;\n  lastResponseDate: string | null;\n  firstDismissalDate: string | null;\n  lastDismissalDate: string | null;\n}\n\n/**\n * We exported to make it available during admin user registration.\n * Because we only enable the NPS for users who subscribe to the newsletter when signing up\n */\nfunction useNpsSurveySettings() {\n  const [npsSurveySettings, setNpsSurveySettings] = usePersistentState<NpsSurveySettings>(\n    'STRAPI_NPS_SURVEY_SETTINGS',\n    {\n      enabled: true,\n      lastResponseDate: null,\n      firstDismissalDate: null,\n      lastDismissalDate: null,\n    }\n  );\n\n  /**\n   * TODO: should this just be an array so we can alias the `usePersistentState` hook?\n   */\n  return { npsSurveySettings, setNpsSurveySettings };\n}\n\nexport { NpsSurvey, useNpsSurveySettings };\n"],
  "mappings": "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",
  "names": ["useAIAvailability", "isAiEnabled", "window", "strapi", "ai", "enabled", "isEE", "isAiFeatureEnabled", "features", "isEnabled", "FieldWrapper", "styled", "Field", "Root", "theme", "spaces", "colors", "neutral0", "primary700", "delays", "postResponse", "postFirstDismissal", "postSubsequentDismissal", "display", "ratingArray", "Array", "keys", "checkIfShouldShowSurvey", "settings", "enabled", "lastResponseDate", "firstDismissalDate", "lastDismissalDate", "window", "strapi", "flags", "nps", "timeSinceLastResponse", "Date", "now", "getTime", "timeSinceLastDismissal", "timeSinceFirstDismissal", "NpsSurvey", "isMobile", "useIsMobile", "formatMessage", "useIntl", "npsSurveySettings", "setNpsSurveySettings", "useNpsSurveySettings", "isFeedbackResponse", "setIsFeedbackResponse", "useState", "toggleNotification", "useNotification", "currentEnvironment", "useAppInfo", "state", "strapiVersion", "surveyIsShown", "setSurveyIsShown", "displaySurvey", "setDisplaySurvey", "React", "useEffect", "displayTime", "setTimeout", "clearTimeout", "user", "useAuth", "auth", "handleSubmitResponse", "npsSurveyRating", "npsSurveyFeedback", "body", "email", "rating", "comment", "environment", "version", "undefined", "license", "projectType", "isHostedOnStrapiCloud", "process", "env", "STRAPI_HOSTING", "aiLicenseKey", "STRAPI_ADMIN_AI_LICENSE", "res", "fetch", "STRAPI_ANALYTICS_URL", "method", "headers", "JSON", "stringify", "ok", "Error", "toString", "err", "type", "message", "id", "defaultMessage", "handleDismiss", "nextSettings", "_jsx", "Portal", "Formik", "initialValues", "onSubmit", "validationSchema", "object", "string", "number", "required", "values", "handleChange", "setFieldValue", "isSubmitting", "Form", "name", "Box", "padding", "position", "bottom", "left", "transform", "zIndex", "width", "Flex", "hasRadius", "direction", "borderColor", "background", "shadow", "wrap", "Typography", "fontWeight", "_jsxs", "tag", "borderWidth", "justifyContent", "gap", "marginLeft", "marginRight", "IconButton", "onClick", "withTooltip", "label", "Cross", "marginTop", "SingleSelect", "placeholder", "onChange", "value", "parseInt", "sort", "a", "b", "map", "suffixMessage", "SingleSelectOption", "marginBottom", "variant", "textColor", "className", "color", "cursor", "Label", "VisuallyHidden", "Input", "checked", "e", "target", "alignItems", "fontSize", "Textarea", "Button", "loading", "usePersistentState"]
}
