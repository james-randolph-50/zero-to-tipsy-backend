import {
  useSettings
} from "./chunk-PL3RSFGJ.js";
import {
  AddAssetStep,
  AssetGridList,
  AudioPreview,
  Breadcrumbs,
  EditAssetContent,
  EditAssetDialog,
  EditFolderDialog,
  EmptyAssets,
  FilterList,
  FilterPopover,
  FolderCard,
  FolderCardBody,
  FolderCardBodyAction,
  FolderGridList,
  SelectTree,
  SortPicker,
  TableList,
  UploadAssetDialog,
  VideoPreview,
  containsAssetFilter,
  displayedFilters,
  formatBytes,
  formatDuration,
  getFileExtension,
  getFolderURL,
  normalizeAPIError,
  prefixFileUrlWithBackendUrl,
  typeFromMime,
  useAssets,
  useBulkRemove,
  useFolder,
  useFolderCard,
  useFolderStructure,
  useFolders,
  useMediaLibraryPermissions,
  usePersistentState,
  useRemoveAsset,
  useSelectionState,
  useUpload
} from "./chunk-VHGOCFK6.js";
import {
  useConfig
} from "./chunk-ECM6XMDM.js";
import {
  AssetType,
  getTrad,
  localStorageKeys,
  pluginId,
  viewOptions
} from "./chunk-NZGZBCX6.js";
import "./chunk-JLC4R6HH.js";
import {
  useMutation,
  useQueryClient
} from "./chunk-LRJSHZU2.js";
import "./chunk-EVNWODU4.js";
import "./chunk-AJLTGHEL.js";
import "./chunk-MEZBJHWR.js";
import {
  useAIAvailability
} from "./chunk-KQGKVKXX.js";
import "./chunk-SDKXNOYE.js";
import "./chunk-MAZWOSDA.js";
import "./chunk-TXPAHMSH.js";
import "./chunk-SZZ65EPC.js";
import "./chunk-H2FYTGHH.js";
import "./chunk-QIJGNK42.js";
import "./chunk-WNQHXME7.js";
import "./chunk-PGK4XCH7.js";
import "./chunk-D7NHUHOJ.js";
import "./chunk-KDQSYRL5.js";
import {
  Pagination
} from "./chunk-G3AK5ZM5.js";
import "./chunk-DJMMTKKX.js";
import "./chunk-CWMSSULX.js";
import "./chunk-TGM2QIIU.js";
import "./chunk-4PWW3XY5.js";
import "./chunk-YT4NQHAJ.js";
import "./chunk-ECMPQB6G.js";
import "./chunk-7A3IGISS.js";
import {
  useFetchClient
} from "./chunk-2GTVOV37.js";
import {
  SearchInput
} from "./chunk-ADT2LCIE.js";
import {
  ConfirmDialog
} from "./chunk-XQRU5NAP.js";
import "./chunk-KRZA4VUN.js";
import "./chunk-OQJ4NR7G.js";
import "./chunk-HRGZFPOS.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import {
  require_isEmpty
} from "./chunk-RHGSFS4X.js";
import "./chunk-4HRP3RAA.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-GRQHUTN5.js";
import {
  Form,
  Formik
} from "./chunk-HDJGZCH6.js";
import "./chunk-Z7D3YUXH.js";
import "./chunk-Y7PW7LOS.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-XFEN4BQ3.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-MQ5W6ZZ2.js";
import {
  Layouts
} from "./chunk-3VVEWNIU.js";
import {
  useTracking
} from "./chunk-CHBEAGYH.js";
import "./chunk-6RQQFGOL.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import "./chunk-FPU5PDM4.js";
import {
  ForwardRef$l,
  Page
} from "./chunk-W7EWQXCF.js";
import {
  useQueryParams
} from "./chunk-L5KTHKOW.js";
import "./chunk-4V4TECMW.js";
import {
  useNotification
} from "./chunk-CNQTL426.js";
import "./chunk-PWWLPW7X.js";
import {
  require_lib
} from "./chunk-O2YIDDWC.js";
import "./chunk-JMFYRDVQ.js";
import "./chunk-V3H6CYGR.js";
import {
  createContext
} from "./chunk-ZC6UOKQ5.js";
import "./chunk-HM5YIFDI.js";
import {
  fn
} from "./chunk-QOUV5O5E.js";
import {
  Alert,
  Box,
  Button,
  Card,
  CardActionImpl,
  CardAsset,
  CardBadge,
  CardBody,
  CardContent,
  CardHeader,
  CardSubtitle,
  CardTimer,
  CardTitle,
  CheckboxImpl,
  Dialog,
  Divider,
  Field,
  Flex,
  Grid,
  IconButton,
  Link as Link2,
  Loader,
  Modal,
  Popover,
  TextInput,
  Typography,
  VisuallyHidden,
  useIntl
} from "./chunk-WNDVG6TF.js";
import "./chunk-7K6WC7UG.js";
import {
  Link,
  NavLink,
  Route,
  Routes,
  useLocation,
  useNavigate
} from "./chunk-RKN75MQZ.js";
import "./chunk-AWHRF5BE.js";
import {
  ForwardRef$1C,
  ForwardRef$1H,
  ForwardRef$1I,
  ForwardRef$1e,
  ForwardRef$2J,
  ForwardRef$2a,
  ForwardRef$G,
  ForwardRef$N,
  ForwardRef$b,
  ForwardRef$o
} from "./chunk-EXVE46AP.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-3LBZKDTB.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/upload/dist/admin/pages/App/App.mjs
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var React6 = __toESM(require_react(), 1);
var import_qs11 = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/MediaLibrary.mjs
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var React5 = __toESM(require_react(), 1);
var import_qs10 = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/ai/components/AIUploadModal.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);

// node_modules/@strapi/upload/dist/admin/hooks/useBulkEdit.mjs
var import_qs = __toESM(require_lib(), 1);
var useBulkEdit = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const queryClient = useQueryClient();
  const { post } = useFetchClient();
  const bulkEditQuery = ({ updates }) => {
    return post("/upload/actions/bulk-update", {
      updates
    });
  };
  const mutation = useMutation(bulkEditQuery, {
    onSuccess(res) {
      const { data } = res;
      if (data && data.length > 0) {
        queryClient.refetchQueries([
          pluginId,
          "assets"
        ], {
          active: true
        });
        queryClient.refetchQueries([
          pluginId,
          "asset-count"
        ], {
          active: true
        });
        queryClient.refetchQueries([
          pluginId,
          "folders"
        ], {
          active: true
        });
      }
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("modal.edit.success-label"),
          defaultMessage: "Files have been successfully updated."
        })
      });
    }
  });
  const edit = (updates) => mutation.mutateAsync({
    updates
  });
  return {
    ...mutation,
    edit
  };
};

// node_modules/@strapi/upload/dist/admin/ai/components/AIUploadModal.mjs
var import_qs3 = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/ai/components/AIAssetCard.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var CardActionsContainer = dt(CardActionImpl)`
  opacity: 0;
  z-index: 1;

  &:focus-within {
    opacity: 1;
  }
`;
var CardContainer = dt(Box)`
  background: ${({ theme }) => theme.colors.neutral0};
  border: 1px solid ${({ theme }) => theme.colors.neutral150};
  border-radius: ${({ theme }) => theme.borderRadius};

  &:hover {
    ${CardActionsContainer} {
      opacity: 1;
    }
  }
`;
var AssetCardActions = ({ asset }) => {
  const { formatMessage } = useIntl();
  const dispatch = useAIUploadModalContext("AssetCardActions", (s) => s.dispatch);
  const state = useAIUploadModalContext("AssetCardActions", (s) => s.state);
  const onClose = useAIUploadModalContext("AssetCardActions", (s) => s.onClose);
  const { canUpdate, canCopyLink, canDownload } = useMediaLibraryPermissions();
  const [isEditModalOpen, setIsEditModalOpen] = React.useState(false);
  const { removeAsset } = useRemoveAsset(() => {
  });
  const handleConfirmRemove = async (event) => {
    event == null ? void 0 : event.preventDefault();
    await removeAsset(asset.id);
    dispatch({
      type: "remove_uploaded_asset",
      payload: {
        id: asset.id
      }
    });
    if (state.uploadedAssets.length === 1) {
      onClose();
    }
  };
  const handlePropagationClick = (event) => {
    event.stopPropagation();
  };
  const handleEditAsset = (editedAsset) => {
    if (editedAsset) {
      dispatch({
        type: "edit_uploaded_asset",
        payload: {
          editedAsset
        }
      });
      setIsEditModalOpen(false);
    }
  };
  return (0, import_jsx_runtime.jsxs)(CardActionsContainer, {
    onClick: handlePropagationClick,
    position: "end",
    children: [
      (0, import_jsx_runtime.jsxs)(Dialog.Root, {
        children: [
          (0, import_jsx_runtime.jsx)(Dialog.Trigger, {
            children: (0, import_jsx_runtime.jsx)(IconButton, {
              label: formatMessage({
                id: getTrad("control-card.remove-selection"),
                defaultMessage: "Remove from selection"
              }),
              children: (0, import_jsx_runtime.jsx)(ForwardRef$b, {})
            })
          }),
          (0, import_jsx_runtime.jsx)(ConfirmDialog, {
            onConfirm: handleConfirmRemove
          })
        ]
      }),
      (0, import_jsx_runtime.jsxs)(Modal.Root, {
        open: isEditModalOpen,
        onOpenChange: setIsEditModalOpen,
        children: [
          (0, import_jsx_runtime.jsx)(Modal.Trigger, {
            children: (0, import_jsx_runtime.jsx)(IconButton, {
              label: formatMessage({
                id: getTrad("control-card.edit"),
                defaultMessage: "Edit"
              }),
              children: (0, import_jsx_runtime.jsx)(ForwardRef$N, {})
            })
          }),
          (0, import_jsx_runtime.jsx)(Modal.Content, {
            children: (0, import_jsx_runtime.jsx)(EditAssetContent, {
              // Is Local must be set to false to trigger the correct branch of logic in the EditAssetContent on submit
              asset: {
                ...asset,
                isLocal: false,
                folder: typeof asset.folder === "number" ? {
                  id: asset.folder
                } : asset.folder
              },
              onClose: (arg) => handleEditAsset(arg),
              canUpdate,
              canCopyLink,
              canDownload,
              omitFields: [
                "caption",
                "alternativeText"
              ],
              omitActions: [
                "replace"
              ]
            })
          })
        ]
      })
    ]
  });
};
var Extension = dt.span`
  text-transform: uppercase;
`;
var VideoPreviewWrapper = dt(Box)`
  position: relative;
  height: 100%;
  overflow: hidden;

  canvas,
  video {
    display: block;
    pointer-events: none;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: ${({ theme }) => theme.borderRadius};
  }
`;
var VideoTimerOverlay = dt(CardTimer)`
  position: absolute;
  bottom: 0.5rem;
  right: 0.5rem;
`;
var AudioPreviewWrapper = dt(Box)`
  height: 100%;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;

  canvas,
  audio {
    display: block;
    max-width: 100%;
    max-height: 100%;
  }
`;
var Asset = ({ assetType, thumbnailUrl, assetUrl, asset }) => {
  const [duration, setDuration] = React.useState();
  const formattedDuration = duration ? formatDuration(duration) : void 0;
  switch (assetType) {
    case AssetType.Image:
      return (0, import_jsx_runtime.jsx)(CardAsset, {
        src: thumbnailUrl,
        size: "S",
        alt: asset.alternativeText || asset.name
      });
    case AssetType.Video:
      return (0, import_jsx_runtime.jsx)(CardAsset, {
        size: "S",
        children: (0, import_jsx_runtime.jsxs)(VideoPreviewWrapper, {
          children: [
            (0, import_jsx_runtime.jsx)(VideoPreview, {
              url: assetUrl,
              mime: asset.mime || "video/mp4",
              onLoadDuration: setDuration,
              alt: asset.alternativeText || asset.name
            }),
            formattedDuration && (0, import_jsx_runtime.jsx)(VideoTimerOverlay, {
              children: formattedDuration
            })
          ]
        })
      });
    case AssetType.Audio:
      return (0, import_jsx_runtime.jsx)(CardAsset, {
        size: "S",
        children: (0, import_jsx_runtime.jsx)(AudioPreviewWrapper, {
          children: (0, import_jsx_runtime.jsx)(AudioPreview, {
            url: assetUrl,
            alt: asset.alternativeText || asset.name
          })
        })
      });
    default:
      return (0, import_jsx_runtime.jsx)(CardAsset, {
        src: thumbnailUrl,
        size: "S",
        alt: asset.alternativeText || asset.name
      });
  }
};
var StyledCardBody = dt(CardBody)`
  display: flex;
  padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[1]};
`;
var StyledCard = dt(Card)`
  width: 100%;
  height: 100%;
  border: none;
  box-shadow: none;
  border-radius: 0;
  padding: 0;
`;
var getAssetBadgeLabel = (assetType) => {
  switch (assetType) {
    case AssetType.Image:
      return {
        id: getTrad("settings.section.image.label"),
        defaultMessage: "IMAGE"
      };
    case AssetType.Video:
      return {
        id: getTrad("settings.section.video.label"),
        defaultMessage: "VIDEO"
      };
    case AssetType.Audio:
      return {
        id: getTrad("settings.section.audio.label"),
        defaultMessage: "AUDIO"
      };
    default:
      return {
        id: getTrad("settings.section.doc.label"),
        defaultMessage: "DOC"
      };
  }
};
var AIAssetCard = ({ asset, onCaptionChange, onAltTextChange, wasAltTextChanged, wasCaptionChanged }) => {
  var _a, _b;
  const { formatMessage } = useIntl();
  const assetType = typeFromMime(asset.mime || "");
  const thumbnailUrl = prefixFileUrlWithBackendUrl(((_b = (_a = asset == null ? void 0 : asset.formats) == null ? void 0 : _a.thumbnail) == null ? void 0 : _b.url) || asset.url) || "";
  const assetUrl = prefixFileUrlWithBackendUrl(asset.url) || "";
  const subtitle = asset.height && asset.width ? ` - ${asset.width}x${asset.height}` : "";
  const formattedSize = asset.size ? formatBytes(asset.size) : "";
  const fullSubtitle = `${subtitle}${subtitle && formattedSize ? " - " : ""}${formattedSize}`;
  const [caption, setCaption] = React.useState(asset.caption || "");
  React.useEffect(() => {
    onCaptionChange(caption);
  }, [
    caption,
    onCaptionChange
  ]);
  const [altText, setAltText] = React.useState(asset.alternativeText || "");
  React.useEffect(() => {
    onAltTextChange(altText);
  }, [
    altText,
    onAltTextChange
  ]);
  return (0, import_jsx_runtime.jsx)(CardContainer, {
    children: (0, import_jsx_runtime.jsxs)(Grid.Root, {
      children: [
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          col: 5,
          alignItems: "stretch",
          children: (0, import_jsx_runtime.jsxs)(StyledCard, {
            width: "100%",
            height: "100%",
            shadow: "none",
            borderRadius: 0,
            padding: 0,
            children: [
              (0, import_jsx_runtime.jsxs)(CardHeader, {
                style: {
                  borderStyle: "none"
                },
                children: [
                  (0, import_jsx_runtime.jsx)(AssetCardActions, {
                    asset
                  }),
                  (0, import_jsx_runtime.jsx)(Asset, {
                    assetType,
                    thumbnailUrl,
                    assetUrl,
                    asset
                  })
                ]
              }),
              (0, import_jsx_runtime.jsx)(StyledCardBody, {
                children: (0, import_jsx_runtime.jsxs)(CardContent, {
                  width: "100%",
                  children: [
                    (0, import_jsx_runtime.jsxs)(Flex, {
                      justifyContent: "space-between",
                      alignItems: "start",
                      children: [
                        (0, import_jsx_runtime.jsx)(Typography, {
                          tag: "h2",
                          children: (0, import_jsx_runtime.jsx)(CardTitle, {
                            tag: "span",
                            children: asset.name
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(CardBadge, {
                          children: formatMessage(getAssetBadgeLabel(assetType))
                        })
                      ]
                    }),
                    (0, import_jsx_runtime.jsx)(Flex, {
                      children: (0, import_jsx_runtime.jsxs)(CardSubtitle, {
                        children: [
                          (0, import_jsx_runtime.jsx)(Extension, {
                            children: getFileExtension(asset.ext)
                          }),
                          fullSubtitle
                        ]
                      })
                    })
                  ]
                })
              })
            ]
          })
        }),
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          col: 7,
          flex: 1,
          children: (0, import_jsx_runtime.jsxs)(Flex, {
            direction: "column",
            height: "100%",
            alignItems: "stretch",
            flex: 1,
            padding: 4,
            gap: 2,
            children: [
              (0, import_jsx_runtime.jsxs)(Field.Root, {
                name: "caption",
                children: [
                  (0, import_jsx_runtime.jsx)(Flex, {
                    alignItems: "center",
                    gap: 2,
                    children: (0, import_jsx_runtime.jsx)(Field.Label, {
                      children: formatMessage({
                        id: getTrad("form.input.label.file-caption"),
                        defaultMessage: "Caption"
                      })
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(TextInput, {
                    value: caption,
                    onChange: (e) => setCaption(e.target.value),
                    placeholder: formatMessage({
                      id: getTrad("form.input.placeholder.file-caption"),
                      defaultMessage: "Enter caption"
                    }),
                    endAction: !wasCaptionChanged && asset.caption && (0, import_jsx_runtime.jsx)(ForwardRef$o, {
                      width: "16px",
                      height: "16px",
                      fill: "#AC73E6"
                    })
                  })
                ]
              }),
              (0, import_jsx_runtime.jsxs)(Field.Root, {
                name: "alternativeText",
                hint: formatMessage({
                  id: getTrad("form.input.description.file-alt"),
                  defaultMessage: "This text will be displayed if the asset can't be shown."
                }),
                children: [
                  (0, import_jsx_runtime.jsx)(Flex, {
                    alignItems: "center",
                    gap: 2,
                    children: (0, import_jsx_runtime.jsx)(Field.Label, {
                      children: formatMessage({
                        id: getTrad("form.input.label.file-alt"),
                        defaultMessage: "Alternative text"
                      })
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(TextInput, {
                    value: altText,
                    onChange: (e) => setAltText(e.target.value),
                    placeholder: formatMessage({
                      id: getTrad("form.input.placeholder.file-alt"),
                      defaultMessage: "Enter alternative text"
                    }),
                    endAction: !wasAltTextChanged && asset.alternativeText && (0, import_jsx_runtime.jsx)(ForwardRef$o, {
                      width: "16px",
                      height: "16px",
                      fill: "#AC73E6"
                    })
                  }),
                  (0, import_jsx_runtime.jsx)(Field.Hint, {})
                ]
              })
            ]
          })
        })
      ]
    })
  });
};
var SkeletonBox = dt(Box)`
  background: linear-gradient(
    90deg,
    ${({ theme }) => theme.colors.neutral100} 25%,
    ${({ theme }) => theme.colors.neutral150} 50%,
    ${({ theme }) => theme.colors.neutral100} 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: ${({ theme }) => theme.borderRadius};
  width: ${({ width }) => width || "100%"};
  height: ${({ height }) => height || "1rem"};

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
`;
var AIAssetCardSkeletons = ({ count = 1 }) => {
  const skeletons = Array.from({
    length: count
  }, (_, i) => i);
  return skeletons.map((index) => (0, import_jsx_runtime.jsx)(Box, {
    background: "neutral0",
    borderColor: "neutral150",
    borderStyle: "solid",
    borderWidth: "1px",
    borderRadius: "4px",
    marginBottom: 4,
    children: (0, import_jsx_runtime.jsxs)(Grid.Root, {
      children: [
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          col: 5,
          alignItems: "stretch",
          children: (0, import_jsx_runtime.jsxs)(Card, {
            height: "100%",
            width: "100%",
            borderStyle: "none",
            shadow: "none",
            borderRadius: 0,
            padding: 2,
            children: [
              (0, import_jsx_runtime.jsx)(Box, {
                height: "150px",
                padding: 2,
                children: (0, import_jsx_runtime.jsx)(SkeletonBox, {
                  height: "100%"
                })
              }),
              (0, import_jsx_runtime.jsx)(CardBody, {
                style: {
                  display: "flex",
                  padding: "8px 4px"
                },
                children: (0, import_jsx_runtime.jsxs)(CardContent, {
                  width: "100%",
                  children: [
                    (0, import_jsx_runtime.jsxs)(Flex, {
                      justifyContent: "space-between",
                      alignItems: "start",
                      marginBottom: 1,
                      children: [
                        (0, import_jsx_runtime.jsx)(SkeletonBox, {
                          width: "60%",
                          height: "18px"
                        }),
                        (0, import_jsx_runtime.jsx)(SkeletonBox, {
                          width: "40px",
                          height: "16px"
                        })
                      ]
                    }),
                    (0, import_jsx_runtime.jsx)(SkeletonBox, {
                      width: "80%",
                      height: "14px"
                    })
                  ]
                })
              })
            ]
          })
        }),
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          col: 7,
          flex: 1,
          children: (0, import_jsx_runtime.jsxs)(Flex, {
            direction: "column",
            height: "100%",
            alignItems: "stretch",
            flex: 1,
            padding: 4,
            gap: 2,
            children: [
              (0, import_jsx_runtime.jsxs)(Box, {
                children: [
                  (0, import_jsx_runtime.jsx)(SkeletonBox, {
                    width: "60px",
                    height: "16px",
                    marginBottom: 1
                  }),
                  (0, import_jsx_runtime.jsx)(SkeletonBox, {
                    height: "32px"
                  })
                ]
              }),
              (0, import_jsx_runtime.jsxs)(Box, {
                children: [
                  (0, import_jsx_runtime.jsx)(SkeletonBox, {
                    width: "100px",
                    height: "16px",
                    marginBottom: 1
                  }),
                  (0, import_jsx_runtime.jsx)(SkeletonBox, {
                    height: "32px"
                  }),
                  (0, import_jsx_runtime.jsx)(Box, {
                    marginTop: 1,
                    children: (0, import_jsx_runtime.jsx)(SkeletonBox, {
                      width: "70%",
                      height: "12px"
                    })
                  })
                ]
              })
            ]
          })
        })
      ]
    })
  }, index));
};

// node_modules/@strapi/upload/dist/admin/ai/components/AIUploadModal.mjs
var StyledModalBody = dt(Modal.Body)`
  padding: 0;
  display: flex;
  justify-content: center;

  [data-radix-scroll-area-viewport] {
    padding-top: ${({ theme }) => theme.spaces[6]};
    padding-bottom: ${({ theme }) => theme.spaces[6]};
    padding-left: ${({ theme }) => theme.spaces[7]};
    padding-right: ${({ theme }) => theme.spaces[7]};
  }
`;
var StyledAlert = dt(Alert)`
  & > button {
    display: none;
  }
`;
var ModalContent = ({ onClose }) => {
  const { formatMessage } = useIntl();
  const state = useAIUploadModalContext("ModalContent", (s) => s.state);
  const dispatch = useAIUploadModalContext("ModalContent", (s) => s.dispatch);
  const folderId = useAIUploadModalContext("ModalContent", (s) => s.folderId);
  const { upload } = useUpload();
  const { edit, isLoading: isSaving } = useBulkEdit();
  const [isUploading, setIsUploading] = React2.useState(false);
  const [uploadError, setUploadError] = React2.useState(null);
  const handleCaptionChange = (assetId, caption) => {
    dispatch({
      type: "set_uploaded_asset_caption",
      payload: {
        id: assetId,
        caption
      }
    });
  };
  const handleAltTextChange = (assetId, altText) => {
    dispatch({
      type: "set_uploaded_asset_alt_text",
      payload: {
        id: assetId,
        altText
      }
    });
  };
  const resetState = () => {
    dispatch({
      type: "set_uploaded_assets",
      payload: []
    });
  };
  const handleFinish = async () => {
    if (state.hasUnsavedChanges) {
      const assetsToUpdate = state.uploadedAssets.filter((asset) => (asset.wasCaptionChanged || asset.wasAltTextChanged) && asset.file.id);
      if (assetsToUpdate.length > 0) {
        const updates = assetsToUpdate.map((asset) => ({
          id: asset.file.id,
          fileInfo: {
            name: asset.file.name,
            alternativeText: asset.file.alternativeText ?? null,
            caption: asset.file.caption ?? null,
            folder: typeof asset.file.folder === "object" && asset.file.folder !== null ? asset.file.folder.id : asset.file.folder
          }
        }));
        try {
          await edit(updates);
          dispatch({
            type: "clear_unsaved_changes"
          });
        } catch (err) {
          console.error("Failed to save asset changes:", err);
          return;
        }
      }
    }
    resetState();
    onClose();
  };
  const handleCancel = () => {
    resetState();
    onClose();
  };
  const handleUpload = async (assets) => {
    dispatch({
      type: "set_assets_to_upload_length",
      payload: assets.length
    });
    setUploadError(null);
    setIsUploading(true);
    try {
      const assetsForUpload = assets.map((asset) => ({
        ...asset,
        id: asset.id ? Number(asset.id) : void 0
      }));
      const uploadedFiles = await upload(assetsForUpload, folderId);
      const filesWithFolder = uploadedFiles.map((file) => ({
        ...file,
        // The upload API doesn't populate the folder relation, so we add it manually
        folder: folderId || file.folder
      }));
      dispatch({
        type: "set_uploaded_assets",
        payload: filesWithFolder
      });
    } catch (error) {
      console.error("Upload failed:", error);
      setUploadError(error instanceof Error ? error : new Error("Upload failed"));
    } finally {
      setIsUploading(false);
    }
  };
  if (state.assetsToUploadLength === 0) {
    return (0, import_jsx_runtime2.jsx)(Modal.Content, {
      children: (0, import_jsx_runtime2.jsx)(AddAssetStep, {
        onClose,
        onAddAsset: handleUpload
      })
    });
  }
  if (isUploading || state.assetsToUploadLength > 0 && state.uploadedAssets.length === 0 && !uploadError) {
    return (0, import_jsx_runtime2.jsxs)(Modal.Content, {
      children: [
        (0, import_jsx_runtime2.jsx)(Modal.Header, {
          children: (0, import_jsx_runtime2.jsx)(Modal.Title, {
            children: formatMessage({
              id: getTrad("ai.modal.uploading.title"),
              defaultMessage: "Uploading and processing with AI..."
            })
          })
        }),
        (0, import_jsx_runtime2.jsx)(StyledModalBody, {
          children: (0, import_jsx_runtime2.jsx)(AIAssetCardSkeletons, {
            count: state.assetsToUploadLength
          })
        })
      ]
    });
  }
  const title = formatMessage({
    id: getTrad("ai.modal.title"),
    defaultMessage: "{count, plural, one {# asset uploaded} other {# assets uploaded}}, review AI generated metadata"
  }, {
    count: state.uploadedAssets.length
  });
  if (uploadError) {
    return (0, import_jsx_runtime2.jsxs)(Modal.Content, {
      children: [
        (0, import_jsx_runtime2.jsx)(Modal.Header, {
          children: (0, import_jsx_runtime2.jsx)(Modal.Title, {
            children: title
          })
        }),
        (0, import_jsx_runtime2.jsx)(Modal.Body, {
          children: (0, import_jsx_runtime2.jsx)(StyledAlert, {
            closeLabel: "",
            variant: "danger",
            children: formatMessage({
              id: getTrad("ai.modal.error"),
              defaultMessage: "Could not generate AI metadata for the uploaded files."
            })
          })
        }),
        (0, import_jsx_runtime2.jsxs)(Modal.Footer, {
          children: [
            (0, import_jsx_runtime2.jsx)(Button, {
              onClick: handleCancel,
              variant: "tertiary",
              children: formatMessage({
                id: "cancel",
                defaultMessage: "Cancel"
              })
            }),
            (0, import_jsx_runtime2.jsx)(Button, {
              onClick: handleFinish,
              loading: isSaving,
              children: formatMessage({
                id: "global.finish",
                defaultMessage: "Finish"
              })
            })
          ]
        })
      ]
    });
  }
  return (0, import_jsx_runtime2.jsxs)(Modal.Content, {
    children: [
      (0, import_jsx_runtime2.jsx)(Modal.Header, {
        children: (0, import_jsx_runtime2.jsx)(Modal.Title, {
          children: title
        })
      }),
      (0, import_jsx_runtime2.jsx)(StyledModalBody, {
        children: (0, import_jsx_runtime2.jsx)(Flex, {
          gap: 6,
          direction: "column",
          alignItems: "stretch",
          children: state.uploadedAssets.map(({ file: asset, wasCaptionChanged, wasAltTextChanged }) => (0, import_jsx_runtime2.jsx)(AIAssetCard, {
            asset,
            onCaptionChange: (caption) => asset.id && handleCaptionChange(asset.id, caption),
            onAltTextChange: (altText) => asset.id && handleAltTextChange(asset.id, altText),
            wasCaptionChanged,
            wasAltTextChanged
          }, asset.id))
        })
      }),
      (0, import_jsx_runtime2.jsxs)(Modal.Footer, {
        children: [
          (0, import_jsx_runtime2.jsx)(Button, {
            onClick: handleCancel,
            variant: "tertiary",
            children: formatMessage({
              id: "cancel",
              defaultMessage: "Cancel"
            })
          }),
          (0, import_jsx_runtime2.jsx)(Button, {
            onClick: handleFinish,
            loading: isSaving,
            children: formatMessage({
              id: "global.finish",
              defaultMessage: "Finish"
            })
          })
        ]
      })
    ]
  });
};
var [AIUploadModalContext, useAIUploadModalContext] = createContext("AIUploadModalContext");
var reducer = (state, action) => {
  return fn(state, (draft) => {
    if (action.type === "set_uploaded_assets") {
      draft.uploadedAssets = action.payload.map((file) => ({
        file,
        wasCaptionChanged: false,
        wasAltTextChanged: false
      }));
      draft.hasUnsavedChanges = false;
    }
    if (action.type === "set_assets_to_upload_length") {
      draft.assetsToUploadLength = action.payload;
    }
    if (action.type === "set_uploaded_asset_caption") {
      const asset = draft.uploadedAssets.find((a) => a.file.id === action.payload.id);
      if (asset && asset.file.caption !== action.payload.caption) {
        asset.file.caption = action.payload.caption;
        asset.wasCaptionChanged = true;
        draft.hasUnsavedChanges = true;
      }
    }
    if (action.type === "set_uploaded_asset_alt_text") {
      const asset = draft.uploadedAssets.find((a) => a.file.id === action.payload.id);
      if (asset && asset.file.alternativeText !== action.payload.altText) {
        asset.file.alternativeText = action.payload.altText;
        asset.wasAltTextChanged = true;
        draft.hasUnsavedChanges = true;
      }
    }
    if (action.type === "remove_uploaded_asset") {
      draft.uploadedAssets = draft.uploadedAssets.filter((a) => a.file.id !== action.payload.id);
    }
    if (action.type === "edit_uploaded_asset") {
      const assetIndex = draft.uploadedAssets.findIndex((a) => a.file.id === action.payload.editedAsset.id);
      if (assetIndex !== -1) {
        draft.uploadedAssets[assetIndex] = {
          file: action.payload.editedAsset,
          wasCaptionChanged: draft.uploadedAssets[assetIndex].wasCaptionChanged,
          wasAltTextChanged: draft.uploadedAssets[assetIndex].wasAltTextChanged
        };
      }
    }
    if (action.type === "clear_unsaved_changes") {
      draft.hasUnsavedChanges = false;
      draft.uploadedAssets.forEach((asset) => {
        asset.wasCaptionChanged = false;
        asset.wasAltTextChanged = false;
      });
    }
  });
};
var AIUploadModal = ({ open, onClose, folderId = null }) => {
  const [state, dispatch] = React2.useReducer(reducer, {
    uploadedAssets: [],
    assetsToUploadLength: 0,
    hasUnsavedChanges: false
  });
  const handleClose = React2.useCallback(() => {
    dispatch({
      type: "set_uploaded_assets",
      payload: []
    });
    onClose();
  }, [
    onClose
  ]);
  return (0, import_jsx_runtime2.jsx)(AIUploadModalContext, {
    state,
    dispatch,
    folderId,
    onClose: handleClose,
    children: (0, import_jsx_runtime2.jsx)(Modal.Root, {
      open,
      onOpenChange: handleClose,
      children: (0, import_jsx_runtime2.jsx)(ModalContent, {
        onClose: handleClose
      })
    })
  });
};

// node_modules/@strapi/upload/dist/admin/components/FolderCard/FolderCardCheckbox/FolderCardCheckbox.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var FolderCardCheckbox = (props) => {
  const { id } = useFolderCard();
  return (0, import_jsx_runtime3.jsx)(Box, {
    position: "relative",
    zIndex: 2,
    children: (0, import_jsx_runtime3.jsx)(CheckboxImpl, {
      "aria-labelledby": `${id}-title`,
      ...props
    })
  });
};

// node_modules/@strapi/upload/dist/admin/hooks/useAiAvailability.mjs
var useAIAvailability2 = () => {
  const isAiAvailable = useAIAvailability();
  const { status, data } = useSettings(isAiAvailable);
  if (!isAiAvailable) {
    return {
      status: "success",
      isEnabled: false
    };
  }
  return {
    status,
    isEnabled: data == null ? void 0 : data.aiMetadata
  };
};

// node_modules/@strapi/upload/dist/admin/utils/getBreadcrumbDataML.mjs
var getBreadcrumbDataML = (folder, { pathname, query }) => {
  var _a, _b;
  const data = [
    {
      id: null,
      label: {
        id: getTrad("plugin.name"),
        defaultMessage: "Media Library"
      },
      href: folder ? getFolderURL(pathname, query || {}) : void 0
    }
  ];
  if ((folder == null ? void 0 : folder.parent) && typeof (folder == null ? void 0 : folder.parent) !== "number" && ((_a = folder == null ? void 0 : folder.parent) == null ? void 0 : _a.parent)) {
    data.push([]);
  }
  if ((folder == null ? void 0 : folder.parent) && typeof folder.parent !== "number") {
    data.push({
      id: folder.parent.id,
      label: folder.parent.name,
      href: getFolderURL(pathname, query || {}, {
        folder: (_b = folder.parent.id) == null ? void 0 : _b.toString(),
        folderPath: folder.parent.path
      })
    });
  }
  if (folder) {
    data.push({
      id: folder.id,
      label: folder.name
    });
  }
  return data;
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/BulkActions.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_qs6 = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/BulkDeleteButton.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var BulkDeleteButton = ({ selected, onSuccess }) => {
  const { formatMessage } = useIntl();
  const { remove } = useBulkRemove();
  const handleConfirmRemove = async () => {
    await remove(selected);
    onSuccess();
  };
  return (0, import_jsx_runtime4.jsxs)(Dialog.Root, {
    children: [
      (0, import_jsx_runtime4.jsx)(Dialog.Trigger, {
        children: (0, import_jsx_runtime4.jsx)(Button, {
          variant: "danger-light",
          size: "S",
          startIcon: (0, import_jsx_runtime4.jsx)(ForwardRef$b, {}),
          children: formatMessage({
            id: "global.delete",
            defaultMessage: "Delete"
          })
        })
      }),
      (0, import_jsx_runtime4.jsx)(ConfirmDialog, {
        onConfirm: handleConfirmRemove
      })
    ]
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/BulkMoveButton.mjs
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var React3 = __toESM(require_react(), 1);

// node_modules/@strapi/upload/dist/admin/components/BulkMoveDialog/BulkMoveDialog.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_isEmpty = __toESM(require_isEmpty(), 1);

// node_modules/@strapi/upload/dist/admin/hooks/useBulkMove.mjs
var import_qs4 = __toESM(require_lib(), 1);
var useBulkMove = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const queryClient = useQueryClient();
  const { post } = useFetchClient();
  const bulkMoveQuery = ({ destinationFolderId, filesAndFolders }) => {
    const payload = filesAndFolders.reduce((acc, selected) => {
      const { id, type } = selected;
      const key = type === "asset" ? "fileIds" : "folderIds";
      if (!acc[key]) {
        acc[key] = [];
      }
      acc[key].push(id);
      return acc;
    }, {});
    return post("/upload/actions/bulk-move", {
      ...payload,
      destinationFolderId
    });
  };
  const mutation = useMutation(bulkMoveQuery, {
    onSuccess(res) {
      var _a;
      const { data: { data } } = res;
      if (((_a = data == null ? void 0 : data.files) == null ? void 0 : _a.length) > 0) {
        queryClient.refetchQueries([
          pluginId,
          "assets"
        ], {
          active: true
        });
        queryClient.refetchQueries([
          pluginId,
          "asset-count"
        ], {
          active: true
        });
      }
      queryClient.refetchQueries([
        pluginId,
        "folders"
      ], {
        active: true
      });
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("modal.move.success-label"),
          defaultMessage: "Elements have been moved successfully."
        })
      });
    }
  });
  const move = (destinationFolderId, filesAndFolders) => mutation.mutateAsync({
    destinationFolderId,
    filesAndFolders
  });
  return {
    ...mutation,
    move
  };
};

// node_modules/@strapi/upload/dist/admin/components/BulkMoveDialog/BulkMoveDialog.mjs
var import_qs5 = __toESM(require_lib(), 1);
var BulkMoveDialog = ({ onClose, selected = [], currentFolder }) => {
  const { formatMessage } = useIntl();
  const { data: folderStructure, isLoading } = useFolderStructure();
  const { move } = useBulkMove();
  if (!folderStructure) {
    return null;
  }
  const handleSubmit = async (values, { setErrors }) => {
    var _a;
    try {
      if (typeof values.destination !== "string") {
        const destinationValue = values.destination.value;
        await move(destinationValue, selected);
        onClose();
      }
    } catch (error) {
      const normalizedError = normalizeAPIError(error);
      if (normalizedError && "errors" in normalizedError) {
        const formikErrors = (_a = normalizedError.errors) == null ? void 0 : _a.reduce((acc, error2) => {
          var _a2, _b;
          acc[((_b = (_a2 = error2.values) == null ? void 0 : _a2.path) == null ? void 0 : _b.length) || "destination"] = error2.defaultMessage;
          return acc;
        }, {});
        if (!(0, import_isEmpty.default)(formikErrors)) {
          setErrors(formikErrors);
        }
      }
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime5.jsx)(Modal.Content, {
      children: (0, import_jsx_runtime5.jsx)(Modal.Body, {
        children: (0, import_jsx_runtime5.jsx)(Flex, {
          justifyContent: "center",
          paddingTop: 4,
          paddingBottom: 4,
          children: (0, import_jsx_runtime5.jsx)(Loader, {
            children: formatMessage({
              id: getTrad("content.isLoading"),
              defaultMessage: "Content is loading."
            })
          })
        })
      })
    });
  }
  const initialFormData = {
    destination: {
      value: (currentFolder == null ? void 0 : currentFolder.id) || "",
      label: (currentFolder == null ? void 0 : currentFolder.name) || folderStructure[0].label
    }
  };
  return (0, import_jsx_runtime5.jsx)(Modal.Content, {
    children: (0, import_jsx_runtime5.jsx)(Formik, {
      validateOnChange: false,
      onSubmit: handleSubmit,
      initialValues: initialFormData,
      children: ({ values, errors, setFieldValue }) => (0, import_jsx_runtime5.jsxs)(Form, {
        noValidate: true,
        children: [
          (0, import_jsx_runtime5.jsx)(Modal.Header, {
            children: (0, import_jsx_runtime5.jsx)(Modal.Title, {
              children: formatMessage({
                id: getTrad("modal.folder.move.title"),
                defaultMessage: "Move elements to"
              })
            })
          }),
          (0, import_jsx_runtime5.jsx)(Modal.Body, {
            children: (0, import_jsx_runtime5.jsx)(Grid.Root, {
              gap: 4,
              children: (0, import_jsx_runtime5.jsx)(Grid.Item, {
                xs: 12,
                col: 12,
                direction: "column",
                alignItems: "stretch",
                children: (0, import_jsx_runtime5.jsxs)(Field.Root, {
                  id: "folder-destination",
                  children: [
                    (0, import_jsx_runtime5.jsx)(Field.Label, {
                      children: formatMessage({
                        id: getTrad("form.input.label.folder-location"),
                        defaultMessage: "Location"
                      })
                    }),
                    (0, import_jsx_runtime5.jsx)(SelectTree, {
                      options: folderStructure,
                      onChange: (value) => {
                        setFieldValue("destination", value);
                      },
                      defaultValue: typeof values.destination !== "string" ? values.destination : void 0,
                      name: "destination",
                      menuPortalTarget: document.querySelector("body"),
                      inputId: "folder-destination",
                      error: errors == null ? void 0 : errors.destination,
                      ariaErrorMessage: "destination-error"
                    }),
                    errors.destination && (0, import_jsx_runtime5.jsx)(Typography, {
                      variant: "pi",
                      tag: "p",
                      textColor: "danger600",
                      children: errors.destination
                    })
                  ]
                })
              })
            })
          }),
          (0, import_jsx_runtime5.jsxs)(Modal.Footer, {
            children: [
              (0, import_jsx_runtime5.jsx)(Modal.Close, {
                children: (0, import_jsx_runtime5.jsx)(Button, {
                  variant: "tertiary",
                  name: "cancel",
                  children: formatMessage({
                    id: "cancel",
                    defaultMessage: "Cancel"
                  })
                })
              }),
              (0, import_jsx_runtime5.jsx)(Button, {
                type: "submit",
                loading: isLoading,
                children: formatMessage({
                  id: "modal.folder.move.submit",
                  defaultMessage: "Move"
                })
              })
            ]
          })
        ]
      })
    })
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/BulkMoveButton.mjs
var BulkMoveButton = ({ selected = [], onSuccess, currentFolder }) => {
  const { formatMessage } = useIntl();
  const [showConfirmDialog, setShowConfirmDialog] = React3.useState(false);
  const handleConfirmMove = () => {
    setShowConfirmDialog(false);
    onSuccess();
  };
  return (0, import_jsx_runtime6.jsxs)(Modal.Root, {
    open: showConfirmDialog,
    onOpenChange: setShowConfirmDialog,
    children: [
      (0, import_jsx_runtime6.jsx)(Modal.Trigger, {
        children: (0, import_jsx_runtime6.jsx)(Button, {
          variant: "secondary",
          size: "S",
          startIcon: (0, import_jsx_runtime6.jsx)(ForwardRef$1H, {}),
          children: formatMessage({
            id: "global.move",
            defaultMessage: "Move"
          })
        })
      }),
      (0, import_jsx_runtime6.jsx)(BulkMoveDialog, {
        currentFolder,
        onClose: handleConfirmMove,
        selected
      })
    ]
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/BulkActions.mjs
var BulkActions = ({ selected = [], onSuccess, currentFolder }) => {
  const { formatMessage } = useIntl();
  const numberAssets = selected == null ? void 0 : selected.reduce(function(_this, val) {
    var _a;
    return (val == null ? void 0 : val.type) === "folder" && "files" in val && (val == null ? void 0 : val.files) && "count" in val.files ? _this + ((_a = val == null ? void 0 : val.files) == null ? void 0 : _a.count) : _this + 1;
  }, 0);
  return (0, import_jsx_runtime7.jsxs)(Flex, {
    gap: 2,
    paddingBottom: 5,
    children: [
      (0, import_jsx_runtime7.jsx)(Typography, {
        variant: "epsilon",
        textColor: "neutral600",
        children: formatMessage({
          id: getTrad("list.assets.selected"),
          defaultMessage: "{numberFolders, plural, one {1 folder} other {# folders}} - {numberAssets, plural, one {1 asset} other {# assets}} selected"
        }, {
          numberFolders: selected == null ? void 0 : selected.filter(({ type }) => type === "folder").length,
          numberAssets
        })
      }),
      (0, import_jsx_runtime7.jsx)(BulkDeleteButton, {
        selected,
        onSuccess
      }),
      (0, import_jsx_runtime7.jsx)(BulkMoveButton, {
        currentFolder,
        selected,
        onSuccess
      })
    ]
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/EmptyOrNoPermissions.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_qs7 = __toESM(require_lib(), 1);
var getContentIntlMessage = ({ isFiltering, canCreate, canRead }) => {
  if (isFiltering) {
    return {
      id: "list.assets-empty.title-withSearch",
      defaultMessage: "There are no elements with the applied filters"
    };
  }
  if (canRead) {
    if (canCreate) {
      return {
        id: "list.assets.empty-upload",
        defaultMessage: "Upload your first assets..."
      };
    }
    return {
      id: "list.assets.empty",
      defaultMessage: "Media Library is empty"
    };
  }
  return {
    id: "header.actions.no-permissions",
    defaultMessage: "No permissions to view"
  };
};
var EmptyOrNoPermissions = ({ canCreate, isFiltering, canRead, onActionClick }) => {
  const { formatMessage } = useIntl();
  const content = getContentIntlMessage({
    isFiltering,
    canCreate,
    canRead
  });
  return (0, import_jsx_runtime8.jsx)(EmptyAssets, {
    icon: !canRead ? ForwardRef$l : void 0,
    action: canCreate && !isFiltering && (0, import_jsx_runtime8.jsx)(Button, {
      variant: "secondary",
      startIcon: (0, import_jsx_runtime8.jsx)(ForwardRef$G, {}),
      onClick: onActionClick,
      children: formatMessage({
        id: getTrad("header.actions.add-assets"),
        defaultMessage: "Add new assets"
      })
    }),
    content: formatMessage({
      ...content,
      id: getTrad(content.id)
    })
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/Filters.mjs
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var React4 = __toESM(require_react(), 1);
var import_qs8 = __toESM(require_lib(), 1);
var Filters = () => {
  var _a;
  const [open, setOpen] = React4.useState(false);
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const [{ query }, setQuery] = useQueryParams();
  const filters = ((_a = query == null ? void 0 : query.filters) == null ? void 0 : _a.$and) || [];
  const handleRemoveFilter = (nextFilters) => {
    setQuery({
      filters: {
        $and: nextFilters
      },
      page: 1
    });
  };
  const handleSubmit = (filters2) => {
    trackUsage("didFilterMediaLibraryElements", {
      location: "content-manager",
      filter: Object.keys(filters2[filters2.length - 1])[0]
    });
    setQuery({
      filters: {
        $and: filters2
      },
      page: 1
    });
  };
  return (0, import_jsx_runtime9.jsxs)(Popover.Root, {
    open,
    onOpenChange: setOpen,
    children: [
      (0, import_jsx_runtime9.jsx)(Popover.Trigger, {
        children: (0, import_jsx_runtime9.jsx)(Button, {
          variant: "tertiary",
          startIcon: (0, import_jsx_runtime9.jsx)(ForwardRef$1I, {}),
          size: "S",
          children: formatMessage({
            id: "app.utils.filters",
            defaultMessage: "Filters"
          })
        })
      }),
      (0, import_jsx_runtime9.jsx)(FilterPopover, {
        displayedFilters,
        filters,
        onSubmit: handleSubmit,
        onToggle: setOpen
      }),
      (0, import_jsx_runtime9.jsx)(FilterList, {
        appliedFilters: filters,
        filtersSchema: displayedFilters,
        onRemoveFilter: handleRemoveFilter
      })
    ]
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/components/Header.mjs
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_qs9 = __toESM(require_lib(), 1);
var Header = ({ breadcrumbs = null, canCreate, folder = null, onToggleEditFolderDialog, onToggleUploadAssetDialog }) => {
  const { formatMessage } = useIntl();
  const { pathname } = useLocation();
  const [{ query }] = useQueryParams();
  const backQuery = {
    ...query,
    folder: (folder == null ? void 0 : folder.parent) && typeof folder.parent !== "number" && folder.parent.id ? folder.parent.id : void 0,
    folderPath: (folder == null ? void 0 : folder.parent) && typeof folder.parent !== "number" && folder.parent.path ? folder.parent.path : void 0
  };
  return (0, import_jsx_runtime10.jsx)(Layouts.Header, {
    title: formatMessage({
      id: getTrad("plugin.name"),
      defaultMessage: `Media Library`
    }),
    subtitle: breadcrumbs && typeof breadcrumbs !== "boolean" && folder && (0, import_jsx_runtime10.jsx)(Breadcrumbs, {
      label: formatMessage({
        id: getTrad("header.breadcrumbs.nav.label"),
        defaultMessage: "Folders navigation"
      }),
      breadcrumbs,
      currentFolderId: folder == null ? void 0 : folder.id
    }),
    navigationAction: folder && (0, import_jsx_runtime10.jsx)(Link2, {
      tag: NavLink,
      startIcon: (0, import_jsx_runtime10.jsx)(ForwardRef$2J, {}),
      to: `${pathname}?${(0, import_qs9.stringify)(backQuery, {
        encode: false
      })}`,
      children: formatMessage({
        id: getTrad("header.actions.folder-level-up"),
        defaultMessage: "Back"
      })
    }),
    primaryAction: canCreate && (0, import_jsx_runtime10.jsxs)(Flex, {
      gap: 2,
      children: [
        (0, import_jsx_runtime10.jsx)(Button, {
          startIcon: (0, import_jsx_runtime10.jsx)(ForwardRef$G, {}),
          variant: "secondary",
          onClick: onToggleEditFolderDialog,
          children: formatMessage({
            id: getTrad("header.actions.add-folder"),
            defaultMessage: "Add new folder"
          })
        }),
        (0, import_jsx_runtime10.jsx)(Button, {
          startIcon: (0, import_jsx_runtime10.jsx)(ForwardRef$G, {}),
          onClick: onToggleUploadAssetDialog,
          children: formatMessage({
            id: getTrad("header.actions.add-assets"),
            defaultMessage: "Add new assets"
          })
        })
      ]
    })
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/MediaLibrary/MediaLibrary.mjs
var BoxWithHeight = dt(Box)`
  height: 3.2rem;
  display: flex;
  align-items: center;
`;
var TypographyMaxWidth = dt(Typography)`
  max-width: 100%;
`;
var ActionContainer = dt(Box)`
  svg {
    path {
      fill: ${({ theme }) => theme.colors.neutral500};
    }
  }
`;
var MediaLibrary = () => {
  var _a, _b, _c, _d;
  const navigate = useNavigate();
  const { canRead, canCreate, canUpdate, canCopyLink, canDownload, canConfigureView, isLoading: permissionsLoading } = useMediaLibraryPermissions();
  const { isEnabled: isAiEnabled, status: aiAvailabilityStatus } = useAIAvailability2();
  const currentFolderToEditRef = React5.useRef();
  const { formatMessage } = useIntl();
  const { pathname } = useLocation();
  const { trackUsage } = useTracking();
  const [{ query }, setQuery] = useQueryParams();
  const isFiltering = Boolean(query._q || query.filters);
  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);
  const isGridView = view === viewOptions.GRID;
  const { data: assetsData, isLoading: assetsLoading, error: assetsError } = useAssets({
    skipWhen: !canRead,
    query
  });
  const { data: foldersData, isLoading: foldersLoading, error: foldersError } = useFolders({
    enabled: canRead && ((_a = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _a.page) === 1 && !containsAssetFilter(query),
    query
  });
  const { data: currentFolder, isLoading: isCurrentFolderLoading, error: currentFolderError } = useFolder(query == null ? void 0 : query.folder, {
    enabled: canRead && !!(query == null ? void 0 : query.folder)
  });
  if ((currentFolderError == null ? void 0 : currentFolderError.name) === "NotFoundError") {
    navigate(pathname);
  }
  const folders = (foldersData == null ? void 0 : foldersData.map((folder) => ({
    ...folder,
    type: "folder",
    folderURL: getFolderURL(pathname, query, {
      folder: folder.id.toString(),
      folderPath: folder.path
    }),
    isSelectable: canUpdate
  }))) ?? [];
  const folderCount = (folders == null ? void 0 : folders.length) || 0;
  const assets = ((_b = assetsData == null ? void 0 : assetsData.results) == null ? void 0 : _b.map((asset) => ({
    ...asset,
    type: "asset",
    isSelectable: canUpdate
  }))) || [];
  const assetCount = (assets == null ? void 0 : assets.length) ?? 0;
  const totalAssetCount = (_c = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _c.total;
  const isLoading = isCurrentFolderLoading || foldersLoading || permissionsLoading || assetsLoading || aiAvailabilityStatus === "loading";
  const [showUploadAssetDialog, setShowUploadAssetDialog] = React5.useState(false);
  const [showEditFolderDialog, setShowEditFolderDialog] = React5.useState(false);
  const [assetToEdit, setAssetToEdit] = React5.useState(void 0);
  const [folderToEdit, setFolderToEdit] = React5.useState(void 0);
  const [selected, { selectOne, selectAll }] = useSelectionState([
    "type",
    "id"
  ], []);
  const indeterminateBulkSelect = (selected == null ? void 0 : selected.length) > 0 && (selected == null ? void 0 : selected.length) !== assetCount + folderCount;
  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);
  const toggleEditFolderDialog = ({ created = false } = {}) => {
    if (created && (query == null ? void 0 : query.page) !== "1") {
      setQuery({
        ...query,
        page: 1
      });
    }
    setShowEditFolderDialog((prev) => !prev);
  };
  const handleBulkSelect = (checked, elements) => {
    if (checked) {
      trackUsage("didSelectAllMediaLibraryElements");
    }
    selectAll(elements);
  };
  const handleChangeSort = (value) => {
    trackUsage("didSortMediaLibraryElements", {
      location: "upload",
      sort: value
    });
    setQuery({
      sort: value
    });
  };
  const handleEditFolder = (folder) => {
    setFolderToEdit(folder);
    setShowEditFolderDialog(true);
  };
  const handleEditFolderClose = (payload) => {
    setFolderToEdit(null);
    toggleEditFolderDialog(payload);
    if (currentFolderToEditRef.current) {
      currentFolderToEditRef.current.focus();
    }
  };
  const handleAssetDeleted = (numberOfAssets) => {
    var _a2, _b2, _c2;
    if (numberOfAssets === assetCount && ((_a2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _a2.page) === ((_b2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _b2.pageCount) && ((_c2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _c2.page) && assetsData.pagination.page > 1) {
      setQuery({
        ...query,
        page: assetsData.pagination.page - 1
      });
    }
  };
  const handleBulkActionSuccess = () => {
    selectAll();
    handleAssetDeleted(selected.length);
  };
  if (isLoading) {
    return (0, import_jsx_runtime11.jsx)(Page.Loading, {});
  }
  if (assetsError || foldersError || aiAvailabilityStatus === "error") {
    return (0, import_jsx_runtime11.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime11.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime11.jsxs)(Page.Main, {
        children: [
          (0, import_jsx_runtime11.jsx)(Header, {
            breadcrumbs: !isCurrentFolderLoading ? getBreadcrumbDataML(currentFolder, {
              pathname,
              query
            }) : null,
            canCreate,
            onToggleEditFolderDialog: toggleEditFolderDialog,
            onToggleUploadAssetDialog: toggleUploadAssetDialog,
            folder: currentFolder
          }),
          (0, import_jsx_runtime11.jsx)(Layouts.Action, {
            startActions: (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, {
              children: [
                canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (0, import_jsx_runtime11.jsx)(BoxWithHeight, {
                  paddingLeft: 2,
                  paddingRight: 2,
                  background: "neutral0",
                  hasRadius: true,
                  borderColor: "neutral200",
                  children: (0, import_jsx_runtime11.jsx)(CheckboxImpl, {
                    "aria-label": formatMessage({
                      id: getTrad("bulk.select.label"),
                      defaultMessage: "Select all folders & assets"
                    }),
                    checked: indeterminateBulkSelect ? "indeterminate" : (assetCount > 0 || folderCount > 0) && selected.length === assetCount + folderCount,
                    onCheckedChange: (e) => handleBulkSelect(e, [
                      ...assets,
                      ...folders
                    ])
                  })
                }),
                canRead && isGridView && (0, import_jsx_runtime11.jsx)(SortPicker, {
                  value: query == null ? void 0 : query.sort,
                  onChangeSort: handleChangeSort
                }),
                canRead && (0, import_jsx_runtime11.jsx)(Filters, {})
              ]
            }),
            endActions: (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, {
              children: [
                canConfigureView ? (0, import_jsx_runtime11.jsx)(ActionContainer, {
                  paddingTop: 1,
                  paddingBottom: 1,
                  children: (0, import_jsx_runtime11.jsx)(IconButton, {
                    tag: Link,
                    to: {
                      pathname: `${pathname}/configuration`,
                      search: (0, import_qs10.stringify)(query, {
                        encode: false
                      })
                    },
                    label: formatMessage({
                      id: "app.links.configure-view",
                      defaultMessage: "Configure the view"
                    }),
                    children: (0, import_jsx_runtime11.jsx)(ForwardRef$2a, {})
                  })
                }) : null,
                (0, import_jsx_runtime11.jsx)(ActionContainer, {
                  paddingTop: 1,
                  paddingBottom: 1,
                  children: (0, import_jsx_runtime11.jsx)(IconButton, {
                    label: isGridView ? formatMessage({
                      id: getTrad("view-switch.list"),
                      defaultMessage: "List View"
                    }) : formatMessage({
                      id: getTrad("view-switch.grid"),
                      defaultMessage: "Grid View"
                    }),
                    onClick: () => setView(isGridView ? viewOptions.LIST : viewOptions.GRID),
                    children: isGridView ? (0, import_jsx_runtime11.jsx)(ForwardRef$1e, {}) : (0, import_jsx_runtime11.jsx)(ForwardRef$1C, {})
                  })
                }),
                (0, import_jsx_runtime11.jsx)(SearchInput, {
                  label: formatMessage({
                    id: getTrad("search.label"),
                    defaultMessage: "Search for an asset"
                  }),
                  trackedEvent: "didSearchMediaLibraryElements",
                  trackedEventDetails: {
                    location: "upload"
                  }
                })
              ]
            })
          }),
          (0, import_jsx_runtime11.jsxs)(Layouts.Content, {
            children: [
              selected.length > 0 && (0, import_jsx_runtime11.jsx)(BulkActions, {
                currentFolder,
                selected,
                onSuccess: handleBulkActionSuccess
              }),
              folderCount === 0 && assetCount === 0 && (0, import_jsx_runtime11.jsx)(EmptyOrNoPermissions, {
                canCreate,
                canRead,
                isFiltering,
                onActionClick: toggleUploadAssetDialog
              }),
              canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (0, import_jsx_runtime11.jsx)(TableList, {
                assetCount,
                folderCount,
                indeterminate: indeterminateBulkSelect,
                onChangeSort: handleChangeSort,
                onChangeFolder: (folderID, folderPath) => navigate(getFolderURL(pathname, query, {
                  folder: folderID.toString(),
                  folderPath
                })),
                onEditAsset: setAssetToEdit,
                onEditFolder: handleEditFolder,
                onSelectOne: selectOne,
                onSelectAll: handleBulkSelect,
                rows: [
                  ...folders,
                  ...assets
                ],
                selected,
                shouldDisableBulkSelect: !canUpdate,
                sortQuery: (query == null ? void 0 : query.sort) ?? ""
              }),
              canRead && isGridView && (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, {
                children: [
                  folderCount > 0 && (0, import_jsx_runtime11.jsx)(FolderGridList, {
                    title: (isFiltering && assetCount > 0 || !isFiltering) && formatMessage({
                      id: getTrad("list.folders.title"),
                      defaultMessage: "Folders ({count})"
                    }, {
                      count: folderCount
                    }) || "",
                    children: folders.map((folder) => {
                      var _a2, _b2;
                      const selectedFolders = selected.filter(({ type }) => type === "folder");
                      const isSelected = !!selectedFolders.find((currentFolder2) => currentFolder2.id === folder.id);
                      const url = getFolderURL(pathname, query, {
                        folder: folder == null ? void 0 : folder.id.toString(),
                        folderPath: folder == null ? void 0 : folder.path
                      });
                      return (0, import_jsx_runtime11.jsx)(Grid.Item, {
                        col: 3,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime11.jsx)(FolderCard, {
                          ref: folderToEdit && folder.id === folderToEdit.id ? currentFolderToEditRef : void 0,
                          ariaLabel: folder.name,
                          id: `folder-${folder.id}`,
                          to: url,
                          startAction: folder.isSelectable ? (0, import_jsx_runtime11.jsx)(FolderCardCheckbox, {
                            "data-testid": `folder-checkbox-${folder.id}`,
                            checked: isSelected,
                            onCheckedChange: () => selectOne(folder)
                          }) : null,
                          cardActions: (0, import_jsx_runtime11.jsx)(IconButton, {
                            label: formatMessage({
                              id: getTrad("list.folder.edit"),
                              defaultMessage: "Edit folder"
                            }),
                            onClick: () => handleEditFolder(folder),
                            children: (0, import_jsx_runtime11.jsx)(ForwardRef$N, {})
                          }),
                          children: (0, import_jsx_runtime11.jsx)(FolderCardBody, {
                            children: (0, import_jsx_runtime11.jsx)(FolderCardBodyAction, {
                              to: url,
                              children: (0, import_jsx_runtime11.jsxs)(Flex, {
                                tag: "h2",
                                direction: "column",
                                alignItems: "start",
                                maxWidth: "100%",
                                children: [
                                  (0, import_jsx_runtime11.jsxs)(TypographyMaxWidth, {
                                    fontWeight: "semiBold",
                                    textColor: "neutral800",
                                    ellipsis: true,
                                    children: [
                                      folder.name,
                                      (0, import_jsx_runtime11.jsx)(VisuallyHidden, {
                                        children: ":"
                                      })
                                    ]
                                  }),
                                  (0, import_jsx_runtime11.jsx)(TypographyMaxWidth, {
                                    tag: "span",
                                    textColor: "neutral600",
                                    variant: "pi",
                                    ellipsis: true,
                                    children: formatMessage({
                                      id: getTrad("list.folder.subtitle"),
                                      defaultMessage: "{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}"
                                    }, {
                                      folderCount: (_a2 = folder.children) == null ? void 0 : _a2.count,
                                      filesCount: (_b2 = folder.files) == null ? void 0 : _b2.count
                                    })
                                  })
                                ]
                              })
                            })
                          })
                        })
                      }, `folder-${folder.id}`);
                    })
                  }),
                  assetCount > 0 && folderCount > 0 && (0, import_jsx_runtime11.jsx)(Box, {
                    paddingTop: 6,
                    paddingBottom: 4,
                    children: (0, import_jsx_runtime11.jsx)(Divider, {})
                  }),
                  assetCount > 0 && (0, import_jsx_runtime11.jsx)(AssetGridList, {
                    assets,
                    onEditAsset: setAssetToEdit,
                    onSelectAsset: selectOne,
                    selectedAssets: selected.filter(({ type }) => type === "asset"),
                    title: (!isFiltering || isFiltering && folderCount > 0) && ((_d = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _d.page) === 1 && formatMessage({
                      id: getTrad("list.assets.title"),
                      defaultMessage: "Assets ({count})"
                    }, {
                      count: totalAssetCount
                    }) || ""
                  })
                ]
              }),
              (0, import_jsx_runtime11.jsxs)(Pagination.Root, {
                ...assetsData == null ? void 0 : assetsData.pagination,
                children: [
                  (0, import_jsx_runtime11.jsx)(Pagination.PageSize, {}),
                  (0, import_jsx_runtime11.jsx)(Pagination.Links, {})
                ]
              })
            ]
          })
        ]
      }),
      showUploadAssetDialog && (isAiEnabled ? (0, import_jsx_runtime11.jsx)(AIUploadModal, {
        open: showUploadAssetDialog,
        onClose: toggleUploadAssetDialog,
        folderId: (query == null ? void 0 : query.folder) ? Number(query.folder) : null
      }) : (0, import_jsx_runtime11.jsx)(UploadAssetDialog, {
        open: showUploadAssetDialog,
        onClose: toggleUploadAssetDialog,
        trackedLocation: "upload",
        folderId: query == null ? void 0 : query.folder
      })),
      showEditFolderDialog && (0, import_jsx_runtime11.jsx)(EditFolderDialog, {
        open: showEditFolderDialog,
        onClose: () => handleEditFolderClose(),
        folder: folderToEdit,
        parentFolderId: query == null ? void 0 : query.folder,
        location: "upload"
      }),
      assetToEdit && (0, import_jsx_runtime11.jsx)(EditAssetDialog, {
        onClose: (editedAsset) => {
          if (editedAsset === null) {
            handleAssetDeleted(1);
          }
          setAssetToEdit(void 0);
        },
        open: !!assetToEdit,
        asset: assetToEdit,
        canUpdate,
        canCopyLink,
        canDownload,
        trackedLocation: "upload"
      })
    ]
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/App.mjs
var ConfigureTheView = React6.lazy(async () => import("./ConfigureTheView-Q7M6VW7K.js").then((mod) => ({
  default: mod.ConfigureTheView
})));
var Upload = () => {
  const { config: { isLoading, isError, data: config } } = useConfig();
  const [{ rawQuery }, setQuery] = useQueryParams();
  const { formatMessage } = useIntl();
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Media Library"
  });
  React6.useEffect(() => {
    if (isLoading || isError || rawQuery) {
      return;
    }
    setQuery({
      sort: config.sort,
      page: 1,
      pageSize: config.pageSize
    });
  }, [
    isLoading,
    isError,
    config,
    rawQuery,
    setQuery
  ]);
  if (isLoading) {
    return (0, import_jsx_runtime12.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime12.jsxs)(Page.Main, {
    children: [
      (0, import_jsx_runtime12.jsx)(Page.Title, {
        children: title
      }),
      rawQuery ? (0, import_jsx_runtime12.jsx)(React6.Suspense, {
        fallback: (0, import_jsx_runtime12.jsx)(Page.Loading, {}),
        children: (0, import_jsx_runtime12.jsxs)(Routes, {
          children: [
            (0, import_jsx_runtime12.jsx)(Route, {
              index: true,
              element: (0, import_jsx_runtime12.jsx)(MediaLibrary, {})
            }),
            (0, import_jsx_runtime12.jsx)(Route, {
              path: "configuration",
              element: (0, import_jsx_runtime12.jsx)(ConfigureTheView, {
                config
              })
            })
          ]
        })
      }) : null
    ]
  });
};
export {
  Upload
};
//# sourceMappingURL=App-QXZ2D6JT.js.map
