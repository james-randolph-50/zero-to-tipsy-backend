{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/ProfilePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Button, Flex, useNotifyAT, Grid, Typography, FlexProps } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, FormHelpers } from '../components/Form';\nimport { InputRenderer } from '../components/FormInputs/Renderer';\nimport { useGuidedTour } from '../components/GuidedTour/Context';\nimport { Layouts } from '../components/Layouts/Layout';\nimport { Page } from '../components/PageHelpers';\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useTracking } from '../features/Tracking';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useIsDesktop } from '../hooks/useMediaQuery';\nimport { AppState, setAppTheme } from '../reducer';\nimport { useIsSSOLockedQuery, useUpdateMeMutation } from '../services/auth';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { translatedErrors } from '../utils/translatedErrors';\nimport { getDisplayName } from '../utils/users';\n\nimport { COMMON_USER_SCHEMA } from './Settings/pages/Users/utils/validation';\n\nimport type { UpdateMe } from '../../../shared/contracts/users';\n\nconst PROFILE_VALIDTION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  currentPassword: yup\n    .string()\n    // @ts-expect-error â€“ no idea why this is failing.\n    .when(['password', 'confirmPassword'], (password, confirmPassword, passSchema) => {\n      return password || confirmPassword\n        ? passSchema\n            .required({\n              id: translatedErrors.required.id,\n              defaultMessage: 'This field is required',\n            })\n            .nullable()\n        : passSchema;\n    }),\n  preferedLanguage: yup.string().nullable(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ProfilePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panel = ({ children, ...flexProps }: FlexProps) => {\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4} {...flexProps}>\n        {children}\n      </Flex>\n    </Box>\n  );\n};\n\nconst ProfilePage = () => {\n  const isDesktop = useIsDesktop();\n  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const currentTheme = useTypedSelector((state) => state.admin_app.theme.currentTheme);\n  const dispatch = useTypedDispatch();\n  const {\n    _unstableFormatValidationErrors: formatValidationErrors,\n    _unstableFormatAPIError: formatApiError,\n  } = useAPIErrorHandler();\n\n  const user = useAuth('ProfilePage', (state) => state.user);\n\n  React.useEffect(() => {\n    if (user) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.profile.form.notify.data.loaded',\n          defaultMessage: 'Your profile data has been loaded',\n        })\n      );\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n      });\n    }\n  }, [formatMessage, notifyStatus, toggleNotification, user]);\n\n  const [updateMe, { isLoading: isSubmittingForm }] = useUpdateMeMutation();\n\n  const {\n    isLoading,\n    data: dataSSO,\n    error,\n  } = useIsSSOLockedQuery(undefined, {\n    skip: !(window.strapi.isEE && window.strapi.features.isEnabled('sso')),\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'Settings.permissions.users.sso.provider.error' }),\n      });\n    }\n  }, [error, formatMessage, toggleNotification]);\n\n  type UpdateUsersMeBody = UpdateMe.Request['body'] & {\n    confirmPassword: string;\n    currentTheme: AppState['theme']['currentTheme'];\n  };\n\n  const handleSubmit = async (\n    body: UpdateUsersMeBody,\n    { setErrors }: FormHelpers<UpdateUsersMeBody>\n  ) => {\n    const { confirmPassword: _confirmPassword, currentTheme, ...bodyRest } = body;\n    let dataToSend = bodyRest;\n\n    // The password fields are optional. If the user didn't touch them, don't send any password\n    // to the API, because an empty string would throw a validation error\n    if (dataToSend.password === '') {\n      const {\n        password: _password,\n        currentPassword: _currentPassword,\n        ...passwordRequestBodyRest\n      } = dataToSend;\n      dataToSend = passwordRequestBodyRest;\n    }\n\n    const res = await updateMe(dataToSend);\n\n    if ('data' in res) {\n      dispatch(setAppTheme(currentTheme));\n\n      trackUsage('didChangeMode', { newMode: currentTheme });\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n      });\n    }\n\n    if ('error' in res) {\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      } else if (isBaseQueryError(res.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatApiError(res.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const hasLockedRole = dataSSO?.isSSOLocked ?? false;\n  const { email, firstname, lastname, username, preferedLanguage } = user ?? {};\n  const initialData = {\n    email: email ?? '',\n    firstname: firstname ?? '',\n    lastname: lastname ?? '',\n    username: username ?? '',\n    preferedLanguage,\n    currentTheme,\n    confirmPassword: '',\n    password: '',\n  };\n\n  return (\n    <>\n      <Page.Main aria-busy={isSubmittingForm}>\n        <Page.Title>\n          {formatMessage({\n            id: 'Settings.profile.form.section.head.title',\n            defaultMessage: 'User profile',\n          })}\n        </Page.Title>\n        <Form\n          method=\"PUT\"\n          onSubmit={handleSubmit}\n          initialValues={initialData}\n          validationSchema={PROFILE_VALIDTION_SCHEMA}\n        >\n          {({ isSubmitting, modified }) => (\n            <>\n              <Layouts.Header\n                title={getDisplayName(user)}\n                primaryAction={\n                  <Button\n                    startIcon={<Check />}\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!modified}\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Box paddingBottom={6}>\n                <Layouts.Content>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <UserInfoSection />\n                    {!hasLockedRole && <PasswordSection />}\n                    <PreferencesSection localeNames={localeNames} />\n                  </Flex>\n                </Layouts.Content>\n              </Box>\n            </>\n          )}\n        </Form>\n        {isDesktop && (\n          <Box>\n            <Layouts.Content>\n              <GuidedTourSection />\n            </Layouts.Content>\n          </Box>\n        )}\n      </Page.Main>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst PasswordSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Panel>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: 'global.change-password',\n          defaultMessage: 'Change password',\n        })}\n      </Typography>\n      {[\n        [\n          {\n            label: formatMessage({\n              id: 'Auth.form.currentPassword.label',\n              defaultMessage: 'Current Password',\n            }),\n            name: 'currentPassword',\n            size: 6,\n            type: 'password' as const,\n          },\n        ],\n        [\n          {\n            autoComplete: 'new-password',\n            label: formatMessage({\n              id: 'global.password',\n              defaultMessage: 'Password',\n            }),\n            name: 'password',\n            size: 6,\n            type: 'password' as const,\n          },\n          {\n            autoComplete: 'new-password',\n            label: formatMessage({\n              id: 'Auth.form.confirmPassword.label',\n              defaultMessage: 'Confirm Password',\n            }),\n            name: 'confirmPassword',\n            size: 6,\n            type: 'password' as const,\n          },\n        ],\n      ].map((row, index) => (\n        <Grid.Root key={index} gap={5}>\n          {row.map(({ size, ...field }) => (\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n              <InputRenderer {...field} />\n            </Grid.Item>\n          ))}\n        </Grid.Root>\n      ))}\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreferencesSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreferencesSectionProps {\n  localeNames: Record<string, string>;\n}\n\nconst PreferencesSection = ({ localeNames }: PreferencesSectionProps) => {\n  const { formatMessage } = useIntl();\n  const themesToDisplay = useTypedSelector((state) => state.admin_app.theme.availableThemes);\n\n  return (\n    <Panel>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'Settings.profile.form.section.experience.title',\n            defaultMessage: 'Experience',\n          })}\n        </Typography>\n        <Typography>\n          {formatMessage(\n            {\n              id: 'Settings.profile.form.section.experience.interfaceLanguageHelp',\n              defaultMessage:\n                'Preference changes will apply only to you. More information is available {here}.',\n            },\n            {\n              here: (\n                <Box\n                  tag=\"a\"\n                  color=\"primary600\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#locales\"\n                >\n                  {formatMessage({\n                    id: 'Settings.profile.form.section.experience.here',\n                    defaultMessage: 'here',\n                  })}\n                </Box>\n              ),\n            }\n          )}\n        </Typography>\n      </Flex>\n      <Grid.Root gap={5}>\n        {[\n          {\n            hint: formatMessage({\n              id: 'Settings.profile.form.section.experience.interfaceLanguage.hint',\n              defaultMessage: 'This will only display your own interface in the chosen language.',\n            }),\n            label: formatMessage({\n              id: 'Settings.profile.form.section.experience.interfaceLanguage',\n              defaultMessage: 'Interface language',\n            }),\n            name: 'preferedLanguage',\n            options: Object.entries(localeNames).map(([value, label]) => ({\n              label,\n              value,\n            })),\n            placeholder: formatMessage({\n              id: 'global.select',\n              defaultMessage: 'Select',\n            }),\n            size: 6,\n            type: 'enumeration' as const,\n          },\n          {\n            hint: formatMessage({\n              id: 'Settings.profile.form.section.experience.mode.hint',\n              defaultMessage: 'Displays your interface in the chosen mode.',\n            }),\n            label: formatMessage({\n              id: 'Settings.profile.form.section.experience.mode.label',\n              defaultMessage: 'Interface mode',\n            }),\n            name: 'currentTheme',\n            options: [\n              {\n                label: formatMessage({\n                  id: 'Settings.profile.form.section.experience.mode.option-system-label',\n                  defaultMessage: 'Use system settings',\n                }),\n                value: 'system',\n              },\n              ...themesToDisplay.map((theme) => ({\n                label: formatMessage(\n                  {\n                    id: 'Settings.profile.form.section.experience.mode.option-label',\n                    defaultMessage: '{name} mode',\n                  },\n                  {\n                    name: formatMessage({\n                      id: theme,\n                      defaultMessage: upperFirst(theme),\n                    }),\n                  }\n                ),\n                value: theme,\n              })),\n            ],\n            placeholder: formatMessage({\n              id: 'components.Select.placeholder',\n              defaultMessage: 'Select',\n            }),\n            size: 6,\n            type: 'enumeration' as const,\n          },\n        ].map(({ size, ...field }) => (\n          <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n            <InputRenderer {...field} />\n          </Grid.Item>\n        ))}\n      </Grid.Root>\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UserInfoSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst UserInfoSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Panel>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: 'global.profile',\n          defaultMessage: 'Profile',\n        })}\n      </Typography>\n      <Grid.Root gap={5}>\n        {[\n          {\n            label: formatMessage({\n              id: 'Auth.form.firstname.label',\n              defaultMessage: 'First name',\n            }),\n            name: 'firstname',\n            required: true,\n            size: 6,\n            type: 'string' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.lastname.label',\n              defaultMessage: 'Last name',\n            }),\n            name: 'lastname',\n            size: 6,\n            type: 'string' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.email.label',\n              defaultMessage: 'Email',\n            }),\n            name: 'email',\n            required: true,\n            size: 6,\n            type: 'email' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.username.label',\n              defaultMessage: 'Username',\n            }),\n            name: 'username',\n            size: 6,\n            type: 'string' as const,\n          },\n        ].map(({ size, ...field }) => (\n          <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n            <InputRenderer {...field} />\n          </Grid.Item>\n        ))}\n      </Grid.Root>\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst GuidedTourSection = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const dispatch = useGuidedTour('ProfilePage', (s) => s.dispatch);\n\n  const onClickReset = () => {\n    dispatch({ type: 'reset_all_tours' });\n    toggleNotification({\n      type: 'success',\n      message: formatMessage({\n        id: 'tours.profile.notification.success.reset',\n        defaultMessage: 'Guided tour reset',\n      }),\n    });\n  };\n\n  return (\n    <Panel alignItems=\"start\">\n      <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'tours.profile.title',\n            defaultMessage: 'Guided tour',\n          })}\n        </Typography>\n        <Typography variant=\"pi\">\n          {formatMessage({\n            id: 'tours.profile.description',\n            defaultMessage: 'You can reset the guided tour at any time.',\n          })}\n        </Typography>\n      </Flex>\n      <Button variant=\"tertiary\" onClick={onClickReset}>\n        {formatMessage({\n          id: 'tours.profile.reset',\n          defaultMessage: 'Reset guided tour',\n        })}\n      </Button>\n    </Panel>\n  );\n};\n\nexport { ProfilePage };\n"],
  "mappings": "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",
  "names": ["PROFILE_VALIDTION_SCHEMA", "object", "shape", "COMMON_USER_SCHEMA", "currentPassword", "string", "when", "password", "confirmPassword", "passSchema", "required", "id", "translatedErrors", "defaultMessage", "nullable", "preferedLanguage", "Panel", "children", "flexProps", "_jsx", "Box", "background", "hasRadius", "shadow", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "Flex", "direction", "alignItems", "gap", "ProfilePage", "isDesktop", "useIsDesktop", "localeNames", "useTypedSelector", "state", "admin_app", "language", "formatMessage", "useIntl", "trackUsage", "useTracking", "toggleNotification", "useNotification", "notifyStatus", "useNotifyAT", "currentTheme", "theme", "dispatch", "useTypedDispatch", "_unstableFormatValidationErrors", "formatValidationErrors", "_unstableFormatAPIError", "formatApiError", "useAPIErrorHandler", "user", "useAuth", "React", "useEffect", "type", "message", "updateMe", "isLoading", "isSubmittingForm", "useUpdateMeMutation", "data", "dataSSO", "error", "useIsSSOLockedQuery", "undefined", "skip", "window", "strapi", "isEE", "features", "isEnabled", "handleSubmit", "body", "setErrors", "_confirmPassword", "bodyRest", "dataToSend", "_password", "_currentPassword", "passwordRequestBodyRest", "res", "setAppTheme", "newMode", "isBaseQueryError", "name", "Page", "Loading", "hasLockedRole", "isSSOLocked", "email", "firstname", "lastname", "username", "initialData", "_Fragment", "_jsxs", "Main", "aria-busy", "Title", "Form", "method", "onSubmit", "initialValues", "validationSchema", "isSubmitting", "modified", "Layouts", "Header", "title", "getDisplayName", "primaryAction", "Button", "startIcon", "Check", "loading", "disabled", "Content", "UserInfoSection", "PasswordSection", "PreferencesSection", "GuidedTourSection", "Typography", "variant", "tag", "label", "size", "autoComplete", "map", "row", "index", "Grid", "Root", "field", "Item", "col", "InputRenderer", "themesToDisplay", "availableThemes", "here", "color", "target", "rel", "href", "hint", "options", "Object", "entries", "value", "placeholder", "upperFirst", "useGuidedTour", "s", "onClickReset", "onClick"]
}
