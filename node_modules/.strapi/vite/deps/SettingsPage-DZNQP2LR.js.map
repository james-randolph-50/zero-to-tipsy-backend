{
  "version": 3,
  "sources": ["../../../@strapi/upload/admin/src/pages/SettingsPage/init.ts", "../../../@strapi/upload/admin/src/pages/SettingsPage/reducer.ts", "../../../@strapi/upload/admin/src/pages/SettingsPage/SettingsPage.tsx"],
  "sourcesContent": ["import type { InitialState } from './reducer';\n\nexport const init = (initialState: InitialState) => {\n  return initialState;\n};\n", "import { produce } from 'immer';\nimport set from 'lodash/set';\n\nimport { SettingsData } from '../../../../shared/contracts/settings';\n\nconst initialData: SettingsData = {\n  responsiveDimensions: true,\n  sizeOptimization: true,\n  autoOrientation: false,\n  videoPreview: false,\n  aiMetadata: true,\n};\n\nexport type InitialState = {\n  initialData: SettingsData | null;\n  modifiedData: SettingsData | null;\n};\n\ninterface ActionGetDataSucceeded {\n  type: 'GET_DATA_SUCCEEDED';\n  data: InitialState['initialData'];\n}\n\ninterface ActionOnChange {\n  type: 'ON_CHANGE';\n  keys: keyof NonNullable<InitialState['initialData']>;\n  value: boolean;\n}\n\nexport type Action = ActionGetDataSucceeded | ActionOnChange;\n\nconst initialState: InitialState = {\n  initialData,\n  modifiedData: { ...initialData },\n};\n\nconst reducer = (state: InitialState, action: Action) =>\n  produce(state, (drafState) => {\n    switch (action.type) {\n      case 'GET_DATA_SUCCEEDED': {\n        drafState.initialData = action.data;\n        drafState.modifiedData = action.data;\n        break;\n      }\n      case 'ON_CHANGE': {\n        set(drafState, ['modifiedData', ...action.keys.split('.')], action.value);\n        break;\n      }\n      default:\n        return state;\n    }\n  });\n\nexport { initialState, reducer };\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page, useNotification, useFetchClient, Layouts } from '@strapi/admin/strapi-admin';\nimport { useAIAvailability } from '@strapi/admin/strapi-admin/ee';\nimport { Box, Button, Flex, Grid, Toggle, Typography, Field } from '@strapi/design-system';\nimport { Check, Sparkle } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\n\nimport { UpdateSettings } from '../../../../shared/contracts/settings';\nimport { PERMISSIONS } from '../../constants';\nimport { useSettings } from '../../hooks/useSettings';\nimport { getTrad } from '../../utils';\n\nimport { init } from './init';\nimport { initialState, reducer } from './reducer';\n\nimport type { InitialState } from './reducer';\n\nexport const SettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { put } = useFetchClient();\n\n  const [{ initialData, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);\n\n  const { data, isLoading, refetch } = useSettings();\n  const isAIAvailable = useAIAvailability();\n\n  React.useEffect(() => {\n    if (data) {\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        data,\n      });\n    }\n  }, [data]);\n\n  const isSaveButtonDisabled = isEqual(initialData, modifiedData);\n\n  const { mutateAsync, isLoading: isSubmitting } = useMutation<\n    UpdateSettings.Response['data'],\n    UpdateSettings.Response['error'],\n    UpdateSettings.Request['body']\n  >(\n    async (body) => {\n      const { data } = await put('/upload/settings', body);\n\n      return data;\n    },\n    {\n      onSuccess() {\n        refetch();\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      },\n      onError(err) {\n        console.error(err);\n      },\n    }\n  );\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (isSaveButtonDisabled) {\n      return;\n    }\n\n    await mutateAsync(modifiedData!);\n  };\n\n  const handleChange = ({\n    target: { name, value },\n  }: {\n    target: { name: keyof NonNullable<InitialState['initialData']>; value: boolean };\n  }) => {\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name,\n      value,\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main tabIndex={-1}>\n      <Page.Title>\n        {formatMessage({\n          id: getTrad('page.title'),\n          defaultMessage: 'Settings - Media Library',\n        })}\n      </Page.Title>\n      <form onSubmit={handleSubmit}>\n        <Layouts.Header\n          title={formatMessage({\n            id: getTrad('settings.header.label'),\n            defaultMessage: 'Media Library',\n          })}\n          primaryAction={\n            <Button\n              disabled={isSaveButtonDisabled}\n              loading={isSubmitting}\n              type=\"submit\"\n              startIcon={<Check />}\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          }\n          subtitle={formatMessage({\n            id: getTrad('settings.sub-header.label'),\n            defaultMessage: 'Configure the settings for the Media Library',\n          })}\n        />\n        <Layouts.Content>\n          <Layouts.Root>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n              {isAIAvailable && (\n                <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                    <Grid.Root gap={6}>\n                      <Grid.Item col={8} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <Flex gap={2}>\n                          <Box color=\"alternative700\">\n                            <Sparkle />\n                          </Box>\n                          <Typography variant=\"delta\" tag=\"h2\">\n                            {formatMessage({\n                              id: getTrad('settings.form.aiMetadata.label'),\n                              defaultMessage:\n                                'Generate AI captions and alt texts automatically on upload!',\n                            })}\n                          </Typography>\n                        </Flex>\n                        <Flex paddingTop={1}>\n                          <Typography variant=\"pi\" textColor=\"neutral600\">\n                            {formatMessage({\n                              id: getTrad('settings.form.aiMetadata.description'),\n                              defaultMessage:\n                                'Enable this feature to save time, optimize your SEO and increase accessibility by letting our AI generate captions and alternative texts for you.',\n                            })}\n                          </Typography>\n                        </Flex>\n                      </Grid.Item>\n                      <Grid.Item\n                        col={4}\n                        s={12}\n                        direction=\"column\"\n                        alignItems=\"end\"\n                        justifyContent={'center'}\n                      >\n                        <Field.Root name=\"aiMetadata\" width={'158px'}>\n                          <Toggle\n                            checked={modifiedData?.aiMetadata}\n                            offLabel={formatMessage({\n                              id: 'app.components.ToggleCheckbox.off-label',\n                              defaultMessage: 'Disabled',\n                            })}\n                            onLabel={formatMessage({\n                              id: 'app.components.ToggleCheckbox.on-label',\n                              defaultMessage: 'Enabled',\n                            })}\n                            onChange={(e) => {\n                              handleChange({\n                                target: { name: 'aiMetadata', value: e.target.checked },\n                              });\n                            }}\n                          />\n                        </Field.Root>\n                      </Grid.Item>\n                    </Grid.Root>\n                  </Flex>\n                </Box>\n              )}\n\n              <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Flex>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: getTrad('settings.blockTitle'),\n                        defaultMessage: 'Asset management',\n                      })}\n                    </Typography>\n                  </Flex>\n                  <Grid.Root gap={6}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.responsiveDimensions.description'),\n                          defaultMessage:\n                            'Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset.',\n                        })}\n                        name=\"responsiveDimensions\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.responsiveDimensions.label'),\n                            defaultMessage: 'Responsive friendly upload',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.responsiveDimensions}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'responsiveDimensions', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.sizeOptimization.description'),\n                          defaultMessage:\n                            'Enabling this option will reduce the image size and slightly reduce its quality.',\n                        })}\n                        name=\"sizeOptimization\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.sizeOptimization.label'),\n                            defaultMessage: 'Size optimization',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.sizeOptimization}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'sizeOptimization', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.autoOrientation.description'),\n                          defaultMessage:\n                            'Enabling this option will automatically rotate the image according to EXIF orientation tag.',\n                        })}\n                        name=\"autoOrientation\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.autoOrientation.label'),\n                            defaultMessage: 'Auto orientation',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.autoOrientation}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'autoOrientation', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                  </Grid.Root>\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Root>\n        </Layouts.Content>\n      </form>\n    </Page.Main>\n  );\n};\n\nexport const ProtectedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.settings}>\n    <SettingsPage />\n  </Page.Protect>\n);\n"],
  "mappings": "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",
  "names": ["init", "initialState", "initialData", "responsiveDimensions", "sizeOptimization", "autoOrientation", "videoPreview", "aiMetadata", "initialState", "modifiedData", "reducer", "state", "action", "produce", "drafState", "type", "data", "set", "keys", "split", "value", "SettingsPage", "formatMessage", "useIntl", "toggleNotification", "useNotification", "put", "useFetchClient", "initialData", "modifiedData", "dispatch", "useReducer", "reducer", "initialState", "init", "data", "isLoading", "refetch", "useSettings", "isAIAvailable", "useAIAvailability", "React", "useEffect", "type", "isSaveButtonDisabled", "isEqual", "mutateAsync", "isSubmitting", "useMutation", "body", "onSuccess", "message", "id", "onError", "err", "console", "error", "handleSubmit", "e", "preventDefault", "handleChange", "target", "name", "value", "keys", "_jsx", "Page", "Loading", "_jsxs", "Main", "tabIndex", "Title", "getTrad", "defaultMessage", "form", "onSubmit", "Layouts", "Header", "title", "primaryAction", "Button", "disabled", "loading", "startIcon", "Check", "size", "subtitle", "Content", "Root", "Flex", "direction", "alignItems", "gap", "Box", "background", "padding", "shadow", "hasRadius", "Grid", "Item", "col", "s", "color", "Sparkle", "Typography", "variant", "tag", "paddingTop", "textColor", "justifyContent", "Field", "width", "Toggle", "checked", "aiMetadata", "offLabel", "onLabel", "onChange", "hint", "Label", "responsiveDimensions", "Hint", "sizeOptimization", "autoOrientation", "ProtectedSettingsPage", "Protect", "permissions", "PERMISSIONS", "settings"]
}
