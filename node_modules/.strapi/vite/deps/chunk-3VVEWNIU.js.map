{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/useElementOnScreen.ts", "../../../@strapi/admin/admin/src/components/Layouts/ActionLayout.tsx", "../../../@strapi/admin/admin/src/components/Layouts/ContentLayout.tsx", "../../../@strapi/admin/admin/src/components/Layouts/GridLayout.tsx", "../../../@strapi/admin/admin/src/components/Layouts/HeaderLayout.tsx", "../../../@strapi/admin/admin/src/components/Layouts/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\n/**\n * Hook that returns a ref to an element and a boolean indicating if the element is in the viewport\n * or in the element specified in `options.root`.\n */\nconst useElementOnScreen = <TElement extends HTMLElement = HTMLElement>(\n  onVisiblityChange: (isVisible: boolean) => void,\n  options?: IntersectionObserverInit\n): React.RefObject<TElement> => {\n  const containerRef = React.useRef<TElement>(null);\n\n  React.useEffect(() => {\n    const containerEl = containerRef.current;\n    const observer = new IntersectionObserver(([entry]) => {\n      onVisiblityChange(entry.isIntersecting);\n    }, options);\n\n    if (containerEl) {\n      observer.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerEl) {\n        observer.disconnect();\n      }\n    };\n  }, [containerRef, options, onVisiblityChange]);\n\n  return containerRef;\n};\n\nexport { useElementOnScreen };\n", "import * as React from 'react';\n\nimport { Flex } from '@strapi/design-system';\n\nimport { RESPONSIVE_DEFAULT_SPACING } from '../../constants/theme';\n\ninterface ActionLayoutProps {\n  endActions?: React.ReactNode;\n  startActions?: React.ReactNode;\n}\n\nconst ActionLayout = ({ startActions, endActions }: ActionLayoutProps) => {\n  if (!startActions && !endActions) {\n    return null;\n  }\n\n  return (\n    <Flex\n      justifyContent=\"space-between\"\n      alignItems=\"flex-start\"\n      paddingBottom={4}\n      paddingLeft={RESPONSIVE_DEFAULT_SPACING}\n      paddingRight={RESPONSIVE_DEFAULT_SPACING}\n    >\n      <Flex gap={2} wrap=\"wrap\">\n        {startActions}\n      </Flex>\n\n      <Flex gap={2} shrink={0} wrap=\"wrap\">\n        {endActions}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { ActionLayout, type ActionLayoutProps };\n", "import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\n\nimport { RESPONSIVE_DEFAULT_SPACING } from '../../constants/theme';\n\ninterface ContentLayoutProps {\n  children: React.ReactNode;\n}\n\nconst ContentLayout = ({ children }: ContentLayoutProps) => {\n  return (\n    <Box paddingLeft={RESPONSIVE_DEFAULT_SPACING} paddingRight={RESPONSIVE_DEFAULT_SPACING}>\n      {children}\n    </Box>\n  );\n};\n\nexport { ContentLayout, type ContentLayoutProps };\n", "import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\ninterface GridColSize {\n  S: number;\n  M: number;\n}\n\nconst GridColSize = {\n  S: 180,\n  M: 250,\n};\n\ntype Size = keyof GridColSize;\n\nconst StyledGrid = styled(Box)<{ $size: Size }>`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${({ $size }: { $size: Size }) => `${GridColSize[$size]}px`}, 1fr)\n  );\n  grid-gap: ${({ theme }) => theme.spaces[4]};\n`;\n\ninterface GridLayoutProps {\n  size: Size;\n  children: React.ReactNode;\n}\n\nconst GridLayout = ({ size, children }: GridLayoutProps) => {\n  return <StyledGrid $size={size}>{children}</StyledGrid>;\n};\n\nexport { GridLayout };\nexport type { GridLayoutProps, GridColSize };\n", "import * as React from 'react';\n\nimport { Box, Flex, Typography, TypographyProps, useCallbackRef } from '@strapi/design-system';\n\nimport { HEIGHT_TOP_NAVIGATION, RESPONSIVE_DEFAULT_SPACING } from '../../constants/theme';\nimport { useElementOnScreen } from '../../hooks/useElementOnScreen';\n\n/* -------------------------------------------------------------------------------------------------\n * BaseHeaderLayout\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseHeaderLayoutProps extends Omit<TypographyProps<'div'>, 'tag'> {\n  navigationAction?: React.ReactNode;\n  primaryAction?: React.ReactNode;\n  secondaryAction?: React.ReactNode;\n  subtitle?: React.ReactNode;\n  sticky?: boolean;\n  width?: number;\n}\n\nconst BaseHeaderLayout = React.forwardRef<HTMLDivElement, BaseHeaderLayoutProps>(\n  (\n    { navigationAction, primaryAction, secondaryAction, subtitle, title, sticky, width, ...props },\n    ref\n  ) => {\n    const isSubtitleString = typeof subtitle === 'string';\n\n    if (sticky) {\n      return (\n        <Box\n          display={{\n            initial: 'none',\n            large: 'flex',\n          }}\n          paddingLeft={6}\n          paddingRight={6}\n          paddingTop={2}\n          paddingBottom={2}\n          position=\"fixed\"\n          top={0}\n          background=\"neutral0\"\n          shadow=\"tableShadow\"\n          width={`${width}px`}\n          zIndex={2}\n          minHeight={HEIGHT_TOP_NAVIGATION}\n          data-strapi-header-sticky\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" wrap=\"wrap\" width=\"100%\">\n            <Flex>\n              {navigationAction && <Box paddingRight={3}>{navigationAction}</Box>}\n              <Box>\n                <Typography variant=\"beta\" tag=\"h1\" {...props}>\n                  {title}\n                </Typography>\n                {isSubtitleString ? (\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {subtitle}\n                  </Typography>\n                ) : (\n                  subtitle\n                )}\n              </Box>\n              {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\n            </Flex>\n            <Flex>{primaryAction ? <Box paddingLeft={2}>{primaryAction}</Box> : undefined}</Flex>\n          </Flex>\n        </Box>\n      );\n    }\n\n    return (\n      <Box\n        ref={ref}\n        paddingLeft={RESPONSIVE_DEFAULT_SPACING}\n        paddingRight={RESPONSIVE_DEFAULT_SPACING}\n        paddingBottom={{\n          initial: 4,\n          large: 8,\n        }}\n        paddingTop={{\n          initial: 4,\n          large: navigationAction ? 6 : 8,\n        }}\n        background=\"neutral100\"\n        data-strapi-header\n      >\n        <Flex direction=\"column\" alignItems=\"initial\" gap={2}>\n          {navigationAction}\n          <Flex justifyContent=\"space-between\" wrap=\"wrap\" gap={4}>\n            <Flex minWidth={0}>\n              <Typography tag=\"h1\" variant=\"alpha\" {...props}>\n                {title}\n              </Typography>\n              {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\n            </Flex>\n            {primaryAction}\n          </Flex>\n        </Flex>\n        {isSubtitleString ? (\n          <Typography\n            variant=\"epsilon\"\n            textColor=\"neutral600\"\n            tag=\"p\"\n            paddingTop={{ initial: 4, large: 0 }}\n          >\n            {subtitle}\n          </Typography>\n        ) : (\n          subtitle\n        )}\n      </Box>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderLayout\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderLayoutProps extends BaseHeaderLayoutProps {}\n\nconst HeaderLayout = (props: HeaderLayoutProps) => {\n  const baseHeaderLayoutRef = React.useRef<HTMLDivElement>(null);\n  const [headerSize, setHeaderSize] = React.useState<DOMRect | null>(null);\n  const [isVisible, setIsVisible] = React.useState(true);\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(setIsVisible, {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0,\n  });\n\n  useResizeObserver([containerRef], () => {\n    if (containerRef.current) {\n      const newSize = containerRef.current.getBoundingClientRect();\n      setHeaderSize((prevSize) => {\n        // Only update if size actually changed\n        if (!prevSize || prevSize.height !== newSize.height || prevSize.width !== newSize.width) {\n          return newSize;\n        }\n        return prevSize;\n      });\n    }\n  });\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      setHeaderSize(containerRef.current.getBoundingClientRect());\n    }\n  }, [containerRef]);\n\n  return (\n    <div ref={containerRef}>\n      <div style={{ height: headerSize?.height }}>\n        {isVisible && <BaseHeaderLayout ref={baseHeaderLayoutRef} {...props} />}\n      </div>\n\n      {!isVisible && <BaseHeaderLayout {...props} sticky width={headerSize?.width} />}\n    </div>\n  );\n};\n\nHeaderLayout.displayName = 'HeaderLayout';\n\n/**\n * useResizeObserver: hook that observes the size of an element and calls a callback when it changes.\n */\nconst useResizeObserver = (\n  sources: React.RefObject<HTMLElement> | React.RefObject<HTMLElement>[],\n  onResize: ResizeObserverCallback\n) => {\n  const handleResize = useCallbackRef(onResize);\n\n  React.useLayoutEffect(() => {\n    const resizeObs = new ResizeObserver(handleResize);\n\n    if (Array.isArray(sources)) {\n      sources.forEach((source) => {\n        if (source.current) {\n          resizeObs.observe(source.current);\n        }\n      });\n    } else if (sources.current) {\n      resizeObs.observe(sources.current);\n    }\n\n    return () => {\n      resizeObs.disconnect();\n    };\n  }, [sources, handleResize]);\n};\n\nexport type { HeaderLayoutProps, BaseHeaderLayoutProps };\nexport { HeaderLayout, BaseHeaderLayout };\n", "import * as React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { RESPONSIVE_DEFAULT_SPACING } from '../../constants/theme';\n\nimport { ActionLayout } from './ActionLayout';\nimport { ContentLayout } from './ContentLayout';\nimport { GridLayout, GridLayoutProps } from './GridLayout';\nimport { HeaderLayout, BaseHeaderLayout } from './HeaderLayout';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  sideNav?: React.ReactNode;\n}\n\nconst GridContainer = styled(Box)<{ $hasSideNav: boolean }>`\n  max-width: 100%;\n  display: grid;\n  grid-template-columns: 1fr;\n  padding: 0;\n\n  ${({ theme }) => theme.breakpoints.medium} {\n    grid-template-columns: ${({ $hasSideNav }) => ($hasSideNav ? `auto 1fr` : '1fr')};\n  }\n`;\n\nconst SideNavContainer = styled(Flex)`\n  display: none;\n  background: ${({ theme }) => theme.colors.neutral0};\n\n  ${({ theme }) => theme.breakpoints.medium} {\n    display: block;\n    box-shadow: none;\n    transform: none;\n  }\n`;\n\nconst OverflowingItem = styled(Box)`\n  overflow-x: hidden;\n\n  ${({ theme }) => theme.breakpoints.medium} {\n    transform: none;\n    width: auto;\n  }\n`;\n\nconst RootLayout = ({ sideNav, children }: LayoutProps) => (\n  <GridContainer $hasSideNav={Boolean(sideNav)}>\n    {sideNav && <SideNavContainer>{sideNav}</SideNavContainer>}\n    <OverflowingItem paddingBottom={RESPONSIVE_DEFAULT_SPACING} data-strapi-main-content>\n      {children}\n    </OverflowingItem>\n  </GridContainer>\n);\n\nconst Layouts = {\n  Root: RootLayout,\n  Header: HeaderLayout,\n  BaseHeader: BaseHeaderLayout,\n  Grid: GridLayout,\n  Action: ActionLayout,\n  Content: ContentLayout,\n};\n\nexport { Layouts, type LayoutProps, type GridLayoutProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,qBAAqB,CACzBC,mBACAC,YAAAA;AAEA,QAAMC,eAAqBC,aAAiB,IAAA;AAE5CC,EAAMC,gBAAU,MAAA;AACd,UAAMC,cAAcJ,aAAaK;AACjC,UAAMC,WAAW,IAAIC,qBAAqB,CAAC,CAACC,KAAM,MAAA;AAChDV,wBAAkBU,MAAMC,cAAc;OACrCV,OAAAA;AAEH,QAAIK,aAAa;AACfE,eAASI,QAAQV,aAAaK,OAAO;IACvC;AAEA,WAAO,MAAA;AACL,UAAID,aAAa;AACfE,iBAASK,WAAU;MACrB;IACF;KACC;IAACX;IAAcD;IAASD;EAAkB,CAAA;AAE7C,SAAOE;AACT;;;;;;;;;ACnBA,IAAMY,eAAe,CAAC,EAAEC,cAAcC,WAAU,MAAqB;AACnE,MAAI,CAACD,gBAAgB,CAACC,YAAY;AAChC,WAAO;EACT;AAEA,aACEC,yBAACC,MAAAA;IACCC,gBAAe;IACfC,YAAW;IACXC,eAAe;IACfC,aAAaC;IACbC,cAAcD;;UAEdE,wBAACP,MAAAA;QAAKQ,KAAK;QAAGC,MAAK;QAChBZ,UAAAA;;UAGHU,wBAACP,MAAAA;QAAKQ,KAAK;QAAGE,QAAQ;QAAGD,MAAK;QAC3BX,UAAAA;;;;AAIT;;;;;ACvBA,IAAMa,gBAAgB,CAAC,EAAEC,SAAQ,MAAsB;AACrD,aACEC,yBAACC,KAAAA;IAAIC,aAAaC;IAA4BC,cAAcD;IACzDJ;;AAGP;;;;;ACNA,IAAMM,cAAc;EAClBC,GAAG;EACHC,GAAG;AACL;AAIA,IAAMC,aAAaC,GAAOC,GAAAA;;;;aAIb,CAAC,EAAEC,MAAK,MAAwB,GAAGN,YAAYM,KAAAA,CAAM,IAAI;;cAExD,CAAC,EAAEC,MAAK,MAAOA,MAAMC,OAAO,CAAA,CAAE;;AAQ5C,IAAMC,aAAa,CAAC,EAAEC,MAAMC,SAAQ,MAAmB;AACrD,aAAOC,yBAACT,YAAAA;IAAWG,OAAOI;IAAOC;;AACnC;;;;;ACbME,IAAAA,mBAAyBC,kBAC7B,CACE,EAAEC,kBAAkBC,eAAeC,iBAAiBC,UAAUC,OAAOC,QAAQC,OAAO,GAAGC,MAAAA,GACvFC,QAAAA;AAEA,QAAMC,mBAAmB,OAAON,aAAa;AAE7C,MAAIE,QAAQ;AACV,eACEK,yBAACC,KAAAA;MACCC,SAAS;QACPC,SAAS;QACTC,OAAO;MACT;MACAC,aAAa;MACbC,cAAc;MACdC,YAAY;MACZC,eAAe;MACfC,UAAS;MACTC,KAAK;MACLC,YAAW;MACXC,QAAO;MACPhB,OAAO,GAAGA,KAAM;MAChBiB,QAAQ;MACRC,WAAWC;MACXC,6BAAyB;MAEzB,cAAAC,0BAACC,MAAAA;QAAKC,YAAW;QAASC,gBAAe;QAAgBC,MAAK;QAAOzB,OAAM;;cACzEqB,0BAACC,MAAAA;;cACE5B,wBAAoBU,yBAACC,KAAAA;gBAAIK,cAAc;gBAAIhB,UAAAA;;kBAC5C2B,0BAAChB,KAAAA;;sBACCD,yBAACsB,YAAAA;oBAAWC,SAAQ;oBAAOC,KAAI;oBAAM,GAAG3B;oBACrCH,UAAAA;;kBAEFK,uBACCC,yBAACsB,YAAAA;oBAAWC,SAAQ;oBAAKE,WAAU;oBAChChC,UAAAA;kBAGHA,CAAAA,IAAAA;;;cAGHD,sBAAkBQ,yBAACC,KAAAA;gBAAII,aAAa;gBAAIb,UAAAA;cAAyB,CAAA,IAAA;;;cAEpEQ,yBAACkB,MAAAA;YAAM3B,UAAAA,oBAAgBS,yBAACC,KAAAA;cAAII,aAAa;cAAId,UAAAA;YAAuBmC,CAAAA,IAAAA;;;;;EAI5E;AAEA,aACET,0BAAChB,KAAAA;IACCH;IACAO,aAAasB;IACbrB,cAAcqB;IACdnB,eAAe;MACbL,SAAS;MACTC,OAAO;IACT;IACAG,YAAY;MACVJ,SAAS;MACTC,OAAOd,mBAAmB,IAAI;IAChC;IACAqB,YAAW;IACXiB,sBAAkB;;UAElBX,0BAACC,MAAAA;QAAKW,WAAU;QAASV,YAAW;QAAUW,KAAK;;UAChDxC;cACD2B,0BAACC,MAAAA;YAAKE,gBAAe;YAAgBC,MAAK;YAAOS,KAAK;;kBACpDb,0BAACC,MAAAA;gBAAKa,UAAU;;sBACd/B,yBAACsB,YAAAA;oBAAWE,KAAI;oBAAKD,SAAQ;oBAAS,GAAG1B;oBACtCH,UAAAA;;kBAEFF,sBAAkBQ,yBAACC,KAAAA;oBAAII,aAAa;oBAAIb,UAAAA;kBAAyB,CAAA,IAAA;;;cAEnED;;;;;MAGJQ,uBACCC,yBAACsB,YAAAA;QACCC,SAAQ;QACRE,WAAU;QACVD,KAAI;QACJjB,YAAY;UAAEJ,SAAS;UAAGC,OAAO;QAAE;QAElCX,UAAAA;MAGHA,CAAAA,IAAAA;;;AAIR,CAAA;AASF,IAAMuC,eAAe,CAACnC,UAAAA;AACpB,QAAMoC,sBAA4BC,cAAuB,IAAA;AACzD,QAAM,CAACC,YAAYC,aAAAA,IAAuBC,gBAAyB,IAAA;AACnE,QAAM,CAACC,WAAWC,YAAAA,IAAsBF,gBAAS,IAAA;AAEjD,QAAMG,eAAeC,mBAAmCF,cAAc;IACpEG,MAAM;IACNC,YAAY;IACZC,WAAW;EACb,CAAA;AAEAC,oBAAkB;IAACL;KAAe,MAAA;AAChC,QAAIA,aAAaM,SAAS;AACxB,YAAMC,UAAUP,aAAaM,QAAQE,sBAAqB;AAC1DZ,oBAAc,CAACa,aAAAA;AAEb,YAAI,CAACA,YAAYA,SAASC,WAAWH,QAAQG,UAAUD,SAASrD,UAAUmD,QAAQnD,OAAO;AACvF,iBAAOmD;QACT;AACA,eAAOE;MACT,CAAA;IACF;EACF,CAAA;AAEAE,EAAMC,iBAAU,MAAA;AACd,QAAIZ,aAAaM,SAAS;AACxBV,oBAAcI,aAAaM,QAAQE,sBAAqB,CAAA;IAC1D;KACC;IAACR;EAAa,CAAA;AAEjB,aACEvB,0BAACoC,OAAAA;IAAIvD,KAAK0C;;UACRxC,yBAACqD,OAAAA;QAAIC,OAAO;UAAEJ,QAAQf,yCAAYe;QAAO;QACtCZ,UAAAA,iBAAatC,yBAACZ,kBAAAA;UAAiBU,KAAKmC;UAAsB,GAAGpC;;;MAG/D,CAACyC,iBAAatC,yBAACZ,kBAAAA;QAAkB,GAAGS;QAAOF,QAAM;QAACC,OAAOuC,yCAAYvC;;;;AAG5E;AAEAoC,aAAauB,cAAc;AAK3B,IAAMV,oBAAoB,CACxBW,SACAC,aAAAA;AAEA,QAAMC,eAAeC,eAAeF,QAAAA;AAEpCN,EAAMS,uBAAgB,MAAA;AACpB,UAAMC,YAAY,IAAIC,eAAeJ,YAAAA;AAErC,QAAIK,MAAMC,QAAQR,OAAU,GAAA;AAC1BA,cAAQS,QAAQ,CAACC,WAAAA;AACf,YAAIA,OAAOpB,SAAS;AAClBe,oBAAUM,QAAQD,OAAOpB,OAAO;QAClC;MACF,CAAA;eACSU,QAAQV,SAAS;AAC1Be,gBAAUM,QAAQX,QAAQV,OAAO;IACnC;AAEA,WAAO,MAAA;AACLe,gBAAUO,WAAU;IACtB;KACC;IAACZ;IAASE;EAAa,CAAA;AAC5B;;;AC7KA,IAAMW,gBAAgBC,GAAOC,GAAAA;;;;;;IAMzB,CAAC,EAAEC,MAAK,MAAOA,MAAMC,YAAYC,MAAM;6BACd,CAAC,EAAEC,YAAW,MAAQA,cAAc,aAAa,KAAO;;;AAIrF,IAAMC,mBAAmBN,GAAOO,IAAAA;;gBAEhB,CAAC,EAAEL,MAAK,MAAOA,MAAMM,OAAOC,QAAQ;;IAEhD,CAAC,EAAEP,MAAK,MAAOA,MAAMC,YAAYC,MAAM;;;;;;AAO3C,IAAMM,kBAAkBV,GAAOC,GAAAA;;;IAG3B,CAAC,EAAEC,MAAK,MAAOA,MAAMC,YAAYC,MAAM;;;;;AAM3C,IAAMO,aAAa,CAAC,EAAEC,SAASC,SAAQ,UACrCC,0BAACf,eAAAA;EAAcM,aAAaU,QAAQH,OAAAA;;IACjCA,eAAWI,yBAACV,kBAAAA;MAAkBM,UAAAA;;QAC/BI,yBAACN,iBAAAA;MAAgBO,eAAeC;MAA4BC,4BAAwB;MACjFN;;;;AAKP,IAAMO,UAAU;EACdC,MAAMV;EACNW,QAAQC;EACRC,YAAYC;EACZC,MAAMC;EACNC,QAAQC;EACRC,SAASC;AACX;",
  "names": ["useElementOnScreen", "onVisiblityChange", "options", "containerRef", "useRef", "React", "useEffect", "containerEl", "current", "observer", "IntersectionObserver", "entry", "isIntersecting", "observe", "disconnect", "ActionLayout", "startActions", "endActions", "_jsxs", "Flex", "justifyContent", "alignItems", "paddingBottom", "paddingLeft", "RESPONSIVE_DEFAULT_SPACING", "paddingRight", "_jsx", "gap", "wrap", "shrink", "ContentLayout", "children", "_jsx", "Box", "paddingLeft", "RESPONSIVE_DEFAULT_SPACING", "paddingRight", "GridColSize", "S", "M", "StyledGrid", "styled", "Box", "$size", "theme", "spaces", "GridLayout", "size", "children", "_jsx", "BaseHeaderLayout", "forwardRef", "navigationAction", "primaryAction", "secondaryAction", "subtitle", "title", "sticky", "width", "props", "ref", "isSubtitleString", "_jsx", "Box", "display", "initial", "large", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "position", "top", "background", "shadow", "zIndex", "minHeight", "HEIGHT_TOP_NAVIGATION", "data-strapi-header-sticky", "_jsxs", "Flex", "alignItems", "justifyContent", "wrap", "Typography", "variant", "tag", "textColor", "undefined", "RESPONSIVE_DEFAULT_SPACING", "data-strapi-header", "direction", "gap", "minWidth", "HeaderLayout", "baseHeaderLayoutRef", "useRef", "headerSize", "setHeaderSize", "useState", "isVisible", "setIsVisible", "containerRef", "useElementOnScreen", "root", "rootMargin", "threshold", "useResizeObserver", "current", "newSize", "getBoundingClientRect", "prevSize", "height", "React", "useEffect", "div", "style", "displayName", "sources", "onResize", "handleResize", "useCallbackRef", "useLayoutEffect", "resizeObs", "ResizeObserver", "Array", "isArray", "forEach", "source", "observe", "disconnect", "GridContainer", "styled", "Box", "theme", "breakpoints", "medium", "$hasSideNav", "SideNavContainer", "Flex", "colors", "neutral0", "OverflowingItem", "RootLayout", "sideNav", "children", "_jsxs", "Boolean", "_jsx", "paddingBottom", "RESPONSIVE_DEFAULT_SPACING", "data-strapi-main-content", "Layouts", "Root", "Header", "HeaderLayout", "BaseHeader", "BaseHeaderLayout", "Grid", "GridLayout", "Action", "ActionLayout", "Content", "ContentLayout"]
}
