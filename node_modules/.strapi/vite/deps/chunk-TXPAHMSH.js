import {
  useTracking
} from "./chunk-CHBEAGYH.js";
import {
  useGetGuidedTourMetaQuery,
  useInitQuery
} from "./chunk-6RQQFGOL.js";
import {
  createContext
} from "./chunk-ZC6UOKQ5.js";
import {
  fn
} from "./chunk-QOUV5O5E.js";
import {
  Box,
  Button,
  Flex,
  Link,
  LinkButton,
  Popover,
  Portal$1,
  Typography,
  message_default,
  useIntl
} from "./chunk-WNDVG6TF.js";
import {
  NavLink,
  useParams
} from "./chunk-RKN75MQZ.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt,
  nt
} from "./chunk-3LBZKDTB.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/useMediaQuery.mjs
var React = __toESM(require_react(), 1);
var useMediaQuery = (query) => {
  const cleanQuery = query.replace("@media", "").trim();
  const [matches, setMatches] = React.useState(() => window.matchMedia(cleanQuery).matches);
  React.useEffect(() => {
    const mediaQuery = window.matchMedia(cleanQuery);
    const handler = (e) => setMatches(e.matches);
    mediaQuery.addEventListener("change", handler);
    return () => mediaQuery.removeEventListener("change", handler);
  }, [
    cleanQuery
  ]);
  return matches;
};
var useIsDesktop = () => {
  const theme = nt();
  return useMediaQuery(theme.breakpoints.large);
};
var useIsTablet = () => {
  const theme = nt();
  const isTabletOrAbove = useMediaQuery(theme.breakpoints.medium);
  const isDesktop = useMediaQuery(theme.breakpoints.large);
  return isTabletOrAbove && !isDesktop;
};
var useIsMobile = () => {
  const theme = nt();
  return !useMediaQuery(theme.breakpoints.medium);
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/utils/constants.mjs
var GUIDED_TOUR_REQUIRED_ACTIONS = {
  contentTypeBuilder: {
    createSchema: "didCreateContentTypeSchema",
    addField: "didAddFieldToSchema"
  },
  contentManager: {
    createContent: "didCreateContent"
  },
  apiTokens: {
    createToken: "didCreateApiToken",
    copyToken: "didCopyApiToken"
  },
  strapiCloud: {}
};

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/useAIAvailability.mjs
var useAIAvailability = () => {
  var _a, _b;
  const isAiEnabled = ((_a = window.strapi.ai) == null ? void 0 : _a.enabled) !== false;
  const isEE = (_b = window.strapi) == null ? void 0 : _b.isEE;
  return !!isEE && isAiEnabled;
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Tours.mjs
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var React4 = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Context.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/usePersistentState.mjs
var import_react = __toESM(require_react(), 1);
var usePersistentState = (key, defaultValue) => {
  const [value, setValue] = (0, import_react.useState)(() => {
    const stickyValue = window.localStorage.getItem(key);
    if (stickyValue !== null) {
      try {
        return JSON.parse(stickyValue);
      } catch {
        return stickyValue;
      }
    }
    return defaultValue;
  });
  (0, import_react.useEffect)(() => {
    window.localStorage.setItem(key, JSON.stringify(value));
  }, [
    key,
    value
  ]);
  return [
    value,
    setValue
  ];
};
var useScopedPersistentState = (key, defaultValue) => {
  const { data: initData } = useInitQuery();
  const { uuid } = initData ?? {};
  const namespacedKey = `${key}:${uuid}`;
  return usePersistentState(namespacedKey, defaultValue);
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/utils/migrations.mjs
var migrateTours = (storedTourState) => {
  const storedTourNames = Object.keys(storedTourState.tours);
  const currentTourNames = Object.keys(tours);
  return fn(storedTourState, (draft) => {
    currentTourNames.forEach((tourName) => {
      if (!storedTourNames.includes(tourName)) {
        draft.tours[tourName] = {
          currentStep: 0,
          isCompleted: false,
          tourType: void 0
        };
      }
    });
    storedTourNames.forEach((tourName) => {
      if (!currentTourNames.includes(tourName)) {
        delete draft.tours[tourName];
      }
    });
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Context.mjs
var [GuidedTourProviderImpl, useGuidedTour] = createContext("GuidedTour");
var getInitialTourState = (tours2) => {
  return Object.keys(tours2).reduce((acc, tourName) => {
    acc[tourName] = {
      currentStep: 0,
      isCompleted: false,
      tourType: void 0
    };
    return acc;
  }, {});
};
var getCompletedTours = (tours2) => {
  return Object.keys(tours2).filter((tourName) => tours2[tourName].isCompleted);
};
var areAllToursCompleted = (tours2) => Object.values(tours2).every((t) => t.isCompleted);
function reducer(state, action) {
  return fn(state, (draft) => {
    if (action.type === "next_step") {
      const currentStep = draft.tours[action.payload].currentStep;
      const tourLength = tours[action.payload]._meta.totalStepCount;
      const nextStep = currentStep + 1;
      draft.tours[action.payload].currentStep = nextStep;
      draft.tours[action.payload].isCompleted = nextStep >= tourLength;
    }
    if (action.type === "previous_step") {
      const currentStep = draft.tours[action.payload].currentStep;
      if (currentStep <= 0) return;
      const previousStep = currentStep - 1;
      draft.tours[action.payload].currentStep = previousStep;
    }
    if (action.type === "skip_tour") {
      draft.tours[action.payload].isCompleted = true;
    }
    if (action.type === "set_completed_actions") {
      draft.completedActions = [
        .../* @__PURE__ */ new Set([
          ...draft.completedActions,
          ...action.payload
        ])
      ];
    }
    if (action.type === "remove_completed_action") {
      draft.completedActions = draft.completedActions.filter((completedAction) => completedAction !== action.payload);
    }
    if (action.type === "skip_all_tours") {
      draft.enabled = false;
    }
    if (action.type === "set_hidden") {
      draft.hidden = action.payload;
    }
    if (action.type === "reset_all_tours") {
      draft.enabled = true;
      draft.tours = getInitialTourState(tours);
      draft.completedActions = [];
    }
    if (action.type === "go_to_step") {
      draft.tours[action.payload.tourName].currentStep = action.payload.step;
    }
    if (action.type === "set_tour_type") {
      const { tourName, tourType } = action.payload;
      const currentTour = draft.tours[tourName];
      if (currentTour.tourType && currentTour.tourType !== tourType && !currentTour.isCompleted) {
        currentTour.currentStep = 0;
      }
      currentTour.tourType = tourType;
    }
  });
}
var STORAGE_KEY = "STRAPI_GUIDED_TOUR";
var GuidedTourContext = ({ children, enabled = true }) => {
  const isDesktop = useIsDesktop();
  const { trackUsage } = useTracking();
  const [storedTours, setStoredTours] = usePersistentState(STORAGE_KEY, {
    tours: getInitialTourState(tours),
    enabled,
    hidden: !isDesktop,
    completedActions: []
  });
  const migratedTourState = migrateTours(storedTours);
  const [state, dispatch] = React2.useReducer(reducer, migratedTourState);
  React2.useEffect(() => {
    dispatch({
      type: "set_hidden",
      payload: !isDesktop
    });
  }, [
    isDesktop
  ]);
  React2.useEffect(() => {
    setStoredTours(state);
  }, [
    state,
    setStoredTours
  ]);
  const currentAllCompletedState = areAllToursCompleted(state.tours);
  const previousAllCompletedStateRef = React2.useRef(currentAllCompletedState);
  React2.useEffect(() => {
    const previousAllCompletedState = previousAllCompletedStateRef.current;
    if (!previousAllCompletedState && currentAllCompletedState) {
      trackUsage("didCompleteGuidedTour", {
        name: "all"
      });
    }
    previousAllCompletedStateRef.current = currentAllCompletedState;
  }, [
    currentAllCompletedState,
    trackUsage
  ]);
  return (0, import_jsx_runtime.jsx)(GuidedTourProviderImpl, {
    state,
    dispatch,
    children
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Steps/ApiTokensSteps.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Steps/Step.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React3 = __toESM(require_react(), 1);
var StepCount = ({ tourName, displayedCurrentStep, displayedTourLength }) => {
  const state = useGuidedTour("GuidedTourPopover", (s) => s.state);
  const currentStep = displayedCurrentStep ?? state.tours[tourName].currentStep + 1;
  const displayedStepCount = displayedTourLength ?? tours[tourName]._meta.displayedStepCount;
  return (0, import_jsx_runtime2.jsx)(Typography, {
    variant: "omega",
    fontSize: "12px",
    children: (0, import_jsx_runtime2.jsx)(message_default, {
      id: "tours.stepCount",
      defaultMessage: "Step {currentStep} of {tourLength}",
      values: {
        currentStep,
        tourLength: displayedStepCount
      }
    })
  });
};
var GotItAction = ({ onClick }) => {
  return (0, import_jsx_runtime2.jsx)(Button, {
    onClick,
    children: (0, import_jsx_runtime2.jsx)(message_default, {
      id: "tours.gotIt",
      defaultMessage: "Got it"
    })
  });
};
var DefaultActions = ({ showSkip, showPrevious, to, tourName, onNextStep, onPreviousStep }) => {
  const { trackUsage } = useTracking();
  const dispatch = useGuidedTour("GuidedTourPopover", (s) => s.dispatch);
  const state = useGuidedTour("GuidedTourPopover", (s) => s.state);
  const currentStep = state.tours[tourName].currentStep + 1;
  const actualTourLength = tours[tourName]._meta.totalStepCount;
  const handleSkip = () => {
    trackUsage("didSkipGuidedTour", {
      name: tourName
    });
    dispatch({
      type: "skip_tour",
      payload: tourName
    });
  };
  const handleNextStep = () => {
    if (currentStep === actualTourLength) {
      trackUsage("didCompleteGuidedTour", {
        name: tourName
      });
    }
    if (onNextStep) {
      onNextStep();
    } else {
      dispatch({
        type: "next_step",
        payload: tourName
      });
    }
  };
  const handlePreviousStep = () => {
    if (onPreviousStep) {
      onPreviousStep();
    } else {
      dispatch({
        type: "previous_step",
        payload: tourName
      });
    }
  };
  return (0, import_jsx_runtime2.jsxs)(Flex, {
    gap: 2,
    children: [
      showSkip && (0, import_jsx_runtime2.jsx)(Button, {
        variant: "tertiary",
        onClick: handleSkip,
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          id: "tours.skip",
          defaultMessage: "Skip"
        })
      }),
      !showSkip && showPrevious && (0, import_jsx_runtime2.jsx)(Button, {
        variant: "tertiary",
        onClick: handlePreviousStep,
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          id: "tours.previous",
          defaultMessage: "Previous"
        })
      }),
      to ? (0, import_jsx_runtime2.jsx)(LinkButton, {
        tag: NavLink,
        to,
        onClick: handleNextStep,
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          id: "tours.next",
          defaultMessage: "Next"
        })
      }) : (0, import_jsx_runtime2.jsx)(Button, {
        onClick: handleNextStep,
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          id: "tours.next",
          defaultMessage: "Next"
        })
      })
    ]
  });
};
var ActionsContainer = dt(Flex)`
  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};
`;
var ContentContainer = dt(Box)`
  p {
    margin-top: ${({ theme }) => theme.spaces[5]};
  }
  ul {
    list-style-type: disc;
    padding-left: ${({ theme }) => theme.spaces[4]};
  }
`;
var PopoverArrow = dt(Popover.Arrow)`
  fill: ${({ theme }) => theme.colors.neutral0};
  transform: translateY(-16px) rotate(-90deg);
`;
var createStepComponents = (tourName) => ({
  Root: React3.forwardRef(({ withArrow = true, ...props }, ref) => {
    return (0, import_jsx_runtime2.jsxs)(Popover.Content, {
      ref,
      "aria-labelledby": "guided-tour-title",
      side: "top",
      align: "center",
      style: {
        border: "none"
      },
      onClick: (e) => e.stopPropagation(),
      ...props,
      children: [
        withArrow && (0, import_jsx_runtime2.jsx)(PopoverArrow, {
          asChild: true,
          children: (0, import_jsx_runtime2.jsx)("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            width: "23",
            height: "25",
            viewBox: "0 0 23 25",
            fill: "none",
            children: (0, import_jsx_runtime2.jsx)("path", {
              d: "M11 24.5L1.82843 15.3284C0.266332 13.7663 0.26633 11.2337 1.82843 9.67157L11 0.5L23 12.5L11 24.5Z"
            })
          })
        }),
        (0, import_jsx_runtime2.jsx)(Flex, {
          width: "360px",
          direction: "column",
          alignItems: "start",
          children: props.children
        })
      ]
    });
  }),
  Title: (props) => {
    return (0, import_jsx_runtime2.jsx)(Box, {
      paddingTop: 5,
      paddingLeft: 5,
      paddingRight: 5,
      paddingBottom: 1,
      width: "100%",
      children: "children" in props ? props.children : (0, import_jsx_runtime2.jsx)(Typography, {
        tag: "h1",
        id: "guided-tour-title",
        variant: "omega",
        fontWeight: "bold",
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          id: props.id,
          defaultMessage: props.defaultMessage
        })
      })
    });
  },
  Content: (props) => {
    const { formatMessage } = useIntl();
    let content = "";
    if (!("children" in props)) {
      content = formatMessage({
        id: props.id,
        defaultMessage: props.defaultMessage
      });
    }
    return (0, import_jsx_runtime2.jsx)(Box, {
      paddingBottom: 5,
      paddingLeft: 5,
      paddingRight: 5,
      width: "100%",
      children: "children" in props ? props.children : (0, import_jsx_runtime2.jsx)(ContentContainer, {
        children: (0, import_jsx_runtime2.jsx)(Typography, {
          tag: "div",
          variant: "omega",
          dangerouslySetInnerHTML: {
            __html: content
          }
        })
      })
    });
  },
  Actions: ({ showStepCount = true, showPrevious = true, showSkip = false, to, children, ...flexProps }) => {
    return (0, import_jsx_runtime2.jsx)(ActionsContainer, {
      width: "100%",
      padding: 3,
      paddingLeft: 5,
      justifyContent: showStepCount ? "space-between" : "flex-end",
      ...flexProps,
      children: children ? children : (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
        children: [
          showStepCount && (0, import_jsx_runtime2.jsx)(StepCount, {
            tourName
          }),
          (0, import_jsx_runtime2.jsx)(DefaultActions, {
            tourName,
            showSkip,
            showPrevious: !showSkip && showPrevious,
            to
          })
        ]
      })
    });
  }
});

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Steps/ApiTokensSteps.mjs
var Introduction = ({ Step }) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
  side: "top",
  sideOffset: 32,
  withArrow: false,
  children: [
    (0, import_jsx_runtime3.jsx)(Step.Title, {
      id: "tours.apiTokens.Introduction.title",
      defaultMessage: "Last but not least, API tokens"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Content, {
      id: "tours.apiTokens.Introduction.content",
      defaultMessage: "Control API access with highly customizable permissions."
    }),
    (0, import_jsx_runtime3.jsx)(Step.Actions, {
      showSkip: true
    })
  ]
});
var ManageAPIToken = ({ Step }) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
  side: "bottom",
  align: "end",
  children: [
    (0, import_jsx_runtime3.jsx)(Step.Title, {
      id: "tours.apiTokens.ManageAPIToken.title",
      defaultMessage: "Manage an API token"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Content, {
      id: "tours.apiTokens.ManageAPIToken.content",
      defaultMessage: 'Click the "Pencil" icon to view and update an existing API token.'
    }),
    (0, import_jsx_runtime3.jsx)(Step.Actions, {})
  ]
});
var ViewAPIToken = ({ Step, dispatch }) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
  side: "bottom",
  align: "end",
  children: [
    (0, import_jsx_runtime3.jsx)(Step.Title, {
      id: "tours.apiTokens.ViewAPIToken.title",
      defaultMessage: "View API token"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Content, {
      id: "tours.apiTokens.ViewAPIToken.content",
      defaultMessage: 'Click the "View token" button to see your API token.'
    }),
    (0, import_jsx_runtime3.jsxs)(Step.Actions, {
      children: [
        (0, import_jsx_runtime3.jsx)(StepCount, {
          tourName: "apiTokens"
        }),
        (0, import_jsx_runtime3.jsx)(GotItAction, {
          onClick: () => dispatch({
            type: "next_step",
            payload: "apiTokens"
          })
        })
      ]
    })
  ]
});
var CopyAPIToken = ({ Step, dispatch }) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
  side: "bottom",
  align: "start",
  sideOffset: -5,
  children: [
    (0, import_jsx_runtime3.jsx)(Step.Title, {
      id: "tours.apiTokens.CopyAPIToken.title",
      defaultMessage: "Copy your new API token"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Content, {
      id: "tours.apiTokens.CopyAPIToken.content",
      defaultMessage: "Copy your API token",
      values: {
        spacer: (0, import_jsx_runtime3.jsx)(Box, {
          paddingTop: 2
        }),
        a: (msg) => (0, import_jsx_runtime3.jsx)(Link, {
          isExternal: true,
          href: "https://docs.strapi.io/cms/features/api-tokens#usage",
          children: msg
        })
      }
    }),
    (0, import_jsx_runtime3.jsxs)(Step.Actions, {
      children: [
        (0, import_jsx_runtime3.jsx)(StepCount, {
          tourName: "apiTokens"
        }),
        (0, import_jsx_runtime3.jsx)(GotItAction, {
          onClick: () => dispatch({
            type: "next_step",
            payload: "apiTokens"
          })
        })
      ]
    })
  ]
});
var Finish = ({ Step }) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
  side: "right",
  align: "start",
  children: [
    (0, import_jsx_runtime3.jsx)(Step.Title, {
      id: "tours.apiTokens.FinalStep.title",
      defaultMessage: "Congratulations, it's time to deploy your application!"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Content, {
      id: "tours.apiTokens.FinalStep.content",
      defaultMessage: "Your application is ready to be deployed and its content to be shared with the world!"
    }),
    (0, import_jsx_runtime3.jsx)(Step.Actions, {
      showPrevious: false,
      showStepCount: false,
      to: "/"
    })
  ]
});
var apiTokensSteps = [
  {
    name: "Introduction",
    content: Introduction
  },
  {
    name: "ManageAPIToken",
    content: ManageAPIToken
  },
  {
    name: "ViewAPIToken",
    content: ViewAPIToken
  },
  {
    name: "CopyAPIToken",
    content: CopyAPIToken
  },
  {
    name: "Finish",
    content: Finish,
    excludeFromStepCount: true,
    when: (completedActions) => completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.apiTokens.copyToken)
  }
];

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Steps/ContentManagerSteps.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var ContentManagerActions = ({ isActionRequired = false, ...props }) => {
  const { collectionType } = useParams();
  const state = useGuidedTour("ContentManagerActions", (s) => s.state);
  const dispatch = useGuidedTour("ContentManagerActions", (s) => s.dispatch);
  const isSingleType = collectionType === "single-types";
  const currentStepOffset = state.tours.contentManager.currentStep + 1;
  const displayedCurrentStep = (() => {
    if (isSingleType && currentStepOffset > collectionTypeSpecificSteps.length) {
      return currentStepOffset - collectionTypeSpecificSteps.length;
    }
    return currentStepOffset;
  })();
  const displayedTourLength = isSingleType ? tours.contentManager._meta.displayedStepCount - collectionTypeSpecificSteps.length : tours.contentManager._meta.displayedStepCount;
  const handleNextStep = () => {
    if (isSingleType && state.tours.contentManager.currentStep === 0) {
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentManager",
          step: collectionTypeSpecificSteps.length + 1
        }
      });
    } else {
      dispatch({
        type: "next_step",
        payload: "contentManager"
      });
    }
  };
  const handlePreviousStep = () => {
    if (isSingleType && // Check the currentStep is the step after the collection type specific steps
    state.tours.contentManager.currentStep === collectionTypeSpecificSteps.length + 1) {
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentManager",
          // Go to the step just before the collection type specific steps
          step: state.tours.contentManager.currentStep - collectionTypeSpecificSteps.length - 1
        }
      });
    } else {
      dispatch({
        type: "previous_step",
        payload: "contentManager"
      });
    }
  };
  if (isActionRequired) {
    return (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, {
      children: [
        (0, import_jsx_runtime4.jsx)(StepCount, {
          tourName: "contentManager",
          displayedCurrentStep,
          displayedTourLength
        }),
        (0, import_jsx_runtime4.jsx)(GotItAction, {
          onClick: handleNextStep
        })
      ]
    });
  }
  return (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, {
    children: [
      (0, import_jsx_runtime4.jsx)(StepCount, {
        tourName: "contentManager",
        displayedCurrentStep,
        displayedTourLength
      }),
      (0, import_jsx_runtime4.jsx)(DefaultActions, {
        tourName: "contentManager",
        onNextStep: handleNextStep,
        onPreviousStep: handlePreviousStep,
        ...props
      })
    ]
  });
};
var Introduction2 = ({ Step }) => {
  return (0, import_jsx_runtime4.jsxs)(Step.Root, {
    side: "top",
    sideOffset: 33,
    withArrow: false,
    children: [
      (0, import_jsx_runtime4.jsx)(Step.Title, {
        id: "tours.contentManager.Introduction.title",
        defaultMessage: "Content manager"
      }),
      (0, import_jsx_runtime4.jsx)(Step.Content, {
        id: "tours.contentManager.Introduction.content",
        defaultMessage: "Create and manage content from your collection types and single types."
      }),
      (0, import_jsx_runtime4.jsx)(Step.Actions, {
        children: (0, import_jsx_runtime4.jsx)(ContentManagerActions, {
          showSkip: true
        })
      })
    ]
  });
};
var CreateNewEntry = ({ Step }) => {
  return (0, import_jsx_runtime4.jsxs)(Step.Root, {
    side: "bottom",
    align: "end",
    children: [
      (0, import_jsx_runtime4.jsx)(Step.Title, {
        id: "tours.contentManager.CreateNewEntry.title",
        defaultMessage: "Create new entry"
      }),
      (0, import_jsx_runtime4.jsx)(Step.Content, {
        id: "tours.contentManager.CreateNewEntry.content",
        defaultMessage: 'Click the "Create new entry" button to create and publish a new entry for this collection type.'
      }),
      (0, import_jsx_runtime4.jsx)(Step.Actions, {
        children: (0, import_jsx_runtime4.jsx)(ContentManagerActions, {
          showPrevious: true
        })
      })
    ]
  });
};
var Fields = ({ Step }) => (0, import_jsx_runtime4.jsxs)(Step.Root, {
  sideOffset: -12,
  children: [
    (0, import_jsx_runtime4.jsx)(Step.Title, {
      id: "tours.contentManager.Fields.title",
      defaultMessage: "Fields"
    }),
    (0, import_jsx_runtime4.jsx)(Step.Content, {
      id: "tours.contentManager.Fields.content",
      defaultMessage: "First, fill in the fields you created in the Content-Type Builder."
    }),
    (0, import_jsx_runtime4.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime4.jsx)(ContentManagerActions, {
        showPrevious: true
      })
    })
  ]
});
var Publish = ({ Step }) => (0, import_jsx_runtime4.jsxs)(Step.Root, {
  side: "left",
  align: "center",
  children: [
    (0, import_jsx_runtime4.jsx)(Step.Title, {
      id: "tours.contentManager.Publish.title",
      defaultMessage: "Publish"
    }),
    (0, import_jsx_runtime4.jsx)(Step.Content, {
      id: "tours.contentManager.Publish.content",
      defaultMessage: 'Then click the "Publish" button to make your content available through the content API.'
    }),
    (0, import_jsx_runtime4.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime4.jsx)(ContentManagerActions, {
        isActionRequired: true
      })
    })
  ]
});
var Finish2 = ({ Step }) => (0, import_jsx_runtime4.jsxs)(Step.Root, {
  side: "right",
  children: [
    (0, import_jsx_runtime4.jsx)(Step.Title, {
      id: "tours.contentManager.FinalStep.title",
      defaultMessage: "Time to setup API tokens!"
    }),
    (0, import_jsx_runtime4.jsx)(Step.Content, {
      id: "tours.contentManager.FinalStep.content",
      defaultMessage: "Now that you've created and published an entry, let's setup an API token to manage access to your content."
    }),
    (0, import_jsx_runtime4.jsx)(Step.Actions, {
      showStepCount: false,
      showPrevious: false,
      to: "/settings/api-tokens"
    })
  ]
});
var collectionTypeSpecificSteps = [
  {
    name: "CreateNewEntry",
    content: CreateNewEntry
  }
];
var contentManagerSteps = [
  {
    name: "Introduction",
    when: (completedActions) => completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),
    content: Introduction2
  },
  ...collectionTypeSpecificSteps,
  {
    name: "Fields",
    content: Fields
  },
  {
    name: "Publish",
    content: Publish
  },
  {
    name: "Finish",
    content: Finish2,
    excludeFromStepCount: true,
    when: (completedActions) => completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentManager.createContent)
  }
];

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Steps/ContentTypeBuilderSteps.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var ContentTypeBuilderActions = ({ ...props }) => {
  const state = useGuidedTour("ContentTypeBuilderActions", (s) => s.state);
  const dispatch = useGuidedTour("ContentTypeBuilderActions", (s) => s.dispatch);
  const isAIEnabled = useAIAvailability();
  const currentStepOffset = state.tours.contentTypeBuilder.currentStep + 1;
  const displayedCurrentStep = (() => {
    if (!isAIEnabled && currentStepOffset > contentTypeBuilderStepsAI.length) {
      return currentStepOffset - contentTypeBuilderStepsAI.length;
    } else if (isAIEnabled && currentStepOffset > contentTypeBuilderStepsNoAI.length) {
      return currentStepOffset - contentTypeBuilderStepsNoAI.length;
    }
    return currentStepOffset;
  })();
  const displayedTourLength = isAIEnabled ? tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsNoAI.length : tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsAI.length;
  const handleNextStep = () => {
    const currentStep = state.tours.contentTypeBuilder.currentStep;
    if (!isAIEnabled && currentStep === 0) {
      const nextStep = 1 + contentTypeBuilderStepsAI.length;
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentTypeBuilder",
          step: nextStep
        }
      });
    } else if (isAIEnabled && currentStep === contentTypeBuilderStepsAI.length) {
      const nextStep = 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length;
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentTypeBuilder",
          step: nextStep
        }
      });
    } else {
      dispatch({
        type: "next_step",
        payload: "contentTypeBuilder"
      });
    }
  };
  const handlePreviousStep = () => {
    const currentStep = state.tours.contentTypeBuilder.currentStep;
    if (!isAIEnabled && currentStep === 1 + contentTypeBuilderStepsAI.length) {
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentTypeBuilder",
          step: 0
        }
      });
    } else if (isAIEnabled && currentStep === 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length) {
      dispatch({
        type: "go_to_step",
        payload: {
          tourName: "contentTypeBuilder",
          step: contentTypeBuilderStepsAI.length
        }
      });
    } else {
      dispatch({
        type: "previous_step",
        payload: "contentTypeBuilder"
      });
    }
  };
  return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, {
    children: [
      (0, import_jsx_runtime5.jsx)(StepCount, {
        tourName: "contentTypeBuilder",
        displayedCurrentStep,
        displayedTourLength
      }),
      props.children || (0, import_jsx_runtime5.jsx)(DefaultActions, {
        tourName: "contentTypeBuilder",
        onNextStep: handleNextStep,
        onPreviousStep: handlePreviousStep,
        ...props
      })
    ]
  });
};
var Introduction3 = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  sideOffset: 33,
  withArrow: false,
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.Introduction.title",
      defaultMessage: "Content-Type Builder"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.Introduction.content",
      defaultMessage: "Create and manage your content structure with collection types, single types and components."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showSkip: true
      })
    })
  ]
});
var AIChat = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "left",
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.AIChat.title",
      defaultMessage: "Time to get started!"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.AIChat.content",
      defaultMessage: "<p>If you have any questions about the Content-Type Builder or Strapi ask them here.</p><p>Strapi AI can generate schemas tailored to your needs. Ask for exactly what you want, for example:<ul><li>Date picker</li><li>Email and password fields</li><li>Media of any type</li><li>UIDs</li></ul></p><p>Don’t be shy, try it out !</p>"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true
      })
    })
  ]
});
var CollectionTypes = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "right",
  sideOffset: 16,
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.CollectionTypes.title",
      defaultMessage: "Collection Types"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.CollectionTypes.content",
      defaultMessage: "A content structure that can manage multiple entries, such as articles or products."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true
      })
    })
  ]
});
var SingleTypes = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "right",
  sideOffset: 16,
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.SingleTypes.title",
      defaultMessage: "Single Types"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.SingleTypes.content",
      defaultMessage: "A content structure that can manage a single entry, such as a homepage or a header."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true
      })
    })
  ]
});
var Components = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "right",
  sideOffset: 16,
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.Components.title",
      defaultMessage: "Components"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.Components.content",
      defaultMessage: "A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true
      })
    })
  ]
});
var YourTurn = ({ Step }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "right",
  sideOffset: 16,
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.YourTurn.title",
      defaultMessage: "Your turn"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.YourTurn.content",
      defaultMessage: "Create a collection type or single type and configure it."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true
      })
    })
  ]
});
var AddFields = ({ Step, dispatch }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "bottom",
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.AddFields.title",
      defaultMessage: "Don't forget to add a field to your content type"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.AddFields.content",
      defaultMessage: "Add the fields your content needs such as text, media and relations."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true,
        children: (0, import_jsx_runtime5.jsx)(GotItAction, {
          onClick: () => dispatch({
            type: "next_step",
            payload: "contentTypeBuilder"
          })
        })
      })
    })
  ]
});
var Save = ({ Step, dispatch }) => (0, import_jsx_runtime5.jsxs)(Step.Root, {
  side: "right",
  children: [
    (0, import_jsx_runtime5.jsx)(Step.Title, {
      id: "tours.contentTypeBuilder.Save.title",
      defaultMessage: "Save before you leave!"
    }),
    (0, import_jsx_runtime5.jsx)(Step.Content, {
      id: "tours.contentTypeBuilder.Save.content",
      defaultMessage: "Save the changes you made here before leaving this page."
    }),
    (0, import_jsx_runtime5.jsx)(Step.Actions, {
      children: (0, import_jsx_runtime5.jsx)(ContentTypeBuilderActions, {
        showPrevious: true,
        children: (0, import_jsx_runtime5.jsx)(GotItAction, {
          onClick: () => {
            dispatch({
              type: "remove_completed_action",
              payload: GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema
            });
            dispatch({
              type: "next_step",
              payload: "contentTypeBuilder"
            });
          }
        })
      })
    })
  ]
});
var Finish3 = ({ Step }) => {
  var _a, _b;
  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();
  const { "*": routeParams } = useParams();
  const uid = routeParams == null ? void 0 : routeParams.split("/").pop();
  const contentType = uid ? (_b = (_a = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _a.schemas) == null ? void 0 : _b[uid] : null;
  const contentTypeKindDictionary = {
    collectionType: "collection-types",
    singleType: "single-types"
  };
  const to = contentType ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}` : "/content-manager";
  return (0, import_jsx_runtime5.jsxs)(Step.Root, {
    side: "right",
    children: [
      (0, import_jsx_runtime5.jsx)(Step.Title, {
        id: "tours.contentTypeBuilder.Finish.title",
        defaultMessage: "First Step: Done! 🎉"
      }),
      (0, import_jsx_runtime5.jsx)(Step.Content, {
        id: "tours.contentTypeBuilder.Finish.content",
        defaultMessage: "You've built your first content type! Now head over to the Content Manager to start adding entries!"
      }),
      (0, import_jsx_runtime5.jsx)(Step.Actions, {
        showStepCount: false,
        showPrevious: false,
        to
      })
    ]
  });
};
var contentTypeBuilderStepsAI = [
  {
    name: "AIChat",
    content: AIChat
  }
];
var contentTypeBuilderStepsNoAI = [
  {
    name: "CollectionTypes",
    content: CollectionTypes
  },
  {
    name: "SingleTypes",
    content: SingleTypes
  },
  {
    name: "Components",
    content: Components
  },
  {
    name: "YourTurn",
    content: YourTurn
  },
  {
    name: "AddFields",
    content: AddFields
  }
];
var contentTypeBuilderSteps = [
  {
    name: "Introduction",
    content: Introduction3
  },
  ...contentTypeBuilderStepsAI,
  ...contentTypeBuilderStepsNoAI,
  {
    name: "Save",
    when: (completedActions) => completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),
    content: Save
  },
  {
    name: "Finish",
    content: Finish3,
    excludeFromStepCount: true,
    when: (completedActions) => completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema)
  }
];

// node_modules/@strapi/admin/dist/admin/admin/src/components/GuidedTour/Tours.mjs
var tours = {
  contentTypeBuilder: createTour("contentTypeBuilder", contentTypeBuilderSteps),
  contentManager: createTour("contentManager", contentManagerSteps),
  apiTokens: createTour("apiTokens", apiTokensSteps),
  strapiCloud: createTour("strapiCloud", [])
};
var GuidedTourTooltip = ({ children, ...props }) => {
  const state = useGuidedTour("TooltipWrapper", (s) => s.state);
  if (!state.enabled || state.hidden) {
    return children;
  }
  return (0, import_jsx_runtime6.jsx)(GuidedTourTooltipImpl, {
    ...props,
    children
  });
};
var GuidedTourOverlay = dt(Box)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(50, 50, 77, 0.2);
  z-index: 10;
`;
var GuidedTourTooltipImpl = ({ children, content, tourName, step, when }) => {
  var _a, _b;
  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();
  const state = useGuidedTour("GuidedTourTooltip", (s) => s.state);
  const dispatch = useGuidedTour("GuidedTourTooltip", (s) => s.dispatch);
  const isCurrentStep = state.tours[tourName].currentStep === step;
  const isStepConditionMet = when ? when(state.completedActions) : true;
  const isPopoverOpen = ((_a = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _a.isFirstSuperAdminUser) && !state.tours[tourName].isCompleted && isCurrentStep && isStepConditionMet;
  React4.useEffect(() => {
    if (!isPopoverOpen) return;
    const originalStyle = window.getComputedStyle(document.body).overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = originalStyle;
    };
  }, [
    isPopoverOpen
  ]);
  const Step = React4.useMemo(() => createStepComponents(tourName), [
    tourName
  ]);
  const hasApiSchema = Object.keys(((_b = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _b.schemas) ?? {}).filter((key) => key.startsWith("api::")).length > 0;
  React4.useEffect(() => {
    if (hasApiSchema) {
      dispatch({
        type: "set_completed_actions",
        payload: [
          GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema
        ]
      });
    }
  }, [
    dispatch,
    hasApiSchema,
    step,
    tourName
  ]);
  return (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, {
    children: [
      isPopoverOpen && (0, import_jsx_runtime6.jsx)(Portal$1, {
        children: (0, import_jsx_runtime6.jsx)(GuidedTourOverlay, {})
      }),
      (0, import_jsx_runtime6.jsxs)(Popover.Root, {
        open: isPopoverOpen,
        children: [
          (0, import_jsx_runtime6.jsx)(Popover.Anchor, {
            children
          }),
          content({
            Step,
            state,
            dispatch
          })
        ]
      })
    ]
  });
};
function createTour(tourName, steps) {
  const tour = steps.reduce((acc, step, index) => {
    const name = step.name;
    if (name in acc) {
      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);
    }
    acc[name] = ({ children }) => {
      return (0, import_jsx_runtime6.jsx)(GuidedTourTooltip, {
        tourName,
        step: index,
        content: step.content,
        when: step.when,
        children
      });
    };
    if (step.excludeFromStepCount) {
      acc._meta.displayedStepCount--;
    }
    return acc;
  }, {
    _meta: {
      totalStepCount: steps.length,
      displayedStepCount: steps.length
    }
  });
  return tour;
}

export {
  useMediaQuery,
  useIsDesktop,
  useIsTablet,
  useIsMobile,
  usePersistentState,
  useScopedPersistentState,
  GUIDED_TOUR_REQUIRED_ACTIONS,
  useAIAvailability,
  tours,
  useGuidedTour,
  getCompletedTours,
  GuidedTourContext
};
//# sourceMappingURL=chunk-TXPAHMSH.js.map
