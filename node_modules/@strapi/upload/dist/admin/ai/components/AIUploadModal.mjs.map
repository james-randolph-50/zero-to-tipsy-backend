{"version":3,"file":"AIUploadModal.mjs","sources":["../../../../admin/src/ai/components/AIUploadModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { createContext } from '@strapi/admin/strapi-admin';\nimport { Alert, Button, Flex, Modal } from '@strapi/design-system';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport {\n  AddAssetStep,\n  FileWithRawFile,\n} from '../../components/UploadAssetDialog/AddAssetStep/AddAssetStep';\nimport { useBulkEdit } from '../../hooks/useBulkEdit';\nimport { useUpload } from '../../hooks/useUpload';\nimport { getTrad } from '../../utils';\n\nimport { AIAssetCard, AIAssetCardSkeletons } from './AIAssetCard';\n\nimport type { File } from '../../../../shared/contracts/files';\n\n/* -------------------------------------------------------------------------------------------------\n * ModalBody\n * -----------------------------------------------------------------------------------------------*/\n\nconst StyledModalBody = styled(Modal.Body)`\n  padding: 0;\n  display: flex;\n  justify-content: center;\n\n  [data-radix-scroll-area-viewport] {\n    padding-top: ${({ theme }) => theme.spaces[6]};\n    padding-bottom: ${({ theme }) => theme.spaces[6]};\n    padding-left: ${({ theme }) => theme.spaces[7]};\n    padding-right: ${({ theme }) => theme.spaces[7]};\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  & > button {\n    display: none;\n  }\n`;\n\nconst ModalContent = ({ onClose }: Pick<AIUploadModalProps, 'onClose'>) => {\n  const { formatMessage } = useIntl();\n  const state = useAIUploadModalContext('ModalContent', (s) => s.state);\n  const dispatch = useAIUploadModalContext('ModalContent', (s) => s.dispatch);\n  const folderId = useAIUploadModalContext('ModalContent', (s) => s.folderId);\n  const { upload } = useUpload();\n  const { edit, isLoading: isSaving } = useBulkEdit();\n  const [isUploading, setIsUploading] = React.useState(false);\n  const [uploadError, setUploadError] = React.useState<Error | null>(null);\n\n  const handleCaptionChange = (assetId: number, caption: string) => {\n    dispatch({\n      type: 'set_uploaded_asset_caption',\n      payload: { id: assetId, caption },\n    });\n  };\n\n  const handleAltTextChange = (assetId: number, altText: string) => {\n    dispatch({\n      type: 'set_uploaded_asset_alt_text',\n      payload: { id: assetId, altText },\n    });\n  };\n\n  const resetState = () => {\n    dispatch({ type: 'set_uploaded_assets', payload: [] });\n  };\n\n  const handleFinish = async () => {\n    if (state.hasUnsavedChanges) {\n      const assetsToUpdate = state.uploadedAssets.filter(\n        (asset) => (asset.wasCaptionChanged || asset.wasAltTextChanged) && asset.file.id\n      );\n\n      if (assetsToUpdate.length > 0) {\n        const updates = assetsToUpdate.map((asset) => ({\n          id: asset.file.id!,\n          fileInfo: {\n            name: asset.file.name,\n            alternativeText: asset.file.alternativeText ?? null,\n            caption: asset.file.caption ?? null,\n            folder:\n              typeof asset.file.folder === 'object' && asset.file.folder !== null\n                ? // @ts-expect-error types are wrong\n                  asset.file.folder.id\n                : asset.file.folder,\n          },\n        }));\n\n        try {\n          await edit(updates);\n          dispatch({ type: 'clear_unsaved_changes' });\n        } catch (err) {\n          console.error('Failed to save asset changes:', err);\n          return; // Don't close modal on error\n        }\n      }\n    }\n\n    resetState();\n    onClose();\n  };\n\n  const handleCancel = () => {\n    resetState();\n    onClose();\n  };\n\n  const handleUpload = async (assets: FileWithRawFile[]) => {\n    dispatch({ type: 'set_assets_to_upload_length', payload: assets.length });\n    setUploadError(null);\n    setIsUploading(true);\n\n    try {\n      const assetsForUpload = assets.map((asset) => ({\n        ...asset,\n        id: asset.id ? Number(asset.id) : undefined,\n      }));\n\n      const uploadedFiles = await upload(assetsForUpload, folderId);\n      const filesWithFolder = uploadedFiles.map((file: File) => ({\n        ...file,\n        // The upload API doesn't populate the folder relation, so we add it manually\n        folder: folderId || file.folder,\n      }));\n      dispatch({ type: 'set_uploaded_assets', payload: filesWithFolder });\n    } catch (error) {\n      console.error('Upload failed:', error);\n      setUploadError(error instanceof Error ? error : new Error('Upload failed'));\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  if (state.assetsToUploadLength === 0) {\n    return (\n      <Modal.Content>\n        <AddAssetStep onClose={onClose} onAddAsset={handleUpload} />\n      </Modal.Content>\n    );\n  }\n\n  if (\n    isUploading ||\n    (state.assetsToUploadLength > 0 && state.uploadedAssets.length === 0 && !uploadError)\n  ) {\n    return (\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage({\n              id: getTrad('ai.modal.uploading.title'),\n              defaultMessage: 'Uploading and processing with AI...',\n            })}\n          </Modal.Title>\n        </Modal.Header>\n        <StyledModalBody>\n          <AIAssetCardSkeletons count={state.assetsToUploadLength} />\n        </StyledModalBody>\n      </Modal.Content>\n    );\n  }\n\n  const title = formatMessage(\n    {\n      id: getTrad('ai.modal.title'),\n      defaultMessage:\n        '{count, plural, one {# asset uploaded} other {# assets uploaded}}, review AI generated metadata',\n    },\n    { count: state.uploadedAssets.length }\n  );\n\n  if (uploadError) {\n    return (\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <StyledAlert closeLabel=\"\" variant=\"danger\">\n            {formatMessage({\n              id: getTrad('ai.modal.error'),\n              defaultMessage: 'Could not generate AI metadata for the uploaded files.',\n            })}\n          </StyledAlert>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={handleCancel} variant=\"tertiary\">\n            {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n          </Button>\n          <Button onClick={handleFinish} loading={isSaving}>\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Modal.Content>\n    );\n  }\n\n  return (\n    <Modal.Content>\n      <Modal.Header>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n\n      <StyledModalBody>\n        <Flex gap={6} direction=\"column\" alignItems=\"stretch\">\n          {state.uploadedAssets.map(({ file: asset, wasCaptionChanged, wasAltTextChanged }) => (\n            <AIAssetCard\n              key={asset.id}\n              asset={asset}\n              onCaptionChange={(caption: string) =>\n                asset.id && handleCaptionChange(asset.id, caption)\n              }\n              onAltTextChange={(altText: string) =>\n                asset.id && handleAltTextChange(asset.id, altText)\n              }\n              wasCaptionChanged={wasCaptionChanged}\n              wasAltTextChanged={wasAltTextChanged}\n            />\n          ))}\n        </Flex>\n      </StyledModalBody>\n\n      <Modal.Footer>\n        <Button onClick={handleCancel} variant=\"tertiary\">\n          {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button onClick={handleFinish} loading={isSaving}>\n          {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n        </Button>\n      </Modal.Footer>\n    </Modal.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UploadModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface AIUploadModalProps {\n  open: boolean;\n  onClose: () => void;\n  folderId?: number | null;\n}\n\ntype State = {\n  uploadedAssets: Array<{ file: File; wasCaptionChanged: boolean; wasAltTextChanged: boolean }>;\n  assetsToUploadLength: number;\n  hasUnsavedChanges: boolean;\n};\n\ntype Action =\n  | {\n      type: 'set_uploaded_assets';\n      payload: File[];\n    }\n  | {\n      type: 'set_assets_to_upload_length';\n      payload: number;\n    }\n  | {\n      type: 'set_uploaded_asset_caption';\n      payload: { id: number; caption: string };\n    }\n  | {\n      type: 'set_uploaded_asset_alt_text';\n      payload: { id: number; altText: string };\n    }\n  | {\n      type: 'remove_uploaded_asset';\n      payload: { id: number };\n    }\n  | {\n      type: 'edit_uploaded_asset';\n      payload: { editedAsset: File };\n    }\n  | {\n      type: 'clear_unsaved_changes';\n    };\n\nconst [AIUploadModalContext, useAIUploadModalContext] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n  folderId: number | null;\n  onClose: () => void;\n}>('AIUploadModalContext');\n\nconst reducer = (state: State, action: Action): State => {\n  return produce(state, (draft: State) => {\n    if (action.type === 'set_uploaded_assets') {\n      draft.uploadedAssets = action.payload.map((file) => ({\n        file,\n        wasCaptionChanged: false,\n        wasAltTextChanged: false,\n      }));\n      draft.hasUnsavedChanges = false;\n    }\n\n    if (action.type === 'set_assets_to_upload_length') {\n      draft.assetsToUploadLength = action.payload;\n    }\n\n    if (action.type === 'set_uploaded_asset_caption') {\n      const asset = draft.uploadedAssets.find((a) => a.file.id === action.payload.id);\n      if (asset && asset.file.caption !== action.payload.caption) {\n        asset.file.caption = action.payload.caption;\n        asset.wasCaptionChanged = true;\n        draft.hasUnsavedChanges = true;\n      }\n    }\n\n    if (action.type === 'set_uploaded_asset_alt_text') {\n      const asset = draft.uploadedAssets.find((a) => a.file.id === action.payload.id);\n      if (asset && asset.file.alternativeText !== action.payload.altText) {\n        asset.file.alternativeText = action.payload.altText;\n        asset.wasAltTextChanged = true;\n        draft.hasUnsavedChanges = true;\n      }\n    }\n\n    if (action.type === 'remove_uploaded_asset') {\n      draft.uploadedAssets = draft.uploadedAssets.filter((a) => a.file.id !== action.payload.id);\n    }\n\n    if (action.type === 'edit_uploaded_asset') {\n      const assetIndex = draft.uploadedAssets.findIndex(\n        (a) => a.file.id === action.payload.editedAsset.id\n      );\n      if (assetIndex !== -1) {\n        draft.uploadedAssets[assetIndex] = {\n          file: action.payload.editedAsset,\n          wasCaptionChanged: draft.uploadedAssets[assetIndex].wasCaptionChanged,\n          wasAltTextChanged: draft.uploadedAssets[assetIndex].wasAltTextChanged,\n        };\n      }\n    }\n\n    if (action.type === 'clear_unsaved_changes') {\n      draft.hasUnsavedChanges = false;\n      draft.uploadedAssets.forEach((asset) => {\n        asset.wasCaptionChanged = false;\n        asset.wasAltTextChanged = false;\n      });\n    }\n  });\n};\n\nexport const AIUploadModal = ({ open, onClose, folderId = null }: AIUploadModalProps) => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    uploadedAssets: [],\n    assetsToUploadLength: 0,\n    hasUnsavedChanges: false,\n  });\n\n  const handleClose = React.useCallback(() => {\n    // Reset state when modal closes\n    dispatch({ type: 'set_uploaded_assets', payload: [] });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <AIUploadModalContext\n      state={state}\n      dispatch={dispatch}\n      folderId={folderId}\n      onClose={handleClose}\n    >\n      <Modal.Root open={open} onOpenChange={handleClose}>\n        <ModalContent onClose={handleClose} />\n      </Modal.Root>\n    </AIUploadModalContext>\n  );\n};\n\nexport { useAIUploadModalContext };\n"],"names":["StyledModalBody","styled","Modal","Body","theme","spaces","StyledAlert","Alert","ModalContent","onClose","formatMessage","useIntl","state","useAIUploadModalContext","s","dispatch","folderId","upload","useUpload","edit","isLoading","isSaving","useBulkEdit","isUploading","setIsUploading","React","useState","uploadError","setUploadError","handleCaptionChange","assetId","caption","type","payload","id","handleAltTextChange","altText","resetState","handleFinish","hasUnsavedChanges","assetsToUpdate","uploadedAssets","filter","asset","wasCaptionChanged","wasAltTextChanged","file","length","updates","map","fileInfo","name","alternativeText","folder","err","console","error","handleCancel","handleUpload","assets","assetsForUpload","Number","undefined","uploadedFiles","filesWithFolder","Error","assetsToUploadLength","_jsx","Content","AddAssetStep","onAddAsset","_jsxs","Header","Title","getTrad","defaultMessage","AIAssetCardSkeletons","count","title","closeLabel","variant","Footer","Button","onClick","loading","Flex","gap","direction","alignItems","AIAssetCard","onCaptionChange","onAltTextChange","AIUploadModalContext","createContext","reducer","action","produce","draft","find","a","assetIndex","findIndex","editedAsset","forEach","AIUploadModal","open","useReducer","handleClose","useCallback","Root","onOpenChange"],"mappings":"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"}